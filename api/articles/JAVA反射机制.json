{"title":"JAVA 反射机制","uid":"bcb3e11c6b94d1211dd6ffd71733ea77","slug":"JAVA反射机制","date":"2023-05-08T16:51:30.000Z","updated":"2023-05-16T18:32:28.000Z","comments":true,"path":"api/articles/JAVA反射机制.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141527260.png","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>拖了很久，才开始学习JAVA 安全相关，最近很是摆烂，希望能够快速进入学习状态，冲冲冲！</p>\n<p>同时说明一下，本文大多参考自<strong>Y4tacker</strong>大师傅的<code>JavaSec</code>，因此例子大多是引用的，大师傅们勿喷。</p>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p>什么是JAVA 反射。接下来引用一下<strong>Y4tacker</strong>大师傅的话</p>\n<p><strong>Java反射机制是在运行状态时，对于任意一个类，都能够获取到这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法和属性(包括私有的方法和属性)，这种动态获取的信息以及动态调用对象的方法的功能就称为java语言的反射机制。</strong></p>\n<p>简单的说，就是通过java反射机制，我们可以获取任意类的成员方法、变量这些，同时，可以创建JAVA类实例，调用任意类方法。</p>\n<p>还有就是想说一下这里为什么称为反射，在JAVA中，我们可以这样理解：通过new一个对象而调用其中方法的，称为”正射”，而不通过new一个对象取得其中方法的，称为”反射”。</p>\n<h1 id=\"学前需知\"><a href=\"#学前需知\" class=\"headerlink\" title=\"学前需知\"></a>学前需知</h1><h2 id=\"反射的动态机制\"><a href=\"#反射的动态机制\" class=\"headerlink\" title=\"反射的动态机制\"></a>反射的动态机制</h2><p>反射机制是java实现动态语言的关键，也就是通过反射机制实现类动态加载</p>\n<p>1、静态加载：编译时加载相关的类，如果没有就报错，依赖性过强</p>\n<p>2、动态加载：运行时加载需要的类，如果运行时不使用该类，即使不存在也不会报错，降低了依赖性。</p>\n<p>示例如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Scanner</span> <span class=\"token class-name\">Scanner</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"1\"</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">Dog</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                dog<span class=\"token punctuation\">.</span><span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"2\"</span><span class=\"token operator\">:</span>\n                <span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Method</span> m <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此时去运行<code>javac Main.java</code>会发现无法编译成功，因为dog类已经是静态加载机制，这个需要提前加载，而这里没有，故报错，而如果有Dog类，即使没有Person类，编译也不会报错，会正常生成<code>class</code>文件，但当运行时会报错。</p>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><p>在JAVA的Lang包中存在一个名为<code>Class</code>的静态类，在JAVA程序编译加载某一个类时，JAVA.Lang.Class就会实例化出一个对象，这个对象存储了类的<strong>所有信息</strong>。因此，我们可以通过这个<code>Class</code>对象拿到这个类的信息。接下来我们先了解一些方法。</p>\n<h3 id=\"forName\"><a href=\"#forName\" class=\"headerlink\" title=\"forName()\"></a>forName()</h3><p><strong>forName</strong>方法可以获取类中的所有属性包括类名。</p>\n<p>示例如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>classname<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 获取classname类中的所有属性\n<span class=\"token class-name\">Class</span> qwq <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获取Runtime类中的所有属性，并赋值给clazz类</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"newInstance\"><a href=\"#newInstance\" class=\"headerlink\" title=\"newInstance()\"></a>newInstance()</h3><p>书接上文，我们在示例中将<code>Runtime</code>类中的所有属性赋值给了<code>qwq</code>类，接下来我们想要调用<strong>qwq</strong>类中的某个方法的话，需要三步</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">1</span>、对类进行实例化<span class=\"token punctuation\">(</span>实例化对象<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span>、获取方法\n<span class=\"token number\">3</span>、执行方法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来分步进行。</p>\n<p>第一步，是实例化对象，此时也就引入了我们的**newInstance()**方法，对该方法进行简单解释，此方法可以实例化对象，并触发类的构造方法。</p>\n<p>所以此时的话对象就创建完成了，接下来就是获取方法了。</p>\n<h3 id=\"getMethod\"><a href=\"#getMethod\" class=\"headerlink\" title=\"getMethod()\"></a>getMethod()</h3><p>我们在获取完对象后，对对象中的<strong>Public</strong>方法获取的方式是采用*getMethod()*函数，这个函数的具体参数如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法名，参数类型(如String.class)\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时就可以获取到方法了，接下来我们只需要进行执行方法即可，此时也就引入了我们的最后一个函数</p>\n<h3 id=\"involve\"><a href=\"#involve\" class=\"headerlink\" title=\"involve()\"></a>involve()</h3><p><strong>involve</strong>可以执行方法，如果是一个普通方法，则<code>involve</code>的第一个参数为该方法所在的对象，如果是静态方法则第一个参数是<code>Null</code>或者该方法所在的类，第二个参数为<strong>要执行方法的参数</strong>。</p>\n<p>上述只是一些常见的方法，并不是全部的，比如获取类的方法，不止有<code>forName</code>函数，接下来开始进一步讲解。</p>\n<h1 id=\"获取类\"><a href=\"#获取类\" class=\"headerlink\" title=\"获取类\"></a>获取类</h1><p>JAVA反射操作的是<code>java.lang.Class</code>对象，上文中提到过<code>Class</code>对象，在类被编译加载时，它会存储类的相关信息，所以我们这里需要首先获取到类。上述说了一个方法，<code>forName</code>方法，它并不是唯一的方法，还有两种常用的方法，具体如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">1</span>、<span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 当上下文中存在某个类的实例化对象，我们可以通<span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法直接获取它的类，示例如下<span class=\"token operator\">:</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"qwq\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Class</span> cla <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">2</span>、类名<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> 如果已经加载了一个类，我们知道类中的一个静态变量或是其他，此时便可直接获取，示例如下<span class=\"token operator\">:</span>\n<span class=\"token class-name\">Class</span> cla <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于<code>forName</code>方法，获取类的方式如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">3</span>、<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"完整类名\"</span><span class=\"token punctuation\">)</span>，当我们知道一个类的完整类名时，可以通过静态方法<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>获取\n<span class=\"token class-name\">Class</span> cla <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">//获取java.lang.String的全部方法 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"获取字段\"><a href=\"#获取字段\" class=\"headerlink\" title=\"获取字段\"></a>获取字段</h1><p>上文中说了获取类的方法，接下来说一下获取字段的方式，获取字段的话，主要用到以下两个函数</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">getFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：获得某个类的所有的公共（<span class=\"token keyword\">public</span>）的字段，包括父类中的字段。\n<span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：获得某个类的所有声明的字段，即包括<span class=\"token keyword\">public</span>、<span class=\"token keyword\">private</span>和proteced，但是不包括父类的申明字段。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这里借用一下<strong>Y4大师傅</strong>的示例。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> test <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span> stiClass <span class=\"token operator\">=</span> <span class=\"token class-name\">StuInfo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取public字段\"age\":</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stiClass<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取继承的public字段\"name\":</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stiClass<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取private字段\"money\":</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stiClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"money\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获得值,name.get里面参数需要该类对象，而不是.class</span>\n        <span class=\"token class-name\">Field</span> name <span class=\"token operator\">=</span> stiClass<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stiClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置值</span>\n        <span class=\"token class-name\">StuInfo</span> stuInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StuInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> money <span class=\"token operator\">=</span> stiClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"money\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        money<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        money<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>stuInfo<span class=\"token punctuation\">,</span><span class=\"token number\">2333333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stuInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StuInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PersonInfo</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"StuInfo&#123;\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"name=\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span>\n            <span class=\"token string\">\", money=\"</span> <span class=\"token operator\">+</span> money <span class=\"token operator\">+</span>\n            <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonInfo</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"quan9i\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里需要说明的是**money.setAccessible(true);*<em>这个语句，它是取消了</em>money*变量的特权模式，本来money是<code>private</code>的，不可被更改，访问这些，而当有这个语句后，就变的与<code>public</code>相同了（小白个人观点，可能有误）。</p>\n<h1 id=\"获取方法\"><a href=\"#获取方法\" class=\"headerlink\" title=\"获取方法\"></a>获取方法</h1><p>这里涉及了四个函数，具体如下所示</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">1</span>、<span class=\"token class-name\">Method</span> <span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>：获取某个<span class=\"token keyword\">public</span>的方法（包括父类）\n<span class=\"token number\">2</span>、<span class=\"token class-name\">Method</span> <span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>：获取当前类的某个方法（不包括父类）\n<span class=\"token number\">3</span>、<span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：获取所有<span class=\"token keyword\">public</span>的方法（包括父类）\n<span class=\"token number\">4</span>、<span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：获取当前类的所有方法（不包括父类）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>示例如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"quan9i\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Method</span> substring <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"substring\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>substring<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果调用的方法是静态方法。那么<code>invoke</code>方法传入的第一个参数永远为<code>null</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取Integer.parseInt(String)方法，参数为String:</span>\n<span class=\"token class-name\">Method</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parseInt\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 调用该静态方法并获取结果:</span>\n<span class=\"token class-name\">Integer</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"23333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"反射执行\"><a href=\"#反射执行\" class=\"headerlink\" title=\"反射执行\"></a>反射执行</h1><h1 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h1><p><code>java.lang.Runtime</code>因为有一个<code>exec</code>方法可以执行本地命令，所以在很多的<code>payload</code>中我们都能看到反射调用<code>Runtime</code>类来执行本地系统命令，通过学习如何反射<code>Runtime</code>类也能让我们理解反射的一些基础用法。</p>\n<p>执行的<code>Payload</code>如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305141057925.png\" alt=\"image-20230514105718783\"></p>\n<p>这个的话我们其实可以把他进行拆分，这句话拆分为五段，如下所示</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Method</span> execMethod <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Method</span> getRuntime <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">)</span>；\n<span class=\"token class-name\">Object</span> currentRuntime <span class=\"token operator\">=</span> getRuntime<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexecMethod<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>currentRuntime<span class=\"token punctuation\">,</span> <span class=\"token string\">\"calc.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对其进行简单讲解</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">1</span>、首先通过反射获取到<span class=\"token class-name\">Runtime</span>类\n<span class=\"token number\">2</span>、通过反射获取到<span class=\"token class-name\">Runtime</span>类的exec方法\n<span class=\"token number\">3</span>、通过反射获取到<span class=\"token class-name\">Runtime</span>类的getRuntime方法\n<span class=\"token number\">4</span>、创建<span class=\"token class-name\">Runtime</span>对象并调用exec方法\n<span class=\"token number\">5</span>、调用exec方法并执行命令exec <span class=\"token string\">\"calc.exe\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"一些其他引用反射的方式\"><a href=\"#一些其他引用反射的方式\" class=\"headerlink\" title=\"一些其他引用反射的方式\"></a>一些其他引用反射的方式</h1><ul>\n<li>我们刚才说到可以通过forname拿到了一个类，并且继续利用反射或实例化调用其中的方法，如果一个类没有无参构造方法或者也没有类似单例模式里的静态方法，那我们应该怎样通过反射实例化该类呢？</li>\n<li>如果一个方法或构造方法是私有方法，我们应该怎么去执行它呢？</li>\n</ul>\n<h2 id=\"ProcessBuilder\"><a href=\"#ProcessBuilder\" class=\"headerlink\" title=\"ProcessBuilder\"></a><strong>ProcessBuilder</strong></h2><p>第一个问题，我们可以用一个新的反射方法<code>getConstructor</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>：获取某个<span class=\"token keyword\">public</span>的<span class=\"token class-name\">Constructor</span>；\n<span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>：获取某个<span class=\"token class-name\">Constructor</span>；\n<span class=\"token function\">getConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：获取所有<span class=\"token keyword\">public</span>的<span class=\"token class-name\">Constructor</span>；\n<span class=\"token function\">getDeclaredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：获取所有<span class=\"token class-name\">Constructor</span>。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>和getMethod类似，<code>getConstructor</code>接收的参数是构造函数的的列表类型，因为构造函数也支持重载，所以要用参数列表类型才能唯一确定一个构造函数</p>\n<p>比如我们常用的另一种执行命令的方式ProcessBuilder，我们使用反射来获取其构造函数，然后 调用<code>start()</code>来执行命令</p>\n<p>接下来简单介绍一下ProcessBuilder。</p>\n<p>ProcessBuilder用于创建操作系统进程，它提供一种启动和管理进程（也就是应用程序）的方法，我们可以通过实例化这个类并且通过反射调用其中的start方法来开启一个子进程 。当<code>getRuntime</code>被禁用时，可以用<code>ProcessBuilder</code>来执行命令。它有两种构造函数</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ProcessBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> command<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ProcessBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> commang<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>接下来看这个执行命令的<code>Payload</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.ProcessBuilder\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessBuilder</span><span class=\"token punctuation\">)</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calc.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>执行过程如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">1</span>、首先利用反射获取<span class=\"token class-name\">ProcessBuilder</span>类；\n<span class=\"token number\">2</span>、获取<span class=\"token function\">clazz</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessBuilder</span><span class=\"token punctuation\">)</span>形参列表为<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> command的构造函数；\n<span class=\"token number\">3</span>、将获取到的构造函数利用newInstance进行实例化，调用构造函数；\n<span class=\"token number\">4</span>、对构造函数传入的参数为 calc<span class=\"token punctuation\">.</span>exe，并且用<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span>asList方法将要执行的命令转为<span class=\"token class-name\">List</span>类型；\n<span class=\"token number\">5</span>、返回<span class=\"token class-name\">List</span>类型的command；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305141620539.png\" alt=\"image-20230514162052363\"></p>\n<h2 id=\"如何执行私有方法\"><a href=\"#如何执行私有方法\" class=\"headerlink\" title=\"如何执行私有方法\"></a>如何执行私有方法</h2><p>使用<code>getDeclared</code>系列方法，函数介绍如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>：获取某个<span class=\"token keyword\">public</span>的<span class=\"token class-name\">Constructor</span>；\n<span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>：获取某个<span class=\"token class-name\">Constructor</span>；\n<span class=\"token function\">getConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：获取所有<span class=\"token keyword\">public</span>的<span class=\"token class-name\">Constructor</span>；\n<span class=\"token function\">getDeclaredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：获取所有<span class=\"token class-name\">Constructor</span>。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>getMethod</code>系列方法获取的是当前类中所有公共方法，包括从父类继承的方法；</li>\n<li><code>getDeclaredMethod</code>系列方法获取的是当前类中“声明”的方法，是实写在这个类里的，包括私有的方法，但从父类里继承来的就不包含了。</li>\n</ul>\n<p>举个例子，我们之前提到过Runtime的构造方法是私有的，所以我们要通过<code>Runtime.getRuntime()</code>来获取对象，其实我们也可以直接用<code>getDeclaredConstructor</code>来获取这个私有的构造方法实例化对象，进而执行命令：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span> m <span class=\"token operator\">=</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"calc.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里我们在获取到私有方法后，要用<code>setAccessible()</code>方法使这个私有方法可以被访问，其他的就和之前介绍的反射一样了，如果不用<code>setAccessible()</code>方法修改作用域这个方法是仍然不能调用的</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305141628516.png\" alt=\"image-20230514162816396\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://xz.aliyun.com/t/12155#toc-7\">https://xz.aliyun.com/t/12155#toc-7</a></p>\n<p><a href=\"https://javasec.org/javase/Reflection/Reflection.html\">https://javasec.org/javase/Reflection/Reflection.html</a></p>\n<p><a href=\"https://github.com/Y4tacker/JavaSec/blob/main/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%8F%8D%E5%B0%84/%E5%8F%8D%E5%B0%84.md\">https://github.com/Y4tacker/JavaSec/blob/main/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%8F%8D%E5%B0%84/%E5%8F%8D%E5%B0%84.md</a></p>\n<p>《JAVA安全漫谈》</p>\n","feature":true,"text":"前言拖了很久，才开始学习JAVA 安全相关，最近很是摆烂，希望能够快速进入学习状态，冲冲冲！ 同时说明一下，本文大多参考自Y4tacker大师傅的JavaSec，因此例子大多是引用的，大师傅们勿喷。 定义什么是JAVA 反射。接下来引用一下Y4tacker大师傅的话 Java反射...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":10,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA安全","slug":"JAVA安全","count":6,"path":"api/tags/JAVA安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%A6%E5%89%8D%E9%9C%80%E7%9F%A5\"><span class=\"toc-text\">学前需知</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84%E7%9A%84%E5%8A%A8%E6%80%81%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">反射的动态机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">常用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#forName\"><span class=\"toc-text\">forName()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#newInstance\"><span class=\"toc-text\">newInstance()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#getMethod\"><span class=\"toc-text\">getMethod()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#involve\"><span class=\"toc-text\">involve()</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E7%B1%BB\"><span class=\"toc-text\">获取类</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">获取字段</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">获取方法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">反射执行</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">命令</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E5%85%B6%E4%BB%96%E5%BC%95%E7%94%A8%E5%8F%8D%E5%B0%84%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">一些其他引用反射的方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ProcessBuilder\"><span class=\"toc-text\">ProcessBuilder</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">如何执行私有方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JAVA IO流","uid":"28fab77566c6f0e9ee58d916e868a3c4","slug":"JAVA IO流","date":"2023-05-28T16:51:30.000Z","updated":"2023-09-03T13:17:52.000Z","comments":true,"path":"api/articles/JAVA IO流.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202309032117163.jpeg","text":"前言向Drunkbaby师傅学习！ 在学习反序列化之前，首先要对输入输出流有一定的了解 JAVA IO什么是IO，即Input和Output输入与输出，通过IO可以完成硬盘文件的读和写。 流的传输过程： 首先不管是输入还是输出，传输的两端都是文件和java的运行程序，所以如果想要...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":10,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA安全","slug":"JAVA安全","count":6,"path":"api/tags/JAVA安全.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"一洞百分-记一次意外通杀之旅","uid":"594145ca1c62f813346e24debc2a5552","slug":"记一次渗透测试","date":"2023-04-30T18:27:30.000Z","updated":"2023-09-03T12:49:58.000Z","comments":true,"path":"api/articles/记一次渗透测试.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305010231396.jpeg","text":"声明文章首发于奇安信社区https://forum.butian.net/share/2264 前言小白初入渗透，想获得一个教育SRC的漏洞证书，觉得某州学院是比较好看的，而且只需要10rank，不是很多，对我这个小白很友好，因此就开始了本次的渗透之路（意外的收获了小通杀）。 目...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"渗透","slug":"渗透","count":2,"path":"api/categories/渗透.json"}],"tags":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":1,"path":"api/tags/漏洞挖掘.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true}}