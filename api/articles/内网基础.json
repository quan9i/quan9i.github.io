{"title":"内网渗透基础(一)","uid":"669ca80a1e42174aff287d7a7a620a36","slug":"内网基础","date":"2023-03-27T18:04:20.000Z","updated":"2024-02-14T07:48:40.000Z","comments":true,"path":"api/articles/内网基础.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080026781.jpeg","content":"<h1 id=\"内网基础概念\"><a href=\"#内网基础概念\" class=\"headerlink\" title=\"内网基础概念\"></a>内网基础概念</h1><h2 id=\"内网的概念\"><a href=\"#内网的概念\" class=\"headerlink\" title=\"内网的概念\"></a>内网的概念</h2><p>究竟什么是内网呢？《内网渗透攻防》中如是说</p>\n<p><strong>内网也指局域网，是指在某一区域由多台计算机互连而成的计算机组。</strong></p>\n<h2 id=\"工作组\"><a href=\"#工作组\" class=\"headerlink\" title=\"工作组\"></a>工作组</h2><p>在一个大型单位中，可能有成百上千台计算机，他们相互连接组成局域网，如果不进行分组，那么网络关系就会杂乱不堪，此时<strong>工作组</strong>的出现，成功解决了这个问题。它将局域网中不同的计算机按功能分别列入不同的工作组，使得网络更有序。</p>\n<h2 id=\"域\"><a href=\"#域\" class=\"headerlink\" title=\"域\"></a>域</h2><p>域是一个有安全边界的计算机集合（安全边界是指在两个域中，一个域中的用户无法访问另一个域中的资源），可以简单地把域理解为升级版的工作组。用户要想访问域内的资源，必须以合法的身份登录域，而用户对域内的资源拥有什么样的权限，还取决于用户在域内的身份。</p>\n<p>域内涉及了多个概念，例如<strong>域控制器、单域、域树</strong>等，接下来依次介绍</p>\n<h3 id=\"域控制器\"><a href=\"#域控制器\" class=\"headerlink\" title=\"域控制器\"></a>域控制器</h3><p><strong>DC（Domain Controller）</strong>，域控制器是域中一台类似管理服务器的主机，它拥有管理域内其他主机的计算机，它负责所有本域内的计算和用户的验证工作，它是整个域的通信枢纽，域内所有用来验证身份的账号和密码哈希都存在域控制器中。所以，内网渗透的最终目标常常就是为了攻下域控服务器，这样就等同于控制整个域内的计算机。</p>\n<h3 id=\"单域\"><a href=\"#单域\" class=\"headerlink\" title=\"单域\"></a>单域</h3><p>单域，就是指只有一个域环境的网络，这里需要说明的是，一般在一个域中，至少会有两台域服务器，一台作为DC，另一台作为备份DC</p>\n<h3 id=\"父域和子域\"><a href=\"#父域和子域\" class=\"headerlink\" title=\"父域和子域\"></a>父域和子域</h3><p>当存在多个域时，第一个域称为父域，各分部的域称为该域的子域。例如，xx公司总部设在北京，而在杭州，上海等地设有分公司，他们进行信息交互这种就需要用到父域和子域，此时，北京的这个就是父域，而处于杭州、上海的域就是分域。这样有什么好处呢</p>\n<p><strong>减小了域之间信息交互的压力（域内信息交互不会压缩，域间信息交互可压缩）</strong></p>\n<p><strong>不同的子域可以指定特定的安全策略</strong></p>\n<p>父子域中域名使用一个<code>.</code>表示一个层次，放在域名最后的子域称为最高级子域或一级子域，它前面的子域称为二级域 。</p>\n<p>现在，比如父域是<strong>quan9i.top</strong>，那么<strong>abc.quan9i.top</strong>就是一级子域，<code>cn.abc.quan9i.top</code>就是二级域</p>\n<h3 id=\"域树\"><a href=\"#域树\" class=\"headerlink\" title=\"域树\"></a>域树</h3><p>域树是多个域通过建立信任关系组成的集合。当两个域内需要相互访问时，就需要建立信任关系。建立信任关系后，可以将父子域连接成树状格式，此时就可以实现相互访问。</p>\n<h3 id=\"域森林\"><a href=\"#域森林\" class=\"headerlink\" title=\"域森林\"></a>域森林</h3><p>域森林是指多个<strong>域树</strong>通过建立信任关系组成的集合。例如，当前有域树<code>abc.net</code>和域树<code>abc.com</code>，两个本来是无法实现互相访问的，而当两个域树建立信任关系后，它们可以组成一个集合形式（域森林），实现相互访问。</p>\n<h3 id=\"域名服务器\"><a href=\"#域名服务器\" class=\"headerlink\" title=\"域名服务器\"></a>域名服务器</h3><p><strong>域名服务器(Domain Name Server,简称DNS)<strong>是指用于实现域名和与之对应的IP地址转换的服务器。简单的说，就是</strong>实现域名到IP地址的转换</strong> 。同时，域的名字就是DNS的名字，之所以出现这个情况是因为域中计算机使用DNS来定位DC、服务器等计算机。</p>\n<h2 id=\"活动目录\"><a href=\"#活动目录\" class=\"headerlink\" title=\"活动目录\"></a>活动目录</h2><p>**活动目录(Active Directory，简称AD)**是指域环境中提供目录服务的组件。</p>\n<p>它用于<strong>存储有关网络对象(用户、组、计算机、共享资源等)的信息</strong>,目录服务是指帮助用户快速、准确地寻找其所需要的服务。活动目录实现了目录服务，为企业提供了网络环境的集中式管理机制。</p>\n<p>活动目录的逻辑结构包括<strong>组织单元（OU）、域、域树、域森林</strong>，那什么是逻辑结构呢，它的定义是<strong>不考虑被管理对象的具体位置的组织框架</strong>。 </p>\n<p>活动目录主要提供以下功能:</p>\n<p><strong>1、账号集中管理 : 所有账号均存储在服务器中，以便执行命令和重置密码等</strong></p>\n<p><strong>2、软件集中管理：统一推送软件、安装打印机等。利用软件发布策略分布软件，可以让用户自由选择需要安装的软件</strong></p>\n<p><strong>3、环境集中管理：统一客户端桌面、IE、TCP/IP协议等设置</strong></p>\n<p><strong>4、增强安全性：统一部署杀毒软件和病毒扫描任务、集中管理用户的计算机权限、统一制定密码策略等。</strong></p>\n<p><strong>5、更可靠、更短的宕机时间：例如，利用活动目录控制用户访问权限，利用群集、负载均衡等技术对文件服务器进行容灾设置</strong></p>\n<h2 id=\"域控与活动目录的区别\"><a href=\"#域控与活动目录的区别\" class=\"headerlink\" title=\"域控与活动目录的区别\"></a>域控与活动目录的区别</h2><p>活动目录数据库，即拥有层次结构的数据库，简称为<strong>AD</strong>库。</p>\n<p>要实现域环境，其实就是要安装AD库。如果内网中的一台计算机上安装了AD，那它就变成了<strong>DC(用于存储活动目录数据库的计算机，即域控)</strong></p>\n<h2 id=\"安全域的划分\"><a href=\"#安全域的划分\" class=\"headerlink\" title=\"安全域的划分\"></a>安全域的划分</h2><p>在一个用路由器连的内网中，可以将网络划分为三个区域：**内网(安全级别最高)、DMZ(安全级别中等)、外网(安全级别最低)**，接下来对三个区域分别进行简单介绍。</p>\n<h3 id=\"内网\"><a href=\"#内网\" class=\"headerlink\" title=\"内网\"></a>内网</h3><p>内网：其拥有两个区：</p>\n<p><strong>1、核心区(存储企业最重要的数据、文档等信息资产，往往只有很少的主机能访问)</strong></p>\n<p><strong>2、办公区(公司员工日常的工作区，一般能够访问DMZ，部分主机可访问核心区)</strong></p>\n<h3 id=\"DMZ\"><a href=\"#DMZ\" class=\"headerlink\" title=\"DMZ\"></a>DMZ</h3><p><strong>DMZ(Demilitarized Zone，称为隔离区)<strong>，其是一个非安全系统与安全系统之间的缓冲区，也就是说，</strong>DMZ</strong>一般位于内网和外部网络之间。这里主要用于对外提供服务，可以在此放置一些必须公开的服务器设施，例如<strong>企业Web服务器、FTP服务器和论坛服务器等</strong></p>\n<h3 id=\"外网\"><a href=\"#外网\" class=\"headerlink\" title=\"外网\"></a>外网</h3><p><code>Internet</code>，安全级别最低。</p>\n<h3 id=\"三者关系\"><a href=\"#三者关系\" class=\"headerlink\" title=\"三者关系\"></a>三者关系</h3><p>在配置一个拥有DMZ的网络时，通常需要定义如下访问控制策略，以实现其屏障功能。</p>\n<p><strong>1、内网可以访问外网：内网用户需要自由地访问外网</strong></p>\n<p><strong>2、内网可以访问DMZ：此策略使内网用户可以使用或者管理DMZ中的服务器</strong></p>\n<p><strong>3、外网不能访问内网：内网中存储的是公司内部数据，这些数据一般是不允许外网用户访问的(如果要访问，可以通过VPN方式进行)</strong></p>\n<p><strong>4、外网可以访问DMZ:因为DMZ中的服务器需要为外界提供服务，所以外网必须可以访问DMZ</strong></p>\n<p><strong>5、DMZ不能访问内网:如果不执行此策略，当攻击者攻陷DMZ时，内网将无法受到保护</strong></p>\n<p><strong>6、DMZ不能访问外网:此策略也有例外。例如，在DMZ放置了邮件服务器，就要运行访问外网，否则邮件服务器无法正常工作</strong></p>\n<h1 id=\"内网信息搜集\"><a href=\"#内网信息搜集\" class=\"headerlink\" title=\"内网信息搜集\"></a>内网信息搜集</h1><h2 id=\"网络信息\"><a href=\"#网络信息\" class=\"headerlink\" title=\"网络信息\"></a>网络信息</h2><p><strong>ipconfig /all</strong>查看网络配置信息</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303281637312.png\" alt=\"image-20230328163741254\"></p>\n<p><strong>netstat -ano</strong>查询端口连接情况</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303281639264.png\" alt=\"image-20230328163937210\"></p>\n<p><strong>route print</strong>查询路由表</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303281651807.png\" alt=\"image-20230328165140755\"></p>\n<p>**arp -a **查看arp缓存</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303281640263.png\" alt=\"image-20230328164026228\"></p>\n<h2 id=\"系统信息\"><a href=\"#系统信息\" class=\"headerlink\" title=\"系统信息\"></a>系统信息</h2><p><strong>systeminfo</strong>查询系统信息以及补丁列表</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303281642040.png\" alt=\"image-20230328164213985\"></p>\n<p>**echo %PROCESSOR_ARCHITECTURE%**查询系统体系结构</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303281647677.png\" alt=\"image-20230328164755647\"></p>\n<h2 id=\"域相关\"><a href=\"#域相关\" class=\"headerlink\" title=\"域相关\"></a>域相关</h2><p><strong>net view /domain</strong>查找域</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303281505567.png\" alt=\"image-20230328150513510\"></p>\n<p><strong>net group /domain</strong>用于获取域用户组信息</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303200014911.png\" alt=\"image-20230320001453884\"></p>\n<p><strong>net user /domain</strong>用于获取所有域用户列表</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303200015361.png\" alt=\"image-20230320001417357\"></p>\n<p><strong>net user xxx /domain</strong>用于查询指定域用户详细信息</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303281509435.png\" alt=\"image-20230328150911401\"></p>\n<p><strong>net config workstation</strong>查看当前工作域</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303200017816.png\" alt=\"image-20230319165324330\"></p>\n<p><strong>net group “domain controllers” /domain</strong>查询域控</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303200018709.png\" alt=\"image-20230319170352671\"></p>\n<p><strong>wmic useraccount get /all</strong>获取域内用户详细信息</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303280944830.png\" alt=\"image-20230328094410745\"></p>\n<p><strong>dsquery user</strong>查询存在的用户</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303280945494.png\"></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><strong>tasklist</strong>查询进程列表</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303281655294.png\" alt=\"image-20230328165504251\"></p>\n<p><strong>netsh firewall show config</strong>查看防火墙配置</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303281650319.png\" alt=\"image-20230328165035266\"></p>\n<p><strong>schtasks /query /fo LIST /v</strong>查询定时任务</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303281653518.png\" alt=\"image-20230328165337484\"></p>\n<h1 id=\"信任协议\"><a href=\"#信任协议\" class=\"headerlink\" title=\"信任协议\"></a>信任协议</h1><p>运行 Windows Server 2008 或 Windows Server 2008 R2 的域控使用以下<strong>两个协议之一对用户和应用程序进行身份验证</strong>：<strong>Kerberos 版本 5 (V5)</strong> 协议或 <strong>NTLM（New Technology LAN Manager）</strong>。</p>\n<p>NTLM是Windows NT早期的信任协议，现在的Server2000、2003等服务器，都是默认采用的Kerberos V5，只有在事务中任意台计算器不支持Kerberos时，才会使用NTLM。</p>\n<h2 id=\"Kerberos协议\"><a href=\"#Kerberos协议\" class=\"headerlink\" title=\"Kerberos协议\"></a>Kerberos协议</h2><p><code>Kerberos</code>是一种网络身份验证协议。它旨在使用密钥加密技术为客户端/服务端应用程序提供强身份验证。</p>\n<p>这个协议主要涉及三个角色</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、访问服务的客户端<span class=\"token punctuation\">(</span>Client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">Kerberos</span>客户端代表需要访问资源的用户进行操作的应用程序，例如打开文件、查询数据库等。每个Kerberos客户端在访问资源前都会请求身份验证。\n    \n<span class=\"token number\">2</span>、提供服务的服务端<span class=\"token punctuation\">(</span>Server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> 域内提供服务的服务端，服务都有唯一的服务主体名称<span class=\"token punctuation\">(</span><span class=\"token constant\">SPN</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token number\">3</span>、提供认证服务的密钥分发中心<span class=\"token punctuation\">(</span><span class=\"token constant\">KDC</span><span class=\"token punctuation\">,</span>Key Distribution Center<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token class-name return-type\">KDC</span>是一种网络服务，它向活动目录域内的用户和计算机提供会话票据和临时会话密钥，其服务账号为<span class=\"token function\">krbtgt</span><span class=\"token punctuation\">(</span>创建活动目录时系统自动生成的用户，其密码由系统随机生成，无法正常登录主机<span class=\"token punctuation\">)</span>。<span class=\"token constant\">KDC</span>运行在每个域控制器上。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>他们的关系如下图所示</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303200051319.png\" alt=\"image-20230320005122287\"></p>\n<p>他们的关系即<strong>Client</strong>要访问<strong>Server</strong>，则必须需要<strong>票据</strong>，而<strong>票据</strong>则是由<strong>KDC</strong>提供</p>\n<p>针对<strong>KDC</strong>，这里需要进行简单说明</p>\n<p><strong>KDC</strong>一般安装在<strong>域控中</strong>，<strong>KDC</strong>具体分为两部分</p>\n<p><strong>Authentication Server</strong>和<strong>Ticket Granting Server</strong></p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303200059563.png\" alt=\"image-20230320005957527\"></p>\n<p>前者的作用是用于验证<strong>Client</strong>的身份(类似我们刷脸验证，确认与身份证上的人一致)，如果验证通过，就会颁发<strong>TGT（Ticket Granting Ticket）票据</strong>给<strong>Client</strong>。而后者的作用是通过<strong>Authentication Server</strong>颁发的<strong>TGT票据</strong>换取<strong>Server服务端</strong>的<strong>Service Ticket</strong>票据(类似电影票二维码扫码取票操作)。</p>\n<h3 id=\"kerberos认证过程\"><a href=\"#kerberos认证过程\" class=\"headerlink\" title=\"kerberos认证过程\"></a>kerberos认证过程</h3><p>首先，在开始之前对稍后需要用到的名词进行简单介绍</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token function\">DC</span><span class=\"token punctuation\">(</span>Domain Controller<span class=\"token punctuation\">)</span>：域控制器。\n\n<span class=\"token function\">KDC</span><span class=\"token punctuation\">(</span>Key Distribution Center<span class=\"token punctuation\">)</span>：秘钥分发中心，默认安装在域控里，包括<span class=\"token keyword\">AS</span>和<span class=\"token constant\">TGS</span>。\n\n<span class=\"token keyword\">AS</span><span class=\"token punctuation\">(</span>Authentication Service<span class=\"token punctuation\">)</span>：身份验证服务，用于<span class=\"token constant\">KDC</span>对Client认证。\n\n<span class=\"token function\">TGS</span><span class=\"token punctuation\">(</span>Ticket Grantng Service<span class=\"token punctuation\">)</span>：票据授予服务，用于<span class=\"token constant\">KDC</span>向Client和Server分发Session Key（临时秘钥）。\n\n<span class=\"token function\">TGT</span><span class=\"token punctuation\">(</span>Ticket Granting Ticket<span class=\"token punctuation\">)</span>：认证票据，用于验证Client的身份。\n\n<span class=\"token function\">ST</span><span class=\"token punctuation\">(</span>Server Ticket<span class=\"token punctuation\">)</span>：服务票据。\n\n<span class=\"token function\">AD</span><span class=\"token punctuation\">(</span>Active Directory<span class=\"token punctuation\">)</span>：活动目录，用于存储用户、用户组、域相关的信息。\n\nClient：客户端，也可以理解为用户。\n\nServer：服务端，可以是某台计算机，也可以是某个域内服务。\n\nkrbtgt用户：创建域控时由系统自动生成的用户。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"过程一\"><a href=\"#过程一\" class=\"headerlink\" title=\"过程一\"></a>过程一</h3><p><strong>Client通过As验证，获取TGT</strong></p>\n<p>当<code>Client</code>要访问<code>Server</code>时，需要<code>AS</code>来进行身份认证，<code>Client</code>输入账密，并向<code>KDC</code>发送一个<code>AS_REQ</code>(由使用了<code>Client</code>的<code>NTLM-Hash</code>加密的时间戳、<code>Client</code>信息以及<code>Server</code>信息等组成)。</p>\n<p><code>As</code>收到服务端发送的<code>AS_REQ</code>，首先向<code>AD</code>查询是否存在此用户，存在的话则用此用户的<code>NTLM-Hash</code>来进行解密，如果解密成功，且解密后得到的时间戳与当时的时间相差在5分钟内则认为其认证成功。</p>\n<p><strong>这里之所以限制5分钟，是为了保证AS_REQ的安全，在传输它的过程中，可能会被黑客截获，如果黑客想进行重放攻击，就需要花费一定时间，所以五分钟就起到了包含AS_REQ的作用</strong></p>\n<p>这里存在两个验证</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、Client对<span class=\"token keyword\">As</span>的验证\n<span class=\"token number\">2</span>、<span class=\"token keyword\">As</span>如何判断此Client为真<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>第一个，如何判断<code>As</code>为真，使用<code>Client</code>的<code>NTLM-Hash</code>进行加密，如果<code>As</code>为真则可以正常解密<code>AS_REQ</code>。</p>\n<p>第二个，如何验证<code>Client</code>为真，如果<code>Client</code>为真，则<code>As</code>用<code>Client</code>的<code>NTLM-Hash</code>是可以正确解密出来的。</p>\n<p>接下来<code>AS</code>会生成一个<code>AS_REP</code>，<code>AS_REP</code>由两部分组成</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、<span class=\"token keyword\">As</span>生成的临时密钥Session<span class=\"token operator\">-</span>key，然后使用Client的<span class=\"token constant\">NTLM</span><span class=\"token operator\">-</span>Hash加密，用于Client和<span class=\"token constant\">KDC</span>进行安全通信\n<span class=\"token number\">2</span>、<span class=\"token constant\">TGT</span>，内容由使用特定用户krbtgt的<span class=\"token constant\">NTLM</span><span class=\"token operator\">-</span>Hash加密的Sessions<span class=\"token operator\">-</span>key、时间戳以及部分用户信息组成<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"过程二\"><a href=\"#过程二\" class=\"headerlink\" title=\"过程二\"></a>过程二</h3><p><strong>Client与TGS认证，获取ST服务票据</strong></p>\n<p>当<code>Client</code>收到了<code>As</code>的<code>AS_REQ</code>时，会使用自己的<code>NTLM-Hash</code>，将被加密过的临时密钥<code>Session-key</code>进行解密，然后将其保存在本地，如果需要访问<code>Server</code>时就可以构成<code>TGS_REQ</code>(包含<code>Session-key</code>、加密的时间戳以及服务端信息、<code>krbtgt</code>用户<code>NTLM-Hash</code>加密的<code>TGT</code>等)提交给TGS，从而获取对应的<code>ST</code></p>\n<p>当TGS收到<code>TGS_REQ</code>后，首先对<code>Krbtgt</code>用户<code>NTLM-Hash</code>加密的<code>TGT</code>进行解密，目的是得到<code>Sessions-key</code>、时间戳以及服务端信息等。与过程一类似，它有一个时间校验机制，如果时间戳和解密时间相差太久则终止验证，同时<code>TGS</code>会根据<code>TGT</code>里的<code>Client</code>信息和当前信息进行比对，判断是否为同一人，判断无误后会去判断此<code>Client</code>是否拥有访问<code>Server</code>的权限，若有则返回<code>TGS_REP</code>，它由两部分组成</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、<span class=\"token constant\">TGS</span>生成的新Session<span class=\"token operator\">-</span>key，然后再使用第一个过程中<span class=\"token keyword\">As</span>生成的Session<span class=\"token operator\">-</span>key进行加密。\n<span class=\"token number\">2</span>、使用Server的<span class=\"token constant\">NTLM</span><span class=\"token operator\">-</span>Hash加密的Sessions<span class=\"token operator\">-</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span>由<span class=\"token constant\">TGS</span>生成的<span class=\"token punctuation\">)</span>、时间戳以及用户信息，此即<span class=\"token constant\">ST</span>服务票据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>在此过程中存在一个验证</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、<span class=\"token constant\">TGS</span>如何判断Client为真<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里一开始解密的是<code>Session-key</code>(As生成的)，而这个<code>Session-key</code>处了<code>Dc</code>就只有<code>Client</code>知道。</p>\n<h3 id=\"过程三\"><a href=\"#过程三\" class=\"headerlink\" title=\"过程三\"></a>过程三</h3><p><code>Cleint</code>收到了<code>TGS_REP</code>，得到加密的<code>Sessions-key</code>，接下来操作同上，利用刚刚存储的<code>Sessions-key</code>(As生成的)对<code>Sessions-key</code>(TGS生成的)进行解密，得到未加密的<code>Session-key</code>(TGS生成的)，然后存储在本地。</p>\n<p>当<code>Client</code>需要访问<code>Server</code>时，<code>Client</code>会发生<code>AP_REQ</code></p>\n<p><code>AP_REQ</code>由<code>Sessions-key</code>(TGS生成的)、时间戳、服务端信息等内容组成，然后再把<code>ST服务票据</code>一同发送给<code>Server</code>。</p>\n<p><code>Server</code>收到<code>AP_REQ</code>使用自己的<code>NTLM-Hash</code>对<code>ST服务票据</code>进行解密，拿到<code>Sessions-key</code>(TGS生成的)、时间戳、服务端信息等数据，而后根据<code>ST</code>内的时间戳与解密时时间作对比，如果时间未超过8小时则验证成功，反之失败。然后<code>Server</code>询问<code>DC</code>该用户是否有访问权限，如果有则允许<code>Client</code>访问<code>Server</code></p>\n<p>图示如下（摘自先知社区，不过好像是来源于csdn的，但未在csdn中找到）</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303281523435.png\" alt=\"image-20230328152331311\"></p>\n<h2 id=\"NTLM协议\"><a href=\"#NTLM协议\" class=\"headerlink\" title=\"NTLM协议\"></a>NTLM协议</h2><p>在学习 <code>NTLM</code>协议前，首先需要了解两个基本概念，<code>SSPI</code>和<code>SSP</code></p>\n<h3 id=\"SSPI\"><a href=\"#SSPI\" class=\"headerlink\" title=\"SSPI\"></a>SSPI</h3><p>**SSPI(Security Service Provider Interface，安全服务提供接口)**是Windows定义的一套接口，该接口定义了与安全有关的功能函数，包含但不限于:</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">身份验证机制\n为其他协议提供的 Session Securtiy机制<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>但<code>SSPI</code>仅仅只是定义了一套接口函数，并未实现具体内容。</p>\n<h3 id=\"SSP\"><a href=\"#SSP\" class=\"headerlink\" title=\"SSP\"></a>SSP</h3><p>**SSP(Security Serivice Provider，安全服务提供者)**是<code>SSPI</code>的实现者。微软自己实现了很多<code>SSP</code>，用于提供安全功能，包含但不限于：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">NTLM</span> <span class=\"token constant\">SSP</span><span class=\"token punctuation\">:</span>Windows <span class=\"token constant\">NT</span> <span class=\"token number\">3.51</span>中引入<span class=\"token punctuation\">(</span>msv1_0<span class=\"token operator\">.</span>dll<span class=\"token punctuation\">)</span>，为Windows <span class=\"token number\">2000</span>之前的客户端<span class=\"token operator\">-</span>服务器域和非域身份验证提供<span class=\"token constant\">NTLM</span>质询<span class=\"token operator\">/</span>响应身份验证\nKerberos <span class=\"token constant\">SSP</span>：WIndows <span class=\"token number\">2000</span> 中引入， Windows Vista 中更新为支持<span class=\"token constant\">AES</span>，为Windows <span class=\"token number\">2000</span> 及更高版本中首选的客户端<span class=\"token operator\">-</span>服务器域提供相互身份验证\nDigest <span class=\"token constant\">SSP</span><span class=\"token punctuation\">:</span> 在Windows和非Windows系统间提供<span class=\"token constant\">HTTP</span>和<span class=\"token constant\">SASL</span>身份验证的质询<span class=\"token operator\">/</span>响应\nNegotiate <span class=\"token constant\">SSP</span><span class=\"token punctuation\">:</span> 默认选择Kerberos，如果不可选则选择<span class=\"token constant\">NTLM</span>协议。提供单点登录功能<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>关系图如下</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303240139332.png\" alt=\"image-20230324013925279\"></p>\n<h3 id=\"LM-Hash\"><a href=\"#LM-Hash\" class=\"headerlink\" title=\"LM Hash\"></a>LM Hash</h3><p><strong>LM hash</strong>本质是<code>DES加密</code>，目前Windows已将<code>LM Hash</code>禁用(从 Windows Vista 和 Windows Server 2008开始，原因是容易被破解)。<code>LM Hash</code>明文密码被限定在<code>14</code>位以内，也就是说，若要停止使用<code>LM Hash</code>，将用户密码设置为14位以上即可。</p>\n<p><strong>LM Hash</strong>的加密流程如下，这里以<code>P@ss1234</code>为例</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、将用户的明文口令转换为大写，并转换为十六进制字符串\np@ss1234 <span class=\"token operator\">-></span> <span class=\"token constant\">P</span>@<span class=\"token constant\">SS1234</span> <span class=\"token operator\">-></span> <span class=\"token property\">5040535331323334</span>\n<span class=\"token number\">2</span>、如果转换后的十六进制字符串长度不足<span class=\"token number\">14</span>Byte<span class=\"token punctuation\">(</span>长度<span class=\"token number\">28</span><span class=\"token punctuation\">)</span>，则用<span class=\"token number\">0</span>来补全\n<span class=\"token number\">5040535331323334</span> <span class=\"token operator\">-></span> <span class=\"token property\">5040535331323334000000000000</span>\n<span class=\"token number\">3</span>、 将<span class=\"token number\">14</span>B分为两组，每组<span class=\"token number\">7</span>B，然后转换为二进制数据，每组二进制数据长度为<span class=\"token number\">56</span>bit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303240146910.png\" alt=\"image-20230324014637870\"></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">4</span>、将每组二进制数据按<span class=\"token number\">7</span>bit为一组，分为<span class=\"token number\">8</span>组，每组末尾加<span class=\"token number\">0</span>，再转换为十六进制，此时每组也就成了<span class=\"token number\">8</span>B长度的十六进制数据了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303240147194.png\" alt=\"image-20230324014749143\"></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">5</span>、将生成的两组<span class=\"token number\">8</span>B的十六进制数据，分别作为<span class=\"token constant\">DES</span>加密秘钥对字符串<span class=\"token string double-quoted-string\">\"KGS!@#S%\"</span>进行加密。而后将密文进行拼接，即可得到最终的<span class=\"token constant\">LM</span> Hash值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303240148325.png\" alt=\"image-20230324014850292\"></p>\n<h3 id=\"NTLM-Hash加密算法\"><a href=\"#NTLM-Hash加密算法\" class=\"headerlink\" title=\"NTLM Hash加密算法\"></a>NTLM Hash加密算法</h3><p><strong>NTLM Hash</strong>算法是微软为了在提高安全性的同时保证兼容性而设计的散列加密算法，它是基于MD4加密算法进行加密的。</p>\n<p>其加密流程如下，这里仍以明文密码<code>P@ss1234</code>为例</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、将用户密码转换为十六进制格式\n    <span class=\"token constant\">P</span>@ss1234 <span class=\"token operator\">-></span> <span class=\"token property\">5040535331323334</span>\n<span class=\"token number\">2</span>、将<span class=\"token constant\">ASCII</span>编码的十六进制格式的字符串转为Unicode编码\n    <span class=\"token number\">5040535331323334</span> <span class=\"token operator\">-></span> <span class=\"token property\">50004000730073003100320033003400</span>\n<span class=\"token number\">3</span>、对Unicode编码的十六进制字符串进行标准<span class=\"token constant\">MD4</span>单向Hash加密\n    <span class=\"token number\">50004000730073003100320033003400</span> <span class=\"token operator\">-></span> <span class=\"token property\">74520a4ec2626e3638066146a0d5ceae</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述过程亦可用<strong>Python</strong>实现，代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> hashlib<span class=\"token punctuation\">,</span>binascii<span class=\"token punctuation\">;</span>\n\nkey <span class=\"token operator\">=</span> <span class=\"token string\">\"P@ss1234\"</span>\n\nNTLM_Hash <span class=\"token operator\">=</span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>hashlib<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"md4\"</span><span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-16le\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#binascii.hexlify():返回二进制数据的十六进制表示。 每个字节被转换成相应的 2位十六进制表示形式。</span>\n<span class=\"token comment\">#hashlib.new()是一个通用构造函数，它将所需算法的字符串 name 作为其第一个参数。 它还允许访问上面列出的哈希值以及您的 OpenSSL 库可能提供的任何其他算法。</span>\n<span class=\"token comment\">#digest():返回摘要，作为二进制数据字符串值</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>NTLM_Hash<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303272020088.png\" alt=\"image-20230327202006885\"></p>\n<h3 id=\"Windows系统存储的NTLM-Hash\"><a href=\"#Windows系统存储的NTLM-Hash\" class=\"headerlink\" title=\"Windows系统存储的NTLM Hash\"></a>Windows系统存储的NTLM Hash</h3><p>在<code>Windows</code>环境中，用户的密码经过<code>NTLM Hash</code>加密后存储在<code>C:\\Windows\\system32\\config\\SAM</code>文件中。它的认证过程如下所示：</p>\n<p>在用户输入密码进行本地认证过程中，所有操作都是于本地进行的，系统将密码转换为<code>NTLM Hash</code>，而后与<code>SAM</code>文件中的<code>NTLM Hash</code>进行比较，相同则密码正确。</p>\n<p>接下来说一点其他的，<code>mimikatz</code>是如何抓取密码的呢。这里也牵扯到这个，具体如下：</p>\n<p>当用户注销、重启、锁屏后，操作系统就会让<code>winlogon.exe</code>显示登录界面，也就是输入框。当<code>winlogon.exe</code>接收输入后，将密码交给<code>lsass.exe</code>进程，<code>lsass.exe</code>进程中会存一份明文密码，我们使用<code>mimikatz</code>就是从这里(<code>lsass.exe</code>进程)抓取明文密码或者<code>Hash</code>密码。</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303272029002.png\" alt=\"image-20230319163144742\"></p>\n<h3 id=\"NTLM协议认证\"><a href=\"#NTLM协议认证\" class=\"headerlink\" title=\"NTLM协议认证\"></a>NTLM协议认证</h3><p><strong>NTLM协议</strong>是基于一种<strong>质询/响应</strong>的验证机制，其由三种类型消息组成</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">Type <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>协商<span class=\"token punctuation\">)</span>\nType <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span>质询<span class=\"token punctuation\">)</span>\nType <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span>认证<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303272038755.png\" alt=\"image-20230327203803672\"></p>\n<p>工作组环境的NTLM认证流程如下图所示</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303272038800.png\" alt=\"image-20230327203839745\"></p>\n<p>具体认证过程如下</p>\n<p><strong>1、当客户端需要访问服务器的某个服务时，就需要进行身份验证。此时客户端输入用户名和密码进行验证后，就会在本地缓存一份服务器密码的NTLM Hash值，而后客户端向服务端发送一个请求(包含服务器用户名和其他一些需要协商的消息)，此过程为Type 1 协商消息</strong></p>\n<p><strong>2、服务端收到客户端消息后，读取服务端所支持的内容，取出部分信息传入NTLM SSP（部分信息指的是自己能接受的服务内容、加密等级、安全服务等），得到Type 2 质询消息，并将此发回给客户端(消息包含16位的随机Challenge质询值，服务端也会有缓存)</strong></p>\n<p><strong>3、客户端收到Type 2消息后，读取服务端内容并取出Challenge，而后用过程1中本地缓存的NTLM Hash对Challenge进行加密得到Response消息。最后将Response、用户名以及其他信息封装到NTLMSSP_AUTH消息中(Type 3认证消息)，发往服务端</strong></p>\n<p><strong>4、服务端收到验证消息后，取出Net-NTLM Hash，而后用自己密码的NTLM Hash对过程2中的Challenge值进行加密，得到自己的Net-NTLM Hash，比较两者是否相等，如果相等，则说明密码正确，反之则错误，认证失败。</strong></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>《域渗透攻防指南》</p>\n<p>《内网安全攻防：渗透测试实战指南》</p>\n","feature":true,"text":"内网基础概念内网的概念究竟什么是内网呢？《内网渗透攻防》中如是说 内网也指局域网，是指在某一区域由多台计算机互连而成的计算机组。 工作组在一个大型单位中，可能有成百上千台计算机，他们相互连接组成局域网，如果不进行分组，那么网络关系就会杂乱不堪，此时工作组的出现，成功解决了这个问题...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"内网","slug":"内网","count":12,"path":"api/categories/内网.json"}],"tags":[{"name":"内网","slug":"内网","count":13,"path":"api/tags/内网.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">内网基础概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%91%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">内网的概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E4%BD%9C%E7%BB%84\"><span class=\"toc-text\">工作组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%9F\"><span class=\"toc-text\">域</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">域控制器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%9F%9F\"><span class=\"toc-text\">单域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%88%B6%E5%9F%9F%E5%92%8C%E5%AD%90%E5%9F%9F\"><span class=\"toc-text\">父域和子域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%9F%E6%A0%91\"><span class=\"toc-text\">域树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%9F%E6%A3%AE%E6%9E%97\"><span class=\"toc-text\">域森林</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">域名服务器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">活动目录</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%9F%E6%8E%A7%E4%B8%8E%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">域控与活动目录的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E5%85%A8%E5%9F%9F%E7%9A%84%E5%88%92%E5%88%86\"><span class=\"toc-text\">安全域的划分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%91\"><span class=\"toc-text\">内网</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DMZ\"><span class=\"toc-text\">DMZ</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%96%E7%BD%91\"><span class=\"toc-text\">外网</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E8%80%85%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">三者关系</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86\"><span class=\"toc-text\">内网信息搜集</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">网络信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">系统信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%9F%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">域相关</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BF%A1%E4%BB%BB%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">信任协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Kerberos%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">Kerberos协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#kerberos%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">kerberos认证过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E7%A8%8B%E4%B8%80\"><span class=\"toc-text\">过程一</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E7%A8%8B%E4%BA%8C\"><span class=\"toc-text\">过程二</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E7%A8%8B%E4%B8%89\"><span class=\"toc-text\">过程三</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NTLM%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">NTLM协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SSPI\"><span class=\"toc-text\">SSPI</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SSP\"><span class=\"toc-text\">SSP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LM-Hash\"><span class=\"toc-text\">LM Hash</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NTLM-Hash%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">NTLM Hash加密算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Windows%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%82%A8%E7%9A%84NTLM-Hash\"><span class=\"toc-text\">Windows系统存储的NTLM Hash</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NTLM%E5%8D%8F%E8%AE%AE%E8%AE%A4%E8%AF%81\"><span class=\"toc-text\">NTLM协议认证</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">参考文献</span></a></li></ol>","author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"PHP 常见内置类浅析","uid":"66ce77a9cc55d19533b30410eadbc5d9","slug":"PHP常见内置类浅析","date":"2023-04-07T18:36:20.000Z","updated":"2023-04-23T01:50:38.000Z","comments":true,"path":"api/articles/PHP常见内置类浅析.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141530896.png","text":"前言周末看题，遇PHP原生类，坐牢，此前未学，故学，浅结，如下。 PHP原生类基础概念什么是原生类呢，接下来来简单介绍一下它。 PHP原生类就是在标准PHP库中已经封装好的类，而在其中，有些类具有一些功能，例如文件读取、目录遍历等，这就给了我们可乘之机，我们只需要实例化这些类，就...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"WEB知识","slug":"WEB知识","count":23,"path":"api/categories/WEB知识.json"}],"tags":[{"name":"反序列化","slug":"反序列化","count":4,"path":"api/tags/反序列化.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"内网靶场实战——ATT&CK实战系列（二）","uid":"17233f7222e00ac9cd24594c3babf058","slug":"内网靶场实战——ATT&CK实战系列（二）","date":"2023-03-19T09:50:20.000Z","updated":"2024-02-14T07:48:52.000Z","comments":true,"path":"api/articles/内网靶场实战——ATT&CK实战系列（二）.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303191750324.png","text":"环境搭建靶场链接http://vulnstack.qiyuanxuetang.net/vuln/detail/3/ 靶场拓扑图如下 对于网卡配置的话，这里只需要两个 一是外网，即192.168.111.0网段 二是内网，即10.10.10.0网段 然后修改一下三台机器的网络适配器...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"内网","slug":"内网","count":12,"path":"api/categories/内网.json"}],"tags":[{"name":"内网","slug":"内网","count":13,"path":"api/tags/内网.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true}}