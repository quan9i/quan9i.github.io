{"title":"docker初学小结","uid":"36e3127158f57e60ea04c3497af98ec7","slug":"docker初学小结","date":"2022-02-10T18:17:28.000Z","updated":"2024-02-14T08:00:32.000Z","comments":true,"path":"api/articles/docker初学小结.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141600438.png","content":"<h1 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h1><p>百度：Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。<br>教程：docker：解决了运行环境和配置问题软件容器，方便做持续集成化并有助于整体发布的容器虚拟化技术<br>小白理解：将全部内容(运行文档，配置环境，运行环境等等)打包到一起，构成一个镜像文件，这样的话从一台计算机移到另一台计算机几乎不会出现问题</p>\n<h1 id=\"理念\"><a href=\"#理念\" class=\"headerlink\" title=\"理念\"></a>理念</h1><p>docker实现”一次封装，到处运行”，docker是基于Go语言实现的云开源项目<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557541.png\" alt=\"在这里插入图片描述\"><b>三要素：镜像，容器，仓库</b><br>对于镜像的理解：<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557337.png\" alt=\"在这里插入图片描述\">对于容器的理解：<br>一个容器可以运行一种服务，当需要用到时，用docker创建一个运行实例，这就是容器，可以把容器看成一个简易版的linux环境<br>对于仓库的理解：<br>就是一堆镜像存放的地方，我们可以把镜像发布到仓库中，用的时候拉下来即可。</p>\n<h2 id=\"同虚拟机的区别\"><a href=\"#同虚拟机的区别\" class=\"headerlink\" title=\"同虚拟机的区别\"></a>同虚拟机的区别</h2><p>（1）虚拟机需要软件和硬件，而docker无需硬件，大大节省了空间<br>（2）虚拟机需要重新加载系统内核，docker与宿主机共用一个操作系统<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557773.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"运用\"><a href=\"#运用\" class=\"headerlink\" title=\"运用\"></a>运用</h1><h2 id=\"输出helloworld镜像\"><a href=\"#输出helloworld镜像\" class=\"headerlink\" title=\"输出helloworld镜像\"></a>输出helloworld镜像</h2><p>语句</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run hello-world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557177.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"配置加速器\"><a href=\"#配置加速器\" class=\"headerlink\" title=\"配置加速器\"></a>配置加速器</h2><p>由于docker是外国的，下载时比较慢，我们需要借助国内的镜像来下载其他插件，这样比较迅速省时，具体操作如下<br>进入docker目录下查看是否存在<code>daemon.json</code>文件<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557960.png\" alt=\"在这里插入图片描述\">我的之前没有，是自己创建的文件，语句为</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">touch <span class=\"token operator\">/</span>etc/docker/daemon<span class=\"token punctuation\">.</span>json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557989.png\" alt=\"在这里插入图片描述\">然后以vim编辑文件，语句为</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">vim daemon<span class=\"token punctuation\">.</span>json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557111.png\" alt=\"在这里插入图片描述\">进入后输入i进入编辑模式，输入以下内容</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"registry-mirrors\"</span>: <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"https://hub-mirror.c.163.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"https://mirror.baidubce.com\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557238.png\" alt=\"在这里插入图片描述\"><br>然后按esc，输入<code>:wq！</code>（含义是保存并强制退出）<br>此时再输入以下语句（重启服务）</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>配置完毕</p>\n<h2 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h2><p>&lt;1&gt;显示版本信息</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557144.png\" alt=\"在这里插入图片描述\"><br>&lt;2&gt;显示系统信息</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker info  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557214.png\" alt=\"在这里插入图片描述\">&lt;3&gt;显示docker命令</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker <span class=\"token operator\">--</span>help<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557426.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h2><h3 id=\"查看本机镜像\"><a href=\"#查看本机镜像\" class=\"headerlink\" title=\"查看本机镜像\"></a>查看本机镜像</h3><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker images<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557482.png\" alt=\"在这里插入图片描述\"><br>REPOSITORY：镜像的仓库源<br>TAG：镜像的标签<br>IMAGES ID：镜像ID<br>CREATED： 镜像创建时间<br>SIZE：镜像大小</p>\n<p>可选项</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token operator\">-</span>a 显示所有镜像 可以把镜像看成一个千层饼，上面的hello-world只是最外层\n<span class=\"token operator\">-</span>q 显示镜像id\n<span class=\"token operator\">--</span>digests 显示镜像的摘要信息（注释）\n <span class=\"token operator\">--</span>no-trunc 显示完整的镜像信息<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>示例如下</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker images <span class=\"token operator\">-</span>aq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557550.png\"></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker images <span class=\"token operator\">--</span>digests <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557130.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker images <span class=\"token operator\">--</span>digests <span class=\"token operator\">--</span>no-trunc <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557140.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"搜索其他镜像\"><a href=\"#搜索其他镜像\" class=\"headerlink\" title=\"搜索其他镜像\"></a>搜索其他镜像</h3><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker search xxx<span class=\"token punctuation\">(</span>镜像名字<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker search tomcat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557521.png\" alt=\"在这里插入图片描述\">常用可选项</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token operator\">-</span>s 列出收藏数不小于指定值的镜像\n<span class=\"token operator\">--</span>no-trunc 显示完整的镜像描述\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><font color=\"red\">注：-s已弃用，移到–filter中使用 </font><br>示例</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker search <span class=\"token operator\">--</span><span class=\"token keyword\">filter</span> stars=30 tomcat    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557280.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h3><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker pull<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker pull tomcat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557422.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h3><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker rmi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>可选项</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token operator\">-</span>f <span class=\"token operator\">/</span><span class=\"token operator\">/</span>强制删除<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker rmi hello-world<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557514.png\" alt=\"在这里插入图片描述\">删除多个时中间以空格分开即可，示例</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker rmi <span class=\"token operator\">-</span>f hello-world nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>删除全部的语句，示例</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker rmi <span class=\"token operator\">-</span>f$<span class=\"token punctuation\">(</span>docker images <span class=\"token operator\">-</span>qa<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h2><p>前提：有镜像<br>有镜像才能创建容器，此为根本前提</p>\n<h3 id=\"新建并启动容器\"><a href=\"#新建并启动容器\" class=\"headerlink\" title=\"新建并启动容器\"></a>新建并启动容器</h3><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run image<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>常用项</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token operator\">-</span>i <span class=\"token operator\">/</span><span class=\"token operator\">/</span>以交互模式运行容器，通常与<span class=\"token operator\">-</span>t联用\n<span class=\"token operator\">-</span>t <span class=\"token operator\">/</span><span class=\"token operator\">/</span>为容器重新分配一个伪终端\n<span class=\"token operator\">-</span>d <span class=\"token operator\">/</span><span class=\"token operator\">/</span>以后台模式启动容器，不在界面显现\n<span class=\"token operator\">-</span>v <span class=\"token operator\">/</span><span class=\"token operator\">/</span> <span class=\"token operator\">/</span>宿主机目录:<span class=\"token operator\">/</span>容器目录\n<span class=\"token operator\">--</span>name=<span class=\"token string\">\"xxx\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span>为容器指定名称为xxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>示例1</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">-</span>it 5d0da3dc9764<span class=\"token punctuation\">(</span>centos镜像id<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557854.png\" alt=\"在这里插入图片描述\">此时相当于在docker中进入到了centos的终端中。<br>发现进入后的字符与镜像id不同，在root终端中查看当前容器，可以发现这个root后的字符是容器id<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557070.png\" alt=\"在这里插入图片描述\">示例2：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">-</span>it  <span class=\"token operator\">--</span>name quan9i 5d0da3dc9764    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557121.png\" alt=\"在这里插入图片描述\">查看当前容器，可以发现名字变为quan9i（不设置时系统自动随机生成）<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557298.png\" alt=\"在这里插入图片描述\">示例3</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">-</span>d centos <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557496.png\" alt=\"在这里插入图片描述\"><br>此时查看当前容器，发现没有正在运行的容器，这是因为docker的机制是如果只有后台运行，没有前台进程，就会立即关闭<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557708.png\" alt=\"在这里插入图片描述\">那么该如何让它保存开启呢，具体示例如下</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">-</span>d centos <span class=\"token operator\">/</span>bin/sh <span class=\"token operator\">-</span>c <span class=\"token string\">\"while true;do echo hello quan9i;sleep 2;done\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557917.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h4><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker logs 0cbe0a5786ad      <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557932.png\" alt=\"在这里插入图片描述\"><br>常用可选项</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token operator\">-</span>t <span class=\"token operator\">/</span><span class=\"token operator\">/</span>添加时间戳\n<span class=\"token operator\">-</span>f <span class=\"token operator\">/</span><span class=\"token operator\">/</span>跟随最新的日志打印，即 及时更新\n<span class=\"token operator\">--</span>tail x <span class=\"token operator\">/</span><span class=\"token operator\">/</span>显示最后x条<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>示例</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker logs <span class=\"token operator\">-</span>t <span class=\"token operator\">-</span>f <span class=\"token operator\">--</span>tail 6 0cbe0a5786ad  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557255.png\" alt=\"在这里插入图片描述\">ctrl+c即可退出</p>\n<h4 id=\"查看容器内运行的进程\"><a href=\"#查看容器内运行的进程\" class=\"headerlink\" title=\"查看容器内运行的进程\"></a>查看容器内运行的进程</h4><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker top 容器id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker top 0cbe0a5786ad<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557263.png\" alt=\"在这里插入图片描述\"><br>之所以能这样使用是因为容器相当于linux的精简版，可以执行linux的部分命令</p>\n<h4 id=\"查看容器内部细节\"><a href=\"#查看容器内部细节\" class=\"headerlink\" title=\"查看容器内部细节\"></a>查看容器内部细节</h4><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker inspect 容器id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker inspect 0cbe0a5786ad<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557407.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"进入正在运行的容器并以命令行交互\"><a href=\"#进入正在运行的容器并以命令行交互\" class=\"headerlink\" title=\"进入正在运行的容器并以命令行交互\"></a>进入正在运行的容器并以命令行交互</h4><p>语句1</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker exec <span class=\"token operator\">-</span>it 容器id bashshell<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>语句2</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker attach 容器id <span class=\"token operator\">/</span><span class=\"token operator\">/</span>重新进入容器，适用于ctrl+p+q退出容器方式<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>两个的区别在于<br>（1）attach直接进入容器终端，不会启动新的进程<br>（2）exec是在容器内打开新的终端，并且启动新的进程<br>简单的说，exec可以得到输出结果并返回到当前界面，而attach是进入终端后再进行执行<br>用成语讲：隔山打牛<br>示例：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker attach  cd10d1992eb4  \n<span class=\"token function\">ls</span> <span class=\"token operator\">-</span>l <span class=\"token operator\">/</span>tmp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker exec <span class=\"token operator\">-</span>t cd10d1992eb4 <span class=\"token function\">ls</span> <span class=\"token operator\">-</span>l <span class=\"token operator\">/</span>tmp  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557694.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"从容器内拷贝文件到主机\"><a href=\"#从容器内拷贝文件到主机\" class=\"headerlink\" title=\"从容器内拷贝文件到主机\"></a>从容器内拷贝文件到主机</h4><p>语句</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker  <span class=\"token function\">cp</span> 镜像id:容器内路径 目的主机路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker <span class=\"token function\">cp</span> cd10d1992eb4: <span class=\"token operator\">/</span>tmp/yum<span class=\"token punctuation\">.</span>log <span class=\"token operator\">/</span>root       <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"列出当前容器\"><a href=\"#列出当前容器\" class=\"headerlink\" title=\"列出当前容器\"></a>列出当前容器</h3><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker <span class=\"token function\">ps</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span>默认显示当前正在运行的容器<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>常用可选项</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token operator\">-</span>l <span class=\"token operator\">/</span><span class=\"token operator\">/</span>显示上一次的容器信息\n<span class=\"token operator\">-</span>a <span class=\"token operator\">/</span><span class=\"token operator\">/</span>显示之前全部的容器信息\n<span class=\"token operator\">-</span>n x <span class=\"token operator\">/</span><span class=\"token operator\">/</span>显示前x次的容器信息\n<span class=\"token operator\">-</span>q <span class=\"token operator\">/</span><span class=\"token operator\">/</span>只显示容器编号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>示例：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker <span class=\"token function\">ps</span> <span class=\"token operator\">-</span>a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker <span class=\"token function\">ps</span> <span class=\"token operator\">-</span>ql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557868.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"退出容器\"><a href=\"#退出容器\" class=\"headerlink\" title=\"退出容器\"></a>退出容器</h3><p>方式1</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">exit</span>  <span class=\"token operator\">/</span><span class=\"token operator\">/</span>退出并关闭容器<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557854.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557064.png\" alt=\"在这里插入图片描述\"><br>方式2</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">ctrl+p+q <span class=\"token operator\">/</span><span class=\"token operator\">/</span>退出容器但不关闭容器<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557155.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker <span class=\"token function\">start</span> 容器id或容器名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker <span class=\"token function\">start</span> aad8f225fee0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557422.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"重启容器\"><a href=\"#重启容器\" class=\"headerlink\" title=\"重启容器\"></a>重启容器</h3><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker restart 容器id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker restart 70d3b31e8fe3    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557718.png\" alt=\"在这里插入图片描述\">可以发现时间由8分钟变成了4秒钟，说明重启成功</p>\n<h3 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h3><p>方式1</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker stop 容器名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>方式2</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker <span class=\"token function\">kill</span> 容器名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>方式1可以理解为电脑正常关机，而方式2可以理解为直接拔掉电源，比较迅速<br>示例</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker stop aad8f225fee0\ndocker <span class=\"token function\">kill</span> 70d3b31e8fe3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557792.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"删除已停止容器\"><a href=\"#删除已停止容器\" class=\"headerlink\" title=\"删除已停止容器\"></a>删除已停止容器</h3><p>rmi为删除镜像，rm为删除容器<br>方法一：<br><font color=\"red\">注：法一已被弃用，执行无效</font></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker <span class=\"token function\">rm</span> <span class=\"token operator\">-</span>f$<span class=\"token punctuation\">(</span>docker <span class=\"token function\">ps</span> <span class=\"token operator\">-</span>a <span class=\"token operator\">-</span>q<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>方法二：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker <span class=\"token function\">ps</span> <span class=\"token operator\">-</span>a <span class=\"token operator\">-</span>q<span class=\"token punctuation\">|</span> xargs docker <span class=\"token function\">rm</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span>删除全部镜像<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557805.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"docker镜像\"><a href=\"#docker镜像\" class=\"headerlink\" title=\"docker镜像\"></a>docker镜像</h1><p>镜像是什么<br>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">（1）UnionFS（联合文件系统）：Union文件系统是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下，Union文件系统是Dokcer镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的镜像。\n特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统加载起来，这样最终的文件系统会包含所有的底层文件和目录\n（2）Docker镜像加载原理\ndocker的镜像实际上是由一层一层的文件系统构成，这种层级的文件系统UnionFS。\n主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的linux/unix系统是一样的，包含boot加载器内核。当boot加载完之后整个内核就都在内存中了，此时内存的使用权已经由bootfs交给内核了，此时系统也会卸载bootfs。\n对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就行，因为底层直接用host和kernel，自己只需要提供rootfs就行。由此可见对于不同的Linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>镜像采用了分层结构，采用这种结构最大的好处就是共享资源，举个例子，当下载一个插件时，他自己的缓存也存在于此，删除这个插件后，再下载这个插件或者需要用到支持此类资源的插件时，速度会快很多，这是因为共享一套底层资源(小白理解，有误轻喷)</p>\n<p>当容器启动时，一个新的可写层被加载到镜像的顶部。<br>这一层通常被称作“容器层”，“容器层”之下都叫“镜像层”，例如下载的tomcat就是容器层<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557988.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"镜像commit\"><a href=\"#镜像commit\" class=\"headerlink\" title=\"镜像commit\"></a>镜像commit</h2><p>开启交互终端<br>法一</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>p 8888:8080 tomcat <span class=\"token operator\">/</span><span class=\"token operator\">/</span>开放的端口是8888，映射到docker的8080端口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557998.png\" alt=\"在这里插入图片描述\">法二</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run  <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>P tomcat   <span class=\"token punctuation\">(</span>这里的p是大写<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>可以看见端口是49154<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557338.png\" alt=\"在这里插入图片描述\"><br>访问与上相同</p>\n<p>开启副本</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker commit <span class=\"token operator\">-</span>a=<span class=\"token string\">\"作者信息\"</span> <span class=\"token operator\">-</span>m=<span class=\"token string\">\"大致信息\"</span>  容器id 版本号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>示例：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker commit <span class=\"token operator\">-</span>a=<span class=\"token string\">\"zzyy\"</span> <span class=\"token operator\">-</span>m=<span class=\"token string\">\"tomcat without docs\"</span>  ca7c25a3947f atguigu/mytomcat:1<span class=\"token punctuation\">.</span>2 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557607.png\" alt=\"在这里插入图片描述\">此副本与原先的区别在于没有doc</p>\n<h2 id=\"容器数据卷\"><a href=\"#容器数据卷\" class=\"headerlink\" title=\"容器数据卷\"></a>容器数据卷</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>Docker将运用与运行的环境打包形成容器运行， Docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据做为镜像的一部分保存下来， 那么当容器删除后，数据自然也就没有了。 为了能保存数据在Docker中我们使用卷。</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>1、数据的持久化<br>2、容器间继承+共享数据</p>\n<h3 id=\"容器内添加\"><a href=\"#容器内添加\" class=\"headerlink\" title=\"容器内添加\"></a>容器内添加</h3><h4 id=\"直接命令添加\"><a href=\"#直接命令添加\" class=\"headerlink\" title=\"直接命令添加\"></a>直接命令添加</h4><p>docker run -it -v /宿主机绝对路径目录:/容器内目录 镜像名<br>示例：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>v  <span class=\"token operator\">/</span>myDataVolume: <span class=\"token operator\">/</span>dataVolumeContainer centos<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557617.png\" alt=\"在这里插入图片描述\"><br>发现已经进入到了容器中<br>此时打开另一个终端（此后称为host终端，第一个称为容器终端），输入ll查看数据卷是否写入<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557744.png\" alt=\"在这里插入图片描述\"><br>可以发现中间已经存在了myDataVolume<br>查看数据卷是否挂载成功</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker inspect 0e82da803fbc <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557236.png\" alt=\"在这里插入图片描述\">小知识，下图中的RW：true说明有写入的权限，即可读可写<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557017.png\" alt=\"在这里插入图片描述\"></p>\n<p>输入后发现binds后是我们刚刚写入的，说明挂载成功<br>此时呢，我们在host终端创建文件<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557367.png\" alt=\"在这里插入图片描述\"><br>然后去容器终端查看<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557435.png\" alt=\"在这里插入图片描述\">发现存在host.txtx文件，此时我们使用vi编辑host文件，在其内写入container updater 01 ，保存并退出，再创建一个新文件container.txt<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141557733.png\" alt=\"在这里插入图片描述\"><br>回到host终端查看<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558011.png\" alt=\"在这里插入图片描述\"><br>发现写入成功，即说明容器和宿主机之间实现了数据共享<br>此时回到容器终端，停止容器并退出<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558157.png\" alt=\"在这里插入图片描述\">回到host终端，在其内新建host02文件并更改host文件内容，内容更改为<br>container update 01<br>host update 01<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558364.png\" alt=\"在这里插入图片描述\"><br>此时在回到容器终端，打开容器，查看文件内容<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558480.png\" alt=\"在这里插入图片描述\"><br>发现改动了，说明容器停止退出后，主机修改后数据同步<br>带权限的命令添加</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>v  <span class=\"token operator\">/</span>myDataVolume: <span class=\"token operator\">/</span>dataVolumeContainer ro centos<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其仅仅少了写入权限，即可以在host终端写入和编辑文件，而容器终端只有查看的权利，没有写入和编辑的权利</p>\n<h4 id=\"dockerflie添加\"><a href=\"#dockerflie添加\" class=\"headerlink\" title=\"dockerflie添加\"></a>dockerflie添加</h4><p>首先在根目录下新建mydocker文件并进入<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558527.png\" alt=\"在这里插入图片描述\"><br>然后再使用vim创建并编辑Dockfile文件<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558689.png\" alt=\"在这里插入图片描述\"><br>在里面写入如下内容</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># volume txt</span>\n<span class=\"token keyword\">FROM</span> centos\nVOLUME <span class=\"token punctuation\">[</span><span class=\"token string\">\"/dataVolumeContainer1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/dataVolumeContainer2\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span>添加两个数据卷\nCMD <span class=\"token function\">echo</span><span class=\"token string\">\"finished,------successs1\"</span>  <span class=\"token operator\">/</span><span class=\"token operator\">/</span>\nCMD <span class=\"token operator\">/</span>bin/bash   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述内容其含义类似于</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>host1:<span class=\"token operator\">/</span>dataVolumeContainer1 <span class=\"token operator\">-</span>v/host2:<span class=\"token operator\">/</span>dataVolumeContainer2 centos <span class=\"token operator\">/</span>bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>知识小扩充：<br>FROM：定制的镜像都是基于 FROM 的镜像，这里的 centos 就是定制需要的基础镜像。后续的操作都是基于 centos。<br>CMD<br>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p>\n<pre><code>CMD 在docker run 时运行。\nRUN 是在 docker build。\n</code></pre>\n<p> 此时file搭建完毕，开始bulid生成镜像</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker bulid <span class=\"token operator\">-</span>f <span class=\"token operator\">/</span>mydocker/Dockerfile <span class=\"token operator\">-</span>t zzyy/centos <span class=\"token punctuation\">.</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>代表当前路径，也可填写其他<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558879.png\" alt=\"在这里插入图片描述\"><br>此时查看容器镜像，可以看见镜像已经生成<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558112.png\" alt=\"在这里插入图片描述\">最后呢，进行run容器</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">-</span>it zzyy/centos<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558231.png\" alt=\"在这里插入图片描述\">此时查看目录<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558297.png\" alt=\"在这里插入图片描述\">发现两个数据卷已经成功写入<br>那此时存在一个问题，就是数据卷的主机路径在哪里，我们重新打开一个终端，在终端下输入如下语句进行查看</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker inspect 容器id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558606.png\" alt=\"在这里插入图片描述\">然后查找可以发现其路径，在Mounts的source中<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558639.png\" alt=\"在这里插入图片描述\"><br>用dockerfile搭建数据卷完成</p>\n<h3 id=\"数据容器卷\"><a href=\"#数据容器卷\" class=\"headerlink\" title=\"数据容器卷\"></a>数据容器卷</h3><p>概念：容器数据卷是指建立数据卷，来同步多个容器间的数据，实现容器间的数据同步。<br>小白理解：建造一个容器作为父容器，其他容器同步于父容器，实现数据共享<br>示例：<br>首先创建一个父容器并创建doc1_add.txt文件</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">--</span>name doc1  zzyy/centos<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558895.png\" alt=\"在这里插入图片描述\"><br>此时创建第二个容器</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">--</span>name dc02 <span class=\"token operator\">--</span>volumes-<span class=\"token keyword\">from</span> doc1  zzyy/centos<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>再进入到数据卷2下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558770.png\" alt=\"在这里插入图片描述\">创建一个doc2_add.txt文件，此时查看目录<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558888.png\" alt=\"在这里插入图片描述\"><br>可以发现父容器的数据也在此内（dco1_add.txt也写入到了其中）<br>同理创建第三个并写入doc3_add.txt文件</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">--</span>name dc03 <span class=\"token operator\">--</span>volumes-<span class=\"token keyword\">from</span> doc1  zzyy/centos <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558074.png\" alt=\"在这里插入图片描述\"></p>\n<p>再进入到父容器中，可以看见三个文件都存在，说明数据实现共享<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558463.png\" alt=\"在这里插入图片描述\"><br>如果删除了父目录，那文件还会存在吗，接下来进行尝试</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker rmi <span class=\"token operator\">-</span>f 8925ea083cdf    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558497.png\" alt=\"在这里插入图片描述\">进入第二个或者第三个容器</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">docker attach 5410be23987d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558529.png\" alt=\"在这里插入图片描述\"><br>可以发现文件仍然存在，因此只要容器没有删除完全，文件就不会消失。<br>结论：<code>容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器为止</code></p>\n<h1 id=\"docker-file\"><a href=\"#docker-file\" class=\"headerlink\" title=\"docker file\"></a>docker file</h1><h2 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>docker file是用来构建docker镜像的构建文件，是由一系列命令和参数构成的脚本</p>\n<h2 id=\"三步骤\"><a href=\"#三步骤\" class=\"headerlink\" title=\"三步骤\"></a>三步骤</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">编写dockerfile文件\ndocker bulid\ndocker run<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"dockerfile-构建过程解析\"><a href=\"#dockerfile-构建过程解析\" class=\"headerlink\" title=\"dockerfile 构建过程解析\"></a>dockerfile 构建过程解析</h2><h3 id=\"dockerfile内容基础知识\"><a href=\"#dockerfile内容基础知识\" class=\"headerlink\" title=\"dockerfile内容基础知识\"></a>dockerfile内容基础知识</h3><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、每条指令都必须为大写字母且后面至少跟随一个参数\n<span class=\"token number\">2</span>、代码从上至下，顺序执行\n<span class=\"token number\">3</span>、<span class=\"token comment\">#表示注释</span>\n<span class=\"token number\">4</span>、每条指令都会创建一个新的镜像层，并对镜像进行提交（千层饼，自下往上叠加）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"dockerfile执行大致流程\"><a href=\"#dockerfile执行大致流程\" class=\"headerlink\" title=\"dockerfile执行大致流程\"></a>dockerfile执行大致流程</h3><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、docker从基础镜像运行一个容器\n<span class=\"token number\">2</span>、执行一条语句并对容器做出修改\n<span class=\"token number\">3</span>、执行类似docker commit的操作提交一个新的镜像层\n<span class=\"token number\">4</span>、docker再基于刚提交的镜像运行一个容器\n<span class=\"token number\">5</span>、执行dockerfile中的下一条指令直至所有指令都执行完成<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"dockerfile保留字指令\"><a href=\"#dockerfile保留字指令\" class=\"headerlink\" title=\"dockerfile保留字指令\"></a>dockerfile保留字指令</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">FROM</span> xx <span class=\"token comment\">//指出当前新镜像是基于哪个镜像的</span>\n<span class=\"token constant\">MAINTAINER</span> xx <span class=\"token comment\">//指出镜像维护者的名字和邮箱地址</span>\n<span class=\"token constant\">RUN</span> xx <span class=\"token comment\">//容器构建时需要执行的命令</span>\n<span class=\"token constant\">EXPOSE</span> xx <span class=\"token comment\">//当前容器对外暴露出的端口</span>\n<span class=\"token constant\">WORKDIR</span> xx <span class=\"token comment\">//指定在创建容器后，，终端默认登录的进来工作目录，一个落脚点</span>\n<span class=\"token constant\">ENV</span> xx <span class=\"token comment\">//用在构建镜像过程中设置环境变量</span>\n<span class=\"token constant\">ADD</span> xx <span class=\"token comment\">//将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包(拷贝加解压)</span>\n<span class=\"token constant\">COPY</span> xx <span class=\"token comment\">//类似ADD，拷贝文件和目录到镜像中。</span>\n<span class=\"token constant\">VOLUME</span> xx <span class=\"token comment\">//容器数据卷，用于数据卷保存和持久化工作</span>\n<span class=\"token constant\">CMD</span> xx <span class=\"token comment\">//指定一个容器启动时要运行的命令，dockerfile中可有多条指令，但只有最后一个生效</span>\n<span class=\"token constant\">ENTRYPOINT</span> xx <span class=\"token comment\">//指定一个容器时要运行的命令，和CMD一样，但在docker run后不会被替换</span>\n<span class=\"token constant\">ONBULID</span> xx <span class=\"token comment\">//当构建一个被继承的dockerfile时运行命令，父镜像在被子镜像继承后其onbulid被触发</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以参考一下Ubuntu的dockerfile</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">FROM</span> scratch\n<span class=\"token constant\">ADD</span> ubuntu<span class=\"token operator\">-</span>xenial<span class=\"token operator\">-</span>core<span class=\"token operator\">-</span>cloudimg<span class=\"token operator\">-</span>amd64<span class=\"token operator\">-</span>root<span class=\"token operator\">.</span>tar<span class=\"token operator\">.</span>gz <span class=\"token operator\">/</span>\n\n<span class=\"token comment\"># a few minor docker-specific tweaks</span>\n<span class=\"token comment\"># see https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap</span>\n<span class=\"token constant\">RUN</span> set <span class=\"token operator\">-</span>xe \\\n\t\\\n<span class=\"token comment\"># https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L40-L48</span>\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'#!/bin/sh'</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>policy<span class=\"token operator\">-</span>rc<span class=\"token operator\">.</span>d \\\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'exit 101'</span> <span class=\"token operator\">>></span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>policy<span class=\"token operator\">-</span>rc<span class=\"token operator\">.</span>d \\\n\t<span class=\"token operator\">&amp;&amp;</span> chmod <span class=\"token operator\">+</span>x <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>policy<span class=\"token operator\">-</span>rc<span class=\"token operator\">.</span>d \\\n\t\\\n<span class=\"token comment\"># https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L54-L56</span>\n\t<span class=\"token operator\">&amp;&amp;</span> dpkg<span class=\"token operator\">-</span>divert <span class=\"token operator\">--</span>local <span class=\"token operator\">--</span>rename <span class=\"token operator\">--</span>add <span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>initctl \\\n\t<span class=\"token operator\">&amp;&amp;</span> cp <span class=\"token operator\">-</span>a <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>policy<span class=\"token operator\">-</span>rc<span class=\"token operator\">.</span>d <span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>initctl \\\n\t<span class=\"token operator\">&amp;&amp;</span> sed <span class=\"token operator\">-</span>i <span class=\"token string single-quoted-string\">'s/^exit.*/exit 0/'</span> <span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>initctl \\\n\t\\\n<span class=\"token comment\"># https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L71-L78</span>\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'force-unsafe-io'</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>dpkg<span class=\"token operator\">/</span>dpkg<span class=\"token operator\">.</span>cfg<span class=\"token operator\">.</span>d<span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>apt<span class=\"token operator\">-</span>speedup \\\n\t\\\n<span class=\"token comment\"># https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L85-L105</span>\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'DPkg::Post-Invoke &#123; \"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true\"; &#125;;'</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>apt<span class=\"token operator\">/</span>apt<span class=\"token operator\">.</span>conf<span class=\"token operator\">.</span>d<span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>clean \\\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'APT::Update::Post-Invoke &#123; \"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true\"; &#125;;'</span> <span class=\"token operator\">>></span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>apt<span class=\"token operator\">/</span>apt<span class=\"token operator\">.</span>conf<span class=\"token operator\">.</span>d<span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>clean \\\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Dir::Cache::pkgcache \"\"; Dir::Cache::srcpkgcache \"\";'</span> <span class=\"token operator\">>></span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>apt<span class=\"token operator\">/</span>apt<span class=\"token operator\">.</span>conf<span class=\"token operator\">.</span>d<span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>clean \\\n\t\\\n<span class=\"token comment\"># https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L109-L115</span>\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Acquire::Languages \"none\";'</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>apt<span class=\"token operator\">/</span>apt<span class=\"token operator\">.</span>conf<span class=\"token operator\">.</span>d<span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>no<span class=\"token operator\">-</span>languages \\\n\t\\\n<span class=\"token comment\"># https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L118-L130</span>\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Acquire::GzipIndexes \"true\"; Acquire::CompressionTypes::Order:: \"gz\";'</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>apt<span class=\"token operator\">/</span>apt<span class=\"token operator\">.</span>conf<span class=\"token operator\">.</span>d<span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>gzip<span class=\"token operator\">-</span>indexes \\\n\t\\\n<span class=\"token comment\"># https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L134-L151</span>\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Apt::AutoRemove::SuggestsImportant \"false\";'</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>apt<span class=\"token operator\">/</span>apt<span class=\"token operator\">.</span>conf<span class=\"token operator\">.</span>d<span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>autoremove<span class=\"token operator\">-</span>suggests\n\n<span class=\"token comment\"># delete all the apt list files since they're big and get stale quickly</span>\n<span class=\"token constant\">RUN</span> rm <span class=\"token operator\">-</span>rf <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>apt<span class=\"token operator\">/</span>lists<span class=\"token operator\">/</span><span class=\"token operator\">*</span>\n<span class=\"token comment\"># this forces \"apt-get update\" in dependent images, which is also good</span>\n<span class=\"token comment\"># (see also https://bugs.launchpad.net/cloud-images/+bug/1699913)</span>\n\n<span class=\"token comment\"># make systemd-detect-virt return \"docker\"</span>\n<span class=\"token comment\"># See: https://github.com/systemd/systemd/blob/aa0c34279ee40bce2f9681b496922dedbadfca19/src/basic/virt.c#L434</span>\n<span class=\"token constant\">RUN</span> mkdir <span class=\"token operator\">-</span>p <span class=\"token operator\">/</span>run<span class=\"token operator\">/</span>systemd <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'docker'</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>run<span class=\"token operator\">/</span>systemd<span class=\"token operator\">/</span>container\n\n<span class=\"token constant\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"/bin/bash\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"dockerfile案例\"><a href=\"#dockerfile案例\" class=\"headerlink\" title=\"dockerfile案例\"></a>dockerfile案例</h2><p>自定义镜像<br>下面以centos为例<br>docker安装的精简版的centos，其自身只保留了内核，对于一些系统认为不是很重要的东西被舍弃掉了，如下图所示<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558585.png\" alt=\"在这里插入图片描述\"></p>\n<p>我们在进入centos后，发现vim无法使用，而且ifconfig也无法使用，且默认路径是/，那如果我们想使用ifconfig、自定义根目录，该如何做呢，这时候我们可以自己做一个镜像，话不多说，dockerfile如下</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> centos  //来源于centos</span>\n<span class=\"token instruction\"><span class=\"token keyword\">MAINTAINER</span> quan9i&lt;quan9i@qq.com> //作者是quan9i，后面是邮箱</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> MYPATH /usr/local  //配置环境变量</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> <span class=\"token variable\">$MYPATH</span> //指定默认路径</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> yum -y  install vim  //安装vim的命令</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> yum -y  install net-tools //安装 </span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 80 //暴露端口为80</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> echo <span class=\"token variable\">$MYPATH</span> </span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> echo <span class=\"token string\">\"success------ok\"</span></span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> /bin/bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时保存并退出，然后开始构建镜像</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker build <span class=\"token operator\">-</span>f <span class=\"token operator\">/</span>mydocker<span class=\"token operator\">/</span>Dockerfile2 <span class=\"token operator\">-</span>t quan9i<span class=\"token operator\">/</span>centos <span class=\"token operator\">.</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558826.png\" alt=\"在这里插入图片描述\"><br>完成后run容器进入即可发现vim和ifconfig可以使用</p>\n<h2 id=\"CMD和ENTRYPOINT的区别（实例）\"><a href=\"#CMD和ENTRYPOINT的区别（实例）\" class=\"headerlink\" title=\"CMD和ENTRYPOINT的区别（实例）\"></a>CMD和ENTRYPOINT的区别（实例）</h2><p>为了演示两者的区别，接下来以tomcat和centos演示一下：<br>查看一下tomact的dockerfile（重点看的是最后CMD，前面太多，不进行全部复制）</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">ENV</span> <span class=\"token constant\">CATALINA_HOME</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>tomcat <span class=\"token comment\">//配置环境</span>\n<span class=\"token constant\">ENV</span> <span class=\"token class-name type-declaration\">PATH</span> <span class=\"token variable\">$CATALINA_HOME</span><span class=\"token operator\">/</span>bin<span class=\"token punctuation\">:</span><span class=\"token variable\">$PATH</span> <span class=\"token comment\">//默认路径</span>\n<span class=\"token constant\">RUN</span> mkdir <span class=\"token operator\">-</span>p <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$CATALINA_HOME</span></span>\"</span>\n<span class=\"token class-name type-declaration\">WORKDIR</span> <span class=\"token variable\">$CATALINA_HOME</span>\n\n<span class=\"token constant\">EXPOSE</span> <span class=\"token number\">8080</span>\n<span class=\"token constant\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"catalina.sh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"run\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//启动容器的命令</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们在启动tomcat时，在后面追加一个ls-l命令，代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>p <span class=\"token number\">8888</span><span class=\"token punctuation\">:</span><span class=\"token number\">8080</span> tomcat ls <span class=\"token operator\">-</span>l   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558090.png\" alt=\"在这里插入图片描述\"><br>根据webapps、work这些可以判断是tomcat里的，此时查看运行容器<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558116.png\" alt=\"在这里插入图片描述\">发现没有容器在运行，说明之前的CMD命令被ls-l这条命令替代了，没有发挥其作用<br>此时呢，就相当于上述的dockerfile是这样的</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">ENV</span> <span class=\"token constant\">CATALINA_HOME</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>tomcat <span class=\"token comment\">//配置环境</span>\n<span class=\"token constant\">ENV</span> <span class=\"token class-name type-declaration\">PATH</span> <span class=\"token variable\">$CATALINA_HOME</span><span class=\"token operator\">/</span>bin<span class=\"token punctuation\">:</span><span class=\"token variable\">$PATH</span> <span class=\"token comment\">//默认路径</span>\n<span class=\"token constant\">RUN</span> mkdir <span class=\"token operator\">-</span>p <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$CATALINA_HOME</span></span>\"</span>\n<span class=\"token class-name type-declaration\">WORKDIR</span> <span class=\"token variable\">$CATALINA_HOME</span>\n\n<span class=\"token constant\">EXPOSE</span> <span class=\"token number\">8080</span>\n<span class=\"token constant\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"catalina.sh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"run\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//启动容器的命令</span>\n<span class=\"token constant\">CMD</span> ls<span class=\"token operator\">-</span>l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时可见CMD的命令会被覆盖</p>\n<p>此时再创建简单的CMD版查询ip和ENTRYPOINT版查询ip观察区别<br>首先创建dockerfile文件，编辑内容如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">FROM</span> centos <span class=\"token comment\">//来自于centos</span>\n<span class=\"token constant\">RUN</span> yum install <span class=\"token operator\">-</span>y curl  <span class=\"token comment\">//用yum安装curl</span>\n<span class=\"token constant\">CMD</span> <span class=\"token punctuation\">[</span> <span class=\"token string double-quoted-string\">\"curl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"-s\"</span> <span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"http://ip.cn\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 执行查询ip的命令</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>此时开始构建镜像</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"> docker build <span class=\"token operator\">-</span>f <span class=\"token operator\">/</span>mydocker<span class=\"token operator\">/</span>Dockerfile3 <span class=\"token operator\">-</span>t myip <span class=\"token operator\">.</span>\n <span class=\"token comment\">//-f 后加路径</span>\n<span class=\"token comment\">// -t 命名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>此时运行容器<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558201.png\" alt=\"在这里插入图片描述\"></p>\n<p>就会执行查询ip的命令<br>但是此时没有显示http报文头信息，如果想要显示头部段信息的话，需要加上-i<br>再次运行并在尾部加上-i，代码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker run myip <span class=\"token operator\">-</span>i<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558353.png\" alt=\"在这里插入图片描述\"><br>发现报错了，这是因为cmd是覆盖，后面的-i替换了之前的cmd命令<br><code> &quot;curl&quot;, &quot;-s&quot; ,&quot;http://ip.cn&quot;</code><br>此时的dockerfile相当于</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">FROM</span> centos <span class=\"token comment\">//来自于centos</span>\n<span class=\"token constant\">RUN</span> yum install <span class=\"token operator\">-</span>y curl  <span class=\"token comment\">//用yum安装curl</span>\n<span class=\"token constant\">CMD</span> <span class=\"token punctuation\">[</span> <span class=\"token string double-quoted-string\">\"curl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"-s\"</span> <span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"http://ip.cn\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 执行查询ip的命令</span>\n<span class=\"token constant\">CMD</span>  <span class=\"token operator\">-</span>i<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是CMD版本的查询ip，接下来创建ENTRYPOINT的dockerfile<br>内容如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">FROM</span> centos <span class=\"token comment\">//来自于centos</span>\n<span class=\"token constant\">RUN</span> yum install <span class=\"token operator\">-</span>y curl  <span class=\"token comment\">//用yum安装curl</span>\n<span class=\"token constant\">ENTRYPOINT</span><span class=\"token punctuation\">[</span> <span class=\"token string double-quoted-string\">\"curl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"-s\"</span> <span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"http://ip.cn\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 执行查询ip的命令</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>然后开始构建</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker build <span class=\"token operator\">-</span>f <span class=\"token operator\">/</span>mydocker<span class=\"token operator\">/</span>Dockerfile4 <span class=\"token operator\">-</span>t myip2 <span class=\"token operator\">.</span>     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>运行容器<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558399.png\" alt=\"在这里插入图片描述\"><br>发现都能正常执行，原有的没有受到影响，且可以正常使用-i<br>此时的dockerfile文件就相当于CMD版本的</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">FROM</span> centos \n<span class=\"token constant\">RUN</span> yum install <span class=\"token operator\">-</span>y curl  \n<span class=\"token constant\">ENTRYPOINT</span><span class=\"token punctuation\">[</span> <span class=\"token string double-quoted-string\">\"curl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"-s\"</span> <span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>i <span class=\"token string double-quoted-string\">\"http://ip.cn\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>由此可见CMD和ENTRYPOINT的区别在于前者是覆盖，后者是追加</p>\n<h2 id=\"ONBULID命令案例\"><a href=\"#ONBULID命令案例\" class=\"headerlink\" title=\"ONBULID命令案例\"></a>ONBULID命令案例</h2><p>温习定义</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">ONBULID</span> xx <span class=\"token comment\">//当构建一个被继承的dockerfile时运行命令，父镜像在被子镜像继承后其onbulid被触发</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首先创建一个父dockerfile文件</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">FROM</span> centos\n<span class=\"token constant\">RUN</span> yum install <span class=\"token operator\">-</span>y curl\n<span class=\"token constant\">CMD</span> <span class=\"token punctuation\">[</span> <span class=\"token string double-quoted-string\">\"curl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"-s\"</span> <span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"http://ip.cn\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token constant\">ONBUILD</span> <span class=\"token constant\">RUN</span> <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"father onbuild------886\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>构建父镜像</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker build <span class=\"token operator\">-</span>f <span class=\"token operator\">/</span>mydocker<span class=\"token operator\">/</span>Dockerfile4 <span class=\"token operator\">-</span>t myip_father <span class=\"token operator\">.</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时docker images可以发现镜像已经搭建完成<br>然后此时再新建一个dockerfile文件，文件内容如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">FROM</span> myip_father <span class=\"token comment\">//不再基于centos，而基于刚刚创建的镜像</span>\n<span class=\"token constant\">RUN</span> yum install <span class=\"token operator\">-</span>y curl \n<span class=\"token constant\">CMD</span> <span class=\"token punctuation\">[</span> <span class=\"token string double-quoted-string\">\"curl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"-s\"</span> <span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"http://ip.cn\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>此时构建镜像</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker build <span class=\"token operator\">-</span>f <span class=\"token operator\">/</span>mydocker<span class=\"token operator\">/</span>Dockerfile5 <span class=\"token operator\">-</span>t myip_son <span class=\"token operator\">.</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558934.png\" alt=\"在这里插入图片描述\"><br>红色部分就是子类在执行时，父类的onbuild被触发</p>\n<h2 id=\"自定义centos9\"><a href=\"#自定义centos9\" class=\"headerlink\" title=\"自定义centos9\"></a>自定义centos9</h2><p>首先创建文件夹，代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">mkdir <span class=\"token operator\">-</span>p <span class=\"token operator\">/</span>zzyyuse<span class=\"token operator\">/</span>mydockerfile<span class=\"token operator\">/</span>tomcat9<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>mkdir小科普</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token operator\">-</span>p 递归创建出具有嵌套叠层关系的文件目录。\n<span class=\"token punctuation\">[</span>root@linuxprobe linuxprobe<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir -p a/b/c/d/e</span>\n<span class=\"token punctuation\">[</span>root@linuxprobe linuxprobe<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd a</span>\n<span class=\"token punctuation\">[</span>root@linuxprobe a<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd b</span>\n<span class=\"token punctuation\">[</span>root@linuxprobe b<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时cd到当前路径，创建c.txt文件</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">cd  <span class=\"token operator\">/</span>zzyyuse<span class=\"token operator\">/</span>mydockerfile<span class=\"token operator\">/</span>tomcat9\ntouch c<span class=\"token operator\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>再将文件拷贝到当前路径</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">cp opt<span class=\"token operator\">/</span>apache<span class=\"token operator\">-</span>tomcat<span class=\"token operator\">-</span><span class=\"token number\">9.0</span><span class=\"token number\">.8</span><span class=\"token operator\">.</span>tar<span class=\"token operator\">.</span>gz  <span class=\"token operator\">/</span>zzyyuse<span class=\"token operator\">/</span>mydockerfile<span class=\"token operator\">/</span>tomcat9\n<span class=\"token comment\">//将opt文件夹中的apache文件复制到当前文件夹中</span>\ncp java<span class=\"token operator\">/</span>jdk<span class=\"token operator\">-</span><span class=\"token number\">8</span>u171<span class=\"token operator\">-</span>linux<span class=\"token operator\">-</span>x64<span class=\"token operator\">.</span>tar<span class=\"token operator\">.</span>gz  <span class=\"token operator\">/</span>zzyyuse<span class=\"token operator\">/</span>mydockerfile<span class=\"token operator\">/</span>tomcat9\\\n<span class=\"token comment\">//将java文件夹中的jdk文件复制到当前文件夹中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558881.png\" alt=\"在这里插入图片描述\"></p>\n<p>此时再创建dockerfile文件，编辑内容如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">FROM</span> centos <span class=\"token comment\">//基于centos</span>\n<span class=\"token constant\">MAINTTAINER</span> zzyy<span class=\"token operator\">&lt;</span>zzyybs@<span class=\"token number\">126.</span>com<span class=\"token operator\">></span><span class=\"token comment\">//维护者名字和邮箱</span>\n<span class=\"token constant\">COPY</span> c<span class=\"token operator\">.</span>txt <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>cincontainer<span class=\"token operator\">.</span>txt<span class=\"token comment\">//复制文件并重命名</span>\n<span class=\"token constant\">ADD</span> jdk<span class=\"token operator\">-</span><span class=\"token number\">8</span>u171<span class=\"token operator\">-</span>linux<span class=\"token operator\">-</span>x64<span class=\"token operator\">.</span>tar<span class=\"token operator\">.</span>gz  <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>\n<span class=\"token constant\">ADD</span> apache<span class=\"token operator\">-</span>tomcat<span class=\"token operator\">-</span><span class=\"token number\">9.0</span><span class=\"token number\">.8</span><span class=\"token operator\">.</span>tar<span class=\"token operator\">.</span>gz  <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>\n<span class=\"token comment\">//把java和tomcat添加到容器中</span>\n<span class=\"token constant\">RUN</span> yum <span class=\"token operator\">-</span>y install vim<span class=\"token comment\">//安装vim编辑器</span>\n<span class=\"token constant\">ENV</span> <span class=\"token constant\">MYPATH</span> <span class=\"token operator\">/</span>us<span class=\"token operator\">/</span>local <span class=\"token comment\">//配置环境变量</span>\n<span class=\"token class-name type-declaration\">WORKDIR</span> <span class=\"token variable\">$MYPATH</span> <span class=\"token comment\">//默认当前路径</span>\n<span class=\"token constant\">ENV</span>  <span class=\"token class-name type-declaration\">CLASSPATH</span> <span class=\"token variable\">$JAVA_HOME</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>dt<span class=\"token punctuation\">,</span><span class=\"token argument-name\">jar</span><span class=\"token punctuation\">:</span><span class=\"token variable\">$JAVA_HOME</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>tools<span class=\"token operator\">.</span>jar\n<span class=\"token constant\">ENV</span> <span class=\"token constant\">CATALINA_HOME</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>apache<span class=\"token operator\">-</span>tomcat<span class=\"token operator\">-</span><span class=\"token number\">9.0</span><span class=\"token number\">.8</span>\n<span class=\"token constant\">ENV</span> <span class=\"token constant\">CATALINA_BASE</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>apache<span class=\"token operator\">-</span>tomcat<span class=\"token operator\">-</span><span class=\"token number\">9.0</span><span class=\"token number\">.8</span>\n<span class=\"token constant\">ENV</span> <span class=\"token class-name type-declaration\">PATH</span> <span class=\"token variable\">$PATH</span><span class=\"token punctuation\">:</span><span class=\"token variable\">$JAVA_HOME</span><span class=\"token operator\">/</span>bin<span class=\"token punctuation\">:</span><span class=\"token variable\">$CATALINA_HOME</span><span class=\"token operator\">/</span>lib<span class=\"token punctuation\">:</span><span class=\"token variable\">$CATALINA_HOME</span><span class=\"token operator\">/</span>bin\n<span class=\"token comment\">//配置java与tomcat环境变量</span>\n<span class=\"token constant\">EXPOSE</span> <span class=\"token number\">8080</span> <span class=\"token comment\">//容器运行时监听的端口</span>\n<span class=\"token comment\">#ENTRYPOINT [\"usr/local/apache-tomcat-9.0.8/bin/startup.sh\"]</span>\n<span class=\"token comment\">#CMD [\"/usr/local/apache-tomcat-9.0.8/bin/catalina.sh\",\"run\"]</span>\n<span class=\"token constant\">CMD</span> usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>apache<span class=\"token operator\">-</span>tomcat<span class=\"token operator\">-</span><span class=\"token number\">9.0</span><span class=\"token number\">.8</span><span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>startup<span class=\"token operator\">.</span>sh <span class=\"token operator\">&amp;&amp;</span> tail <span class=\"token operator\">-</span><span class=\"token constant\">F</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>apache<span class=\"token operator\">-</span>tomcat<span class=\"token operator\">-</span><span class=\"token number\">9.0</span><span class=\"token number\">.8</span><span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>logs<span class=\"token operator\">/</span>catalina<span class=\"token operator\">.</span>out\n<span class=\"token comment\">//追加读日志</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时开始构建镜像</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker bulid <span class=\"token operator\">-</span>t zzyytomcat<span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token operator\">.</span>\n<span class=\"token comment\">//此时没写-f ，在本目录下时，不写默认读取的就是此dockerfile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>安装完成后docker images查看<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558147.png\" alt=\"在这里插入图片描述\"><br>然后运行容器，代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker run <span class=\"token operator\">-</span>d <span class=\"token operator\">-</span>p <span class=\"token number\">9080</span><span class=\"token punctuation\">:</span><span class=\"token number\">8080</span> <span class=\"token operator\">--</span>name myt9\n<span class=\"token comment\">//-d 守护式进程（后台运行） -p 端口映射 --name 容器命名</span>\n<span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>zzyyuse<span class=\"token operator\">/</span>mydockerfile<span class=\"token operator\">/</span>tomcat9<span class=\"token operator\">/</span>test<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>apache<span class=\"token operator\">-</span>tomcat<span class=\"token operator\">-</span><span class=\"token number\">9.0</span><span class=\"token number\">.8</span><span class=\"token operator\">/</span>webapps<span class=\"token operator\">/</span>test\n<span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>zzyyuse<span class=\"token operator\">/</span>mydockerfile<span class=\"token operator\">/</span>tomcat9<span class=\"token operator\">/</span>tomcat9logs<span class=\"token operator\">/</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>apache<span class=\"token operator\">-</span>tomcat<span class=\"token operator\">-</span><span class=\"token number\">9.0</span><span class=\"token number\">.8</span><span class=\"token operator\">/</span>logs\n<span class=\"token comment\">//-v 添加数据卷  ，后面文件会同步到前面</span>\n<span class=\"token operator\">--</span>privilegd<span class=\"token operator\">=</span><span class=\"token constant boolean\">true</span>\n<span class=\"token comment\">//偶尔会出现报错，这个命令可以解决报错问题</span>\nzzyytomcat9\n<span class=\"token comment\">//镜像名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>再docker ps<br>如下图所示<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558237.png\" alt=\"在这里插入图片描述\">发现已经运行，再进行验证，在虚拟机中访问localhost:9080<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558698.png\" alt=\"在这里插入图片描述\"></p>\n<p>构建成功，我们是以后台进程式的方法启动的容器，那如果想要进行ls命令该怎么做呢？<br>答案是利用exec，构造代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker exec 容器id ls <span class=\"token operator\">-</span>l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558628.png\" alt=\"在这里插入图片描述\"><br>此时如果想要将web服务test发布的话，该如何操作呢<br>首先进入test文件下，再创建WEB-INF文件夹<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558763.png\" alt=\"在这里插入图片描述\"><br>然后在其内创建并编辑web.xml文件，内容如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?</span>xml version<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"UTF-8\"</span><span class=\"token delimiter important\">?></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\t\n\t<span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://java.sun.com/xml/javase<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemal_ocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns.javaee http: //java.sun.com/xml/ns/javaee/wev-app_2_5.xsd<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>WebApp_ID version=<span class=\"token punctuation\">\"</span></span><span class=\"token attr-name\">2.5\"</span><span class=\"token punctuation\">></span></span>\n\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>display-name</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>display-name</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时呢，再创建并编辑a.jsp文件，其内容如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page language<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"java\"</span> contentTYPE<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"text/html\"</span><span class=\"token punctuation\">;</span>charset<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"UTF-8\"</span> pageEncoding<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"UTF-8\"</span><span class=\"token operator\">%</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span> <span class=\"token constant\">DOCTYPE</span> html <span class=\"token keyword\">PUBLIC</span> <span class=\"token string double-quoted-string\">\"-//w3c//DTD html 4.01 Transitional//EN\"</span> <span class=\"token string double-quoted-string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n   \t\t\t<span class=\"token operator\">&lt;</span>meta http<span class=\"token operator\">-</span>equiv<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"Content-Type\"</span> content<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"text/html;charset=UTF-8\"</span><span class=\"token operator\">></span>\n           \t<span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Insert title here<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>welcome<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n           <span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> <span class=\"token string double-quoted-string\">\"i am in docker tomcat self\"</span><span class=\"token operator\">%</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>system<span class=\"token operator\">.</span>out<span class=\"token operator\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"==========docker tomcat self\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">%</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>重启容器，然后在虚拟机中访问<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558830.png\" alt=\"在这里插入图片描述\"></p>\n<p>此时你再在虚拟机的内容里多两个换行符（&lt; br&gt;）会同步到centos中，那就会在访问时生效<br>此时再查看catlina.out文件，代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">cat catlina<span class=\"token operator\">.</span>out<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558126.png\" alt=\"在这里插入图片描述\"><br>我访问了三次，后台日志记录了三次</p>\n<h1 id=\"docker安装mysql\"><a href=\"#docker安装mysql\" class=\"headerlink\" title=\"docker安装mysql\"></a>docker安装mysql</h1><p>docker安装mysql<br>首先呢搜索mysql，代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker search mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558020.png\" alt=\"在这里插入图片描述\">此时我们如果想要下载5.6的版本该怎么办呢，后面加上版本号即可,代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker pull mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558311.png\" alt=\"在这里插入图片描述\"><br>下载完成，接下来运行容器，代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker run <span class=\"token operator\">-</span>p  <span class=\"token number\">1111</span><span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>  <span class=\"token operator\">--</span>name mysql\n<span class=\"token comment\">//虚拟机的1111端口映射mysql的3306端口 ，给容器命名为mysql</span>\n<span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>zzyyuse<span class=\"token operator\">/</span>mysql<span class=\"token operator\">/</span>conf<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>mysql<span class=\"token operator\">/</span>conf<span class=\"token operator\">.</span>d\n<span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>zzyyuse<span class=\"token operator\">/</span>mysql<span class=\"token operator\">/</span>logs<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>logs\n<span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>zzyyuse<span class=\"token operator\">/</span>mysql<span class=\"token operator\">/</span>data<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>mysql\n<span class=\"token comment\">//添加三个数据卷</span>\n<span class=\"token operator\">-</span>e <span class=\"token constant\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span>\n<span class=\"token comment\">//初始化mysql密码为123456</span>\n<span class=\"token operator\">-</span>d \n<span class=\"token comment\">//以守护式进程运行（后台运行）</span>\nmysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.6</span>\n<span class=\"token comment\">//镜像名称</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行结果如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558387.png\" alt=\"在这里插入图片描述\"><br>此时该如何启动容器，那当然是exec，代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">docker exec <span class=\"token operator\">-</span>it <span class=\"token number\">8e37864</span>ac5d1 <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558449.png\" alt=\"在这里插入图片描述\"><br>此时呢，通过密码进入mysql，代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">mysql <span class=\"token operator\">-</span>u root <span class=\"token operator\">-</span>p\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><font color=\"red\">注:密码默认是不回显的，直接输入即可</font><br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558569.png\" alt=\"在这里插入图片描述\"><br>此时先新建一个数据库</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> db01<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>建表</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> t_book<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>bookName <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>插入字段</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_book <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558937.png\" alt=\"在这里插入图片描述\"><br>此时呢，我们尝试在外部进行连接（虚拟机ip可通过 <code>ifconfig</code>指令查看，显示的docker中inet后的数字就是ip）<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558025.png\" alt=\"在这里插入图片描述\">连接后，可以发现刚刚编写的内容<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558156.png\" alt=\"在这里插入图片描述\"><br>此时你把java改成tomcat<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558251.png\" alt=\"在这里插入图片描述\"><br>再从mysql里面看<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558317.png\" alt=\"在这里插入图片描述\"><br>完成了外部机器连接mysql<br>此时想要备份的话，如下操作即可</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">docker <span class=\"token keyword\">exec</span> 容器id sh <span class=\"token operator\">-</span>c <span class=\"token string\">'exec mysqldump --all-databases -u root -p\"123456\" '</span><span class=\"token operator\">></span><span class=\"token operator\">/</span>zzyyuse<span class=\"token operator\">/</span><span class=\"token keyword\">all</span><span class=\"token operator\">-</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">sql</span>\n<span class=\"token comment\">//含义是让全部数据库以root名字和123456为密码登录，然后将数据同步到文件夹zzyyuse下的all-database.sql文件中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此时切换到这个目录下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">cd <span class=\"token operator\">/</span>zzyyuse<span class=\"token operator\">/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看文件</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">cat  <span class=\"token keyword\">all</span><span class=\"token operator\">-</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">sql</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558620.png\" alt=\"在这里插入图片描述\">数据已全部备份到此文件中</p>\n<h1 id=\"本地镜像发布到阿里云上\"><a href=\"#本地镜像发布到阿里云上\" class=\"headerlink\" title=\"本地镜像发布到阿里云上\"></a>本地镜像发布到阿里云上</h1><p>首先呢，我们复习一下commit，使用commit构建一个镜像</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">docker <span class=\"token keyword\">commit</span> <span class=\"token operator\">-</span>a zzyy <span class=\"token operator\">-</span>m <span class=\"token string\">\"new centos with xx and xx\"</span> bbb491fa56fc  mycentos \n<span class=\"token comment\">//-a 描述作者信息 -m 描述大致信息</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>执行结果如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558762.png\" alt=\"在这里插入图片描述\"><br>此时打开阿里云，在里面搜索容器镜像服务<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558820.png\" alt=\"在这里插入图片描述\"><br>然后创建个人版，然后开始创建个人仓库<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558967.png\" alt=\"在这里插入图片描述\"><br>再选本地仓库<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558955.png\" alt=\"在这里插入图片描述\">此时给出了以下几个代码<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558042.png\" alt=\"在这里插入图片描述\">按1、3步骤操作即可，但是第一个命令执行时会报错，如下图<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558469.png\" alt=\"在这里插入图片描述\"><br>这是因为没有设置固定密码的问题，找到刚刚的个人版那里，点击进去，选最下方的访问凭证，设置固定密码即可<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141558509.png\" alt=\"在这里插入图片描述\"><br>然后最终设置完毕后在阿里云镜像仓库中就可以找到自己搭建的镜像啦，docker初学就到这里结束，本人只是小白，有问题还请各位大佬多多指教</p>\n","feature":true,"text":"基础概念百度：Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。教程：docker：解决了运行环境和...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"语言学习","slug":"语言学习","count":1,"path":"api/categories/语言学习.json"}],"tags":[{"name":"docker","slug":"docker","count":1,"path":"api/tags/docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基础概念</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%90%86%E5%BF%B5\"><span class=\"toc-text\">理念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">同虚拟机的区别</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%94%A8\"><span class=\"toc-text\">运用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BAhelloworld%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">输出helloworld镜像</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F%E5%99%A8\"><span class=\"toc-text\">配置加速器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">帮助命令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">镜像命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BA%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">查看本机镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%90%9C%E7%B4%A2%E5%85%B6%E4%BB%96%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">搜索其他镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">下载镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">删除镜像</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">容器命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BA%E5%B9%B6%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">新建并启动容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">查看日志</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E5%86%85%E8%BF%90%E8%A1%8C%E7%9A%84%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">查看容器内运行的进程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E5%86%85%E9%83%A8%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">查看容器内部细节</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E5%85%A5%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B9%B6%E4%BB%A5%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">进入正在运行的容器并以命令行交互</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E5%AE%B9%E5%99%A8%E5%86%85%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%88%B0%E4%B8%BB%E6%9C%BA\"><span class=\"toc-text\">从容器内拷贝文件到主机</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E5%87%BA%E5%BD%93%E5%89%8D%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">列出当前容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%80%E5%87%BA%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">退出容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">启动容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%90%AF%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">重启容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%81%9C%E6%AD%A2%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">停止容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%B7%B2%E5%81%9C%E6%AD%A2%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">删除已停止容器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#docker%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">docker镜像</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%95%9C%E5%83%8Fcommit\"><span class=\"toc-text\">镜像commit</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7\"><span class=\"toc-text\">容器数据卷</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E5%86%85%E6%B7%BB%E5%8A%A0\"><span class=\"toc-text\">容器内添加</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0\"><span class=\"toc-text\">直接命令添加</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#dockerflie%E6%B7%BB%E5%8A%A0\"><span class=\"toc-text\">dockerflie添加</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8%E5%8D%B7\"><span class=\"toc-text\">数据容器卷</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#docker-file\"><span class=\"toc-text\">docker file</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5-1\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">三步骤</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dockerfile-%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">dockerfile 构建过程解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dockerfile%E5%86%85%E5%AE%B9%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">dockerfile内容基础知识</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dockerfile%E6%89%A7%E8%A1%8C%E5%A4%A7%E8%87%B4%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">dockerfile执行大致流程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dockerfile%E4%BF%9D%E7%95%99%E5%AD%97%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">dockerfile保留字指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dockerfile%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">dockerfile案例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CMD%E5%92%8CENTRYPOINT%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E5%AE%9E%E4%BE%8B%EF%BC%89\"><span class=\"toc-text\">CMD和ENTRYPOINT的区别（实例）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ONBULID%E5%91%BD%E4%BB%A4%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">ONBULID命令案例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89centos9\"><span class=\"toc-text\">自定义centos9</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#docker%E5%AE%89%E8%A3%85mysql\"><span class=\"toc-text\">docker安装mysql</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A\"><span class=\"toc-text\">本地镜像发布到阿里云上</span></a></li></ol>","author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"服务器+docker搭建wordpress博客","uid":"a45f7c773a3149d4d0d45e9d198b7bbc","slug":"服务器+docker搭建wordpress博客","date":"2022-05-18T03:56:30.000Z","updated":"2023-03-14T07:19:26.000Z","comments":true,"path":"api/articles/服务器+docker搭建wordpress博客.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141518266.png","text":"前言由于http显示的不安全让我感觉很不好，所以百度了一下，添加了SSL证书，而后成功转换成了https，过程记录如下，希望对师傅们有所帮助。 端口第一个我们需要注意的事情就是我们是否开启了443端口，我们的服务器是否开了端口 而后呢，我们需要查看我们的wordpress是否开启...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"博客","slug":"博客","count":2,"path":"api/categories/博客.json"}],"tags":[{"name":"博客搭建","slug":"博客搭建","count":2,"path":"api/tags/博客搭建.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":false},"next_post":{}}